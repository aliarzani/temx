{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signInSaga);\n\n// tslint:disable-next-line no-submodule-imports\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { userData } from '../../profile';\nimport { signInError, signInRequire2FA, signUpRequireVerification } from '../actions';\nvar sessionsConfig = {\n  apiVersion: 'barong'\n};\nexport function signInSaga(action) {\n  var user;\n  return _regeneratorRuntime.wrap(function signInSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(sessionsConfig), '/identity/sessions', action.payload);\n\n        case 3:\n          user = _context.sent;\n          _context.next = 6;\n          return put(userData({\n            user: user\n          }));\n\n        case 6:\n          _context.next = 8;\n          return put(signUpRequireVerification({\n            requireVerification: user.state === 'pending'\n          }));\n\n        case 8:\n          _context.next = 10;\n          return put(signInRequire2FA({\n            require2fa: user.otp\n          }));\n\n        case 10:\n          _context.next = 35;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.t1 = _context.t0.code;\n          _context.next = _context.t1 === 401 ? 17 : 31;\n          break;\n\n        case 17:\n          if (!(_context.t0.message.indexOf('identity.session.not_active') > -1)) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 20;\n          return put(signUpRequireVerification({\n            requireVerification: true\n          }));\n\n        case 20:\n          _context.next = 22;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 22:\n          if (!(_context.t0.message.indexOf('identity.session.missing_otp') > -1)) {\n            _context.next = 25;\n            break;\n          }\n\n          _context.next = 25;\n          return put(signInRequire2FA({\n            require2fa: true\n          }));\n\n        case 25:\n          if (!(_context.t0.message.indexOf('identity.session.invalid_otp') > -1)) {\n            _context.next = 30;\n            break;\n          }\n\n          _context.next = 28;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 28:\n          _context.next = 30;\n          return put(signInRequire2FA({\n            require2fa: true\n          }));\n\n        case 30:\n          return _context.abrupt(\"break\", 35);\n\n        case 31:\n          _context.next = 33;\n          return put(signInError(_context.t0));\n\n        case 33:\n          _context.next = 35;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/user/auth/sagas/signInSaga.ts"],"names":["signInSaga","call","put","API","alertPush","userData","signInError","signInRequire2FA","signUpRequireVerification","sessionsConfig","apiVersion","action","post","payload","user","requireVerification","state","require2fa","otp","code","message","indexOf","type"],"mappings":";;;;yBAYiBA,U;;AAZjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,WAAT,EAAmCC,gBAAnC,EAAqDC,yBAArD,QAAsF,YAAtF;AAGA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUV,UAAV,CAAqBW,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEc,iBAAMV,IAAI,CAACE,GAAG,CAACS,IAAJ,CAASH,cAAT,CAAD,EAA2B,oBAA3B,EAAiDE,MAAM,CAACE,OAAxD,CAAV;;AAFd;AAEOC,UAAAA,IAFP;AAAA;AAGC,iBAAMZ,GAAG,CAACG,QAAQ,CAAC;AAAES,YAAAA,IAAI,EAAJA;AAAF,WAAD,CAAT,CAAT;;AAHD;AAAA;AAKC,iBAAMZ,GAAG,CAACM,yBAAyB,CAAC;AAAEO,YAAAA,mBAAmB,EAAED,IAAI,CAACE,KAAL,KAAe;AAAtC,WAAD,CAA1B,CAAT;;AALD;AAAA;AAMC,iBAAMd,GAAG,CAACK,gBAAgB,CAAC;AAAEU,YAAAA,UAAU,EAAEH,IAAI,CAACI;AAAnB,WAAD,CAAjB,CAAT;;AAND;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,wBAQS,YAAMC,IARf;AAAA,0CASU,GATV;AAAA;;AAAA;AAAA,gBAUa,YAAMC,OAAN,CAAcC,OAAd,CAAsB,6BAAtB,IAAuD,CAAC,CAVrE;AAAA;AAAA;AAAA;;AAAA;AAWa,iBAAMnB,GAAG,CAACM,yBAAyB,CAAC;AAACO,YAAAA,mBAAmB,EAAE;AAAtB,WAAD,CAA1B,CAAT;;AAXb;AAAA;AAYa,iBAAMb,GAAG,CAACE,SAAS,CAAC;AAACgB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBD,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CG,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAZb;AAAA,gBAca,YAAMF,OAAN,CAAcC,OAAd,CAAsB,8BAAtB,IAAwD,CAAC,CAdtE;AAAA;AAAA;AAAA;;AAAA;AAgBa,iBAAMnB,GAAG,CAACK,gBAAgB,CAAC;AAAEU,YAAAA,UAAU,EAAE;AAAd,WAAD,CAAjB,CAAT;;AAhBb;AAAA,gBAkBa,YAAMG,OAAN,CAAcC,OAAd,CAAsB,8BAAtB,IAAwD,CAAC,CAlBtE;AAAA;AAAA;AAAA;;AAAA;AAmBa,iBAAMnB,GAAG,CAACE,SAAS,CAAC;AAACgB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBD,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CG,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAnBb;AAAA;AAoBa,iBAAMpB,GAAG,CAACK,gBAAgB,CAAC;AAAEU,YAAAA,UAAU,EAAE;AAAd,WAAD,CAAjB,CAAT;;AApBb;AAAA;;AAAA;AAAA;AAwBS,iBAAMf,GAAG,CAACI,WAAW,aAAZ,CAAT;;AAxBT;AAAA;AAyBS,iBAAMJ,GAAG,CAACE,SAAS,CAAC;AAACgB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBD,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CG,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAzBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line no-submodule-imports\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { userData } from '../../profile';\nimport { signInError, SignInFetch, signInRequire2FA, signUpRequireVerification } from '../actions';\n\n\nconst sessionsConfig: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* signInSaga(action: SignInFetch) {\n    try {\n        const user = yield call(API.post(sessionsConfig), '/identity/sessions', action.payload);\n        yield put(userData({ user }));\n\n        yield put(signUpRequireVerification({ requireVerification: user.state === 'pending' }));\n        yield put(signInRequire2FA({ require2fa: user.otp }));\n    } catch (error) {\n        switch (error.code) {\n            case 401:\n                if (error.message.indexOf('identity.session.not_active') > -1) {\n                    yield put(signUpRequireVerification({requireVerification: true}));\n                    yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n                }\n                if (error.message.indexOf('identity.session.missing_otp') > -1) {\n                    // yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n                    yield put(signInRequire2FA({ require2fa: true }));\n                }\n                if (error.message.indexOf('identity.session.invalid_otp') > -1) {\n                    yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n                    yield put(signInRequire2FA({ require2fa: true }));\n                }\n                break;\n            default:\n                yield put(signInError(error));\n                yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}