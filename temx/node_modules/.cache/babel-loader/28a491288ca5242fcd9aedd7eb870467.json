{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/screens/SignUpScreen/index.tsx\";\nimport { Button } from '@openware/components';\nimport cx from 'classnames';\nimport * as React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { captchaType, siteKey } from '../../api';\nimport { Modal, SignUpForm } from '../../components';\nimport { GeetestCaptcha } from '../../containers';\nimport { EMAIL_REGEX, ERROR_INVALID_EMAIL, ERROR_INVALID_PASSWORD, ERROR_PASSWORD_CONFIRMATION, PASSWORD_REGEX, setDocumentTitle } from '../../helpers';\nimport { selectCurrentLanguage, selectSignUpError, selectSignUpRequireVerification, signUp as _signUp } from '../../modules';\nexport var extractRefID = function extractRefID(props) {\n  return new URLSearchParams(props.location.search).get('refid');\n};\n\nvar SignUp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SignUp, _React$Component);\n\n  function SignUp(props) {\n    var _this;\n\n    _classCallCheck(this, SignUp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SignUp).call(this, props));\n    _this.state = {\n      showModal: false,\n      email: '',\n      password: '',\n      confirmPassword: '',\n      captcha_response: '',\n      reCaptchaSuccess: false,\n      refId: '',\n      hasConfirmed: false,\n      emailError: '',\n      passwordError: '',\n      confirmationError: '',\n      emailFocused: false,\n      passwordFocused: false,\n      confirmPasswordFocused: false,\n      refIdFocused: false,\n      geetestCaptchaSuccess: false,\n      shouldGeetestReset: false\n    };\n    _this.reCaptchaRef = void 0;\n    _this.geetestCaptchaRef = void 0;\n\n    _this.renderCaptcha = function () {\n      var shouldGeetestReset = _this.state.shouldGeetestReset;\n\n      switch (captchaType()) {\n        case 'recaptcha':\n          return React.createElement(\"div\", {\n            className: \"cr-sign-up-form__recaptcha\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196\n            },\n            __self: this\n          }, React.createElement(ReCAPTCHA, {\n            ref: _this.reCaptchaRef,\n            sitekey: siteKey(),\n            onChange: _this.handleReCaptchaSuccess,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197\n            },\n            __self: this\n          }));\n\n        case 'geetest':\n          return React.createElement(GeetestCaptcha, {\n            ref: _this.geetestCaptchaRef,\n            shouldCaptchaReset: shouldGeetestReset,\n            onSuccess: _this.handleGeetestCaptchaSuccess,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          });\n\n        default:\n          return null;\n      }\n    };\n\n    _this.handleCheckboxClick = function () {\n      _this.setState({\n        hasConfirmed: !_this.state.hasConfirmed\n      });\n    };\n\n    _this.handleChangeEmail = function (value) {\n      _this.setState({\n        email: value\n      });\n    };\n\n    _this.handleChangePassword = function (value) {\n      _this.setState({\n        password: value\n      });\n    };\n\n    _this.handleChangeConfirmPassword = function (value) {\n      _this.setState({\n        confirmPassword: value\n      });\n    };\n\n    _this.handleChangeRefId = function (value) {\n      _this.setState({\n        refId: value\n      });\n    };\n\n    _this.handleFocusEmail = function () {\n      _this.setState({\n        emailFocused: !_this.state.emailFocused\n      });\n    };\n\n    _this.handleFocusPassword = function () {\n      _this.setState({\n        passwordFocused: !_this.state.passwordFocused\n      });\n    };\n\n    _this.handleFocusConfirmPassword = function () {\n      _this.setState({\n        confirmPasswordFocused: !_this.state.confirmPasswordFocused\n      });\n    };\n\n    _this.handleFocusRefId = function () {\n      _this.setState({\n        refIdFocused: !_this.state.refIdFocused\n      });\n    };\n\n    _this.handleSignIn = function () {\n      _this.props.history.push('/signin');\n    };\n\n    _this.handleReCaptchaSuccess = function (value) {\n      _this.setState({\n        reCaptchaSuccess: true,\n        captcha_response: value\n      });\n    };\n\n    _this.handleGeetestCaptchaSuccess = function (value) {\n      _this.setState({\n        geetestCaptchaSuccess: true,\n        captcha_response: value,\n        shouldGeetestReset: false\n      });\n    };\n\n    _this.handleSignUp = function () {\n      var _this$state = _this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          captcha_response = _this$state.captcha_response,\n          refId = _this$state.refId;\n      var i18n = _this.props.i18n;\n\n      if (refId) {\n        switch (captchaType()) {\n          case 'none':\n            _this.props.signUp({\n              email: email,\n              password: password,\n              refid: refId,\n              lang: i18n.toUpperCase()\n            });\n\n            break;\n\n          case 'recaptcha':\n          case 'geetest':\n            _this.props.signUp({\n              email: email,\n              password: password,\n              captcha_response: captcha_response,\n              refid: refId\n            });\n\n            break;\n\n          default:\n            _this.props.signUp({\n              email: email,\n              password: password,\n              captcha_response: captcha_response,\n              refid: refId,\n              lang: i18n.toUpperCase()\n            });\n\n            break;\n        }\n      } else {\n        switch (captchaType()) {\n          case 'none':\n            _this.props.signUp({\n              email: email,\n              password: password,\n              lang: i18n.toUpperCase()\n            });\n\n            break;\n\n          case 'recaptcha':\n          case 'geetest':\n          default:\n            _this.props.signUp({\n              email: email,\n              password: password,\n              captcha_response: captcha_response,\n              lang: i18n.toUpperCase()\n            });\n\n            break;\n        }\n      }\n\n      _this.setState({\n        reCaptchaSuccess: false,\n        geetestCaptchaSuccess: false,\n        captcha_response: ''\n      });\n    };\n\n    _this.renderModalHeader = function () {\n      return React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.header'\n      }));\n    };\n\n    _this.renderModalBody = function () {\n      return React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.body'\n      })));\n    };\n\n    _this.renderModalFooter = function () {\n      return React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"pg-exchange-modal-submit-footer__button-inverse\",\n        label: \"OK\",\n        onClick: _this.closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }));\n    };\n\n    _this.closeModal = function () {\n      _this.setState({\n        showModal: false\n      });\n\n      _this.props.history.push('/signin');\n    };\n\n    _this.extractRefID = function (url) {\n      return new URLSearchParams(url).get('refid');\n    };\n\n    _this.handleValidateForm = function () {\n      var _this$state2 = _this.state,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          confirmPassword = _this$state2.confirmPassword;\n      var isEmailValid = email.match(EMAIL_REGEX);\n      var isPasswordValid = password.match(PASSWORD_REGEX);\n      var isConfirmPasswordValid = password === confirmPassword;\n\n      if (!isEmailValid && !isPasswordValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_PASSWORD\n          }),\n          hasConfirmed: false\n        });\n\n        return;\n      }\n\n      if (!isEmailValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: '',\n          hasConfirmed: false\n        });\n\n        return;\n      }\n\n      if (!isPasswordValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: '',\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_PASSWORD\n          }),\n          hasConfirmed: false\n        });\n\n        return;\n      }\n\n      if (!isConfirmPasswordValid) {\n        _this.setState({\n          confirmationError: _this.props.intl.formatMessage({\n            id: ERROR_PASSWORD_CONFIRMATION\n          }),\n          emailError: '',\n          passwordError: '',\n          hasConfirmed: false\n        });\n\n        return;\n      }\n    };\n\n    _this.reCaptchaRef = React.createRef();\n    _this.geetestCaptchaRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(SignUp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Sign Up');\n      var localReferralCode = localStorage.getItem('referralCode');\n      var refId = this.extractRefID(this.props.location.search);\n      var referralCode = refId || localReferralCode || '';\n      this.setState({\n        refId: referralCode\n      });\n\n      if (refId && refId !== localReferralCode) {\n        localStorage.setItem('referralCode', referralCode);\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var email = this.state.email;\n\n      if (nextProps.requireVerification) {\n        nextProps.history.push('/email-verification', {\n          email: email\n        });\n      }\n\n      if (nextProps.signUpError) {\n        if (this.reCaptchaRef.current) {\n          this.reCaptchaRef.current.reset();\n        }\n\n        if (this.geetestCaptchaRef.current) {\n          this.setState({\n            shouldGeetestReset: true\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.props.loading;\n      var _this$state3 = this.state,\n          email = _this$state3.email,\n          password = _this$state3.password,\n          confirmPassword = _this$state3.confirmPassword,\n          refId = _this$state3.refId,\n          captcha_response = _this$state3.captcha_response,\n          reCaptchaSuccess = _this$state3.reCaptchaSuccess,\n          hasConfirmed = _this$state3.hasConfirmed,\n          emailError = _this$state3.emailError,\n          passwordError = _this$state3.passwordError,\n          confirmationError = _this$state3.confirmationError,\n          emailFocused = _this$state3.emailFocused,\n          passwordFocused = _this$state3.passwordFocused,\n          confirmPasswordFocused = _this$state3.confirmPasswordFocused,\n          refIdFocused = _this$state3.refIdFocused,\n          geetestCaptchaSuccess = _this$state3.geetestCaptchaSuccess;\n      var className = cx('pg-sign-up-screen__container', {\n        loading: loading\n      });\n      return React.createElement(\"div\", {\n        className: \"pg-sign-up-screen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(SignUpForm, {\n        labelSignIn: this.props.intl.formatMessage({\n          id: 'page.header.signIn'\n        }),\n        labelSignUp: this.props.intl.formatMessage({\n          id: 'page.header.signUp'\n        }),\n        emailLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.email'\n        }),\n        passwordLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.password'\n        }),\n        confirmPasswordLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.confirmPassword'\n        }),\n        referalCodeLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.referalCode'\n        }),\n        termsMessage: this.props.intl.formatMessage({\n          id: 'page.header.signUp.terms'\n        }),\n        refId: refId,\n        handleChangeRefId: this.handleChangeRefId,\n        isLoading: loading,\n        onSignIn: this.handleSignIn,\n        onSignUp: this.handleSignUp,\n        email: email,\n        handleChangeEmail: this.handleChangeEmail,\n        password: password,\n        handleChangePassword: this.handleChangePassword,\n        confirmPassword: confirmPassword,\n        handleChangeConfirmPassword: this.handleChangeConfirmPassword,\n        hasConfirmed: hasConfirmed,\n        clickCheckBox: this.handleCheckboxClick,\n        validateForm: this.handleValidateForm,\n        emailError: emailError,\n        passwordError: passwordError,\n        confirmationError: confirmationError,\n        confirmPasswordFocused: confirmPasswordFocused,\n        refIdFocused: refIdFocused,\n        emailFocused: emailFocused,\n        passwordFocused: passwordFocused,\n        handleFocusEmail: this.handleFocusEmail,\n        handleFocusPassword: this.handleFocusPassword,\n        handleFocusConfirmPassword: this.handleFocusConfirmPassword,\n        handleFocusRefId: this.handleFocusRefId,\n        captchaType: captchaType(),\n        renderCaptcha: this.renderCaptcha(),\n        reCaptchaSuccess: reCaptchaSuccess,\n        geetestCaptchaSuccess: geetestCaptchaSuccess,\n        captcha_response: captcha_response,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        show: this.state.showModal,\n        header: this.renderModalHeader(),\n        content: this.renderModalBody(),\n        footer: this.renderModalFooter(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SignUp;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    i18n: selectCurrentLanguage(state),\n    requireVerification: selectSignUpRequireVerification(state),\n    signUpError: selectSignUpError(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    signUp: function signUp(credentials) {\n      return dispatch(_signUp(credentials));\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nvar SignUpScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(SignUp)));\nexport { SignUpScreen };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/screens/SignUpScreen/index.tsx"],"names":["Button","cx","React","ReCAPTCHA","injectIntl","connect","withRouter","captchaType","siteKey","Modal","SignUpForm","GeetestCaptcha","EMAIL_REGEX","ERROR_INVALID_EMAIL","ERROR_INVALID_PASSWORD","ERROR_PASSWORD_CONFIRMATION","PASSWORD_REGEX","setDocumentTitle","selectCurrentLanguage","selectSignUpError","selectSignUpRequireVerification","signUp","extractRefID","props","URLSearchParams","location","search","get","SignUp","state","showModal","email","password","confirmPassword","captcha_response","reCaptchaSuccess","refId","hasConfirmed","emailError","passwordError","confirmationError","emailFocused","passwordFocused","confirmPasswordFocused","refIdFocused","geetestCaptchaSuccess","shouldGeetestReset","reCaptchaRef","geetestCaptchaRef","renderCaptcha","handleReCaptchaSuccess","handleGeetestCaptchaSuccess","handleCheckboxClick","setState","handleChangeEmail","value","handleChangePassword","handleChangeConfirmPassword","handleChangeRefId","handleFocusEmail","handleFocusPassword","handleFocusConfirmPassword","handleFocusRefId","handleSignIn","history","push","handleSignUp","i18n","refid","lang","toUpperCase","renderModalHeader","intl","formatMessage","id","renderModalBody","renderModalFooter","closeModal","url","handleValidateForm","isEmailValid","match","isPasswordValid","isConfirmPasswordValid","createRef","localReferralCode","localStorage","getItem","referralCode","setItem","nextProps","requireVerification","signUpError","current","reset","loading","className","Component","mapStateToProps","mapDispatchProps","dispatch","credentials","SignUpScreen"],"mappings":"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","sourcesContent":["import { Button } from '@openware/components';\nimport cx from 'classnames';\nimport { History } from 'history';\nimport * as React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport {\n    InjectedIntlProps,\n    injectIntl,\n} from 'react-intl';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { captchaType, siteKey } from '../../api';\nimport { Modal, SignUpForm } from '../../components';\nimport { GeetestCaptcha } from '../../containers';\nimport {\n    EMAIL_REGEX,\n    ERROR_INVALID_EMAIL,\n    ERROR_INVALID_PASSWORD,\n    ERROR_PASSWORD_CONFIRMATION,\n    PASSWORD_REGEX,\n    setDocumentTitle,\n} from '../../helpers';\nimport {\n    RootState,\n    selectCurrentLanguage,\n    selectSignUpError,\n    selectSignUpRequireVerification,\n    signUp,\n} from '../../modules';\n\ninterface ReduxProps {\n    requireVerification?: boolean;\n    loading?: boolean;\n}\n\ninterface DispatchProps {\n    signUp: typeof signUp;\n}\n\ninterface RouterProps {\n    location: {\n        search: string;\n    };\n    history: History;\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & InjectedIntlProps;\n\nexport const extractRefID = (props: RouterProps) => new URLSearchParams(props.location.search).get('refid');\n\nclass SignUp extends React.Component<Props> {\n    public readonly state = {\n        showModal: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        captcha_response: '',\n        reCaptchaSuccess: false,\n        refId: '',\n        hasConfirmed: false,\n        emailError: '',\n        passwordError: '',\n        confirmationError: '',\n        emailFocused: false,\n        passwordFocused: false,\n        confirmPasswordFocused: false,\n        refIdFocused: false,\n        geetestCaptchaSuccess: false,\n        shouldGeetestReset: false,\n    };\n\n    public constructor(props) {\n        super(props);\n        this.reCaptchaRef = React.createRef();\n        this.geetestCaptchaRef = React.createRef();\n    }\n\n    private reCaptchaRef;\n    private geetestCaptchaRef;\n\n    public componentDidMount() {\n        setDocumentTitle('Sign Up');\n        const localReferralCode = localStorage.getItem('referralCode');\n        const refId = this.extractRefID(this.props.location.search);\n        const referralCode = refId || localReferralCode || '';\n        this.setState({\n            refId: referralCode,\n        });\n        if (refId && refId !== localReferralCode) {\n            localStorage.setItem('referralCode', referralCode);\n        }\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        const { email } = this.state;\n\n        if (nextProps.requireVerification) {\n            nextProps.history.push('/email-verification', {email: email});\n        }\n\n        if (nextProps.signUpError) {\n            if (this.reCaptchaRef.current) {\n                this.reCaptchaRef.current.reset();\n            }\n\n            if (this.geetestCaptchaRef.current) {\n                this.setState({ shouldGeetestReset: true });\n            }\n        }\n    }\n\n    public render() {\n        const { loading } = this.props;\n        const {\n            email,\n            password,\n            confirmPassword,\n            refId,\n            captcha_response,\n            reCaptchaSuccess,\n            hasConfirmed,\n            emailError,\n            passwordError,\n            confirmationError,\n            emailFocused,\n            passwordFocused,\n            confirmPasswordFocused,\n            refIdFocused,\n            geetestCaptchaSuccess,\n        } = this.state;\n\n        const className = cx('pg-sign-up-screen__container', { loading });\n        return (\n            <div className=\"pg-sign-up-screen\">\n                <div className={className}>\n                    <SignUpForm\n                        labelSignIn={this.props.intl.formatMessage({ id: 'page.header.signIn'})}\n                        labelSignUp={this.props.intl.formatMessage({ id: 'page.header.signUp'})}\n                        emailLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.email'})}\n                        passwordLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.password'})}\n                        confirmPasswordLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.confirmPassword'})}\n                        referalCodeLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.referalCode'})}\n                        termsMessage={this.props.intl.formatMessage({ id: 'page.header.signUp.terms'})}\n                        refId={refId}\n                        handleChangeRefId={this.handleChangeRefId}\n                        isLoading={loading}\n                        onSignIn={this.handleSignIn}\n                        onSignUp={this.handleSignUp}\n                        email={email}\n                        handleChangeEmail={this.handleChangeEmail}\n                        password={password}\n                        handleChangePassword={this.handleChangePassword}\n                        confirmPassword={confirmPassword}\n                        handleChangeConfirmPassword={this.handleChangeConfirmPassword}\n                        hasConfirmed={hasConfirmed}\n                        clickCheckBox={this.handleCheckboxClick}\n                        validateForm={this.handleValidateForm}\n                        emailError={emailError}\n                        passwordError={passwordError}\n                        confirmationError={confirmationError}\n                        confirmPasswordFocused={confirmPasswordFocused}\n                        refIdFocused={refIdFocused}\n                        emailFocused={emailFocused}\n                        passwordFocused={passwordFocused}\n                        handleFocusEmail={this.handleFocusEmail}\n                        handleFocusPassword={this.handleFocusPassword}\n                        handleFocusConfirmPassword={this.handleFocusConfirmPassword}\n                        handleFocusRefId={this.handleFocusRefId}\n                        captchaType={captchaType()}\n                        renderCaptcha={this.renderCaptcha()}\n                        reCaptchaSuccess={reCaptchaSuccess}\n                        geetestCaptchaSuccess={geetestCaptchaSuccess}\n                        captcha_response={captcha_response}\n                    />\n                    <Modal\n                        show={this.state.showModal}\n                        header={this.renderModalHeader()}\n                        content={this.renderModalBody()}\n                        footer={this.renderModalFooter()}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private renderCaptcha = () => {\n        const { shouldGeetestReset } = this.state;\n\n        switch (captchaType()) {\n            case 'recaptcha':\n                return (\n                    <div className=\"cr-sign-up-form__recaptcha\">\n                        <ReCAPTCHA\n                            ref={this.reCaptchaRef}\n                            sitekey={siteKey()}\n                            onChange={this.handleReCaptchaSuccess}\n                        />\n                    </div>\n                );\n            case 'geetest':\n                return (\n                    <GeetestCaptcha\n                        ref={this.geetestCaptchaRef}\n                        shouldCaptchaReset={shouldGeetestReset}\n                        onSuccess={this.handleGeetestCaptchaSuccess}\n                    />\n                );\n            default:\n                return null;\n\n        }\n    }\n\n\n    private handleCheckboxClick = () => {\n        this.setState({\n            hasConfirmed: !this.state.hasConfirmed,\n        });\n    }\n\n    private handleChangeEmail = (value: string) => {\n        this.setState({\n            email: value,\n        });\n    };\n\n    private handleChangePassword = (value: string) => {\n        this.setState({\n            password: value,\n        });\n    };\n\n    private handleChangeConfirmPassword = (value: string) => {\n        this.setState({\n            confirmPassword: value,\n        });\n    };\n\n    private handleChangeRefId = (value: string) => {\n        this.setState({\n            refId: value,\n        });\n    };\n\n    private handleFocusEmail = () => {\n        this.setState({\n            emailFocused: !this.state.emailFocused,\n        });\n    };\n\n    private handleFocusPassword = () => {\n        this.setState({\n            passwordFocused: !this.state.passwordFocused,\n        });\n    };\n\n    private handleFocusConfirmPassword = () => {\n        this.setState({\n            confirmPasswordFocused: !this.state.confirmPasswordFocused,\n        });\n    };\n\n    private handleFocusRefId = () => {\n        this.setState({\n            refIdFocused: !this.state.refIdFocused,\n        });\n    };\n\n    private handleSignIn = () => {\n        this.props.history.push('/signin');\n    };\n\n    private handleReCaptchaSuccess = (value: string) => {\n        this.setState({\n            reCaptchaSuccess: true,\n            captcha_response: value,\n        });\n    };\n\n    private handleGeetestCaptchaSuccess = value => {\n        this.setState({\n            geetestCaptchaSuccess: true,\n            captcha_response: value,\n            shouldGeetestReset: false,\n        });\n    }\n\n    private handleSignUp = () => {\n        const {\n            email,\n            password,\n            captcha_response,\n            refId,\n        } = this.state;\n\n        const { i18n } = this.props;\n\n        if (refId) {\n            switch (captchaType()) {\n                case 'none':\n                    this.props.signUp({\n                        email,\n                        password,\n                        refid: refId,\n                        lang: i18n.toUpperCase(),\n                    });\n                    break;\n                case 'recaptcha':\n                case 'geetest':\n                    this.props.signUp({\n                        email,\n                        password,\n                        captcha_response,\n                        refid: refId,\n                    });\n                    break;\n                default:\n                    this.props.signUp({\n                        email,\n                        password,\n                        captcha_response,\n                        refid: refId,\n                        lang: i18n.toUpperCase(),\n                    });\n                    break;\n            }\n        } else {\n            switch (captchaType()) {\n                case 'none':\n                    this.props.signUp({\n                        email,\n                        password,\n                        lang: i18n.toUpperCase(),\n                    });\n                    break;\n                case 'recaptcha':\n                case 'geetest':\n                default:\n                    this.props.signUp({\n                        email,\n                        password,\n                        captcha_response,\n                        lang: i18n.toUpperCase(),\n                    });\n                    break;\n            }\n        }\n\n        this.setState({\n            reCaptchaSuccess: false,\n            geetestCaptchaSuccess: false,\n            captcha_response: '',\n        });\n    };\n\n    private renderModalHeader = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-header\">\n                {this.props.intl.formatMessage({id: 'page.header.signUp.modal.header'})}\n            </div>\n        );\n    };\n\n    private renderModalBody = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-body\">\n                <h2>\n                    {this.props.intl.formatMessage({id: 'page.header.signUp.modal.body'})}\n                </h2>\n            </div>\n        );\n    };\n\n    private renderModalFooter = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-footer\">\n                <Button\n                    className=\"pg-exchange-modal-submit-footer__button-inverse\"\n                    label=\"OK\"\n                    onClick={this.closeModal}\n                />\n            </div>\n        );\n    };\n\n    private closeModal = () => {\n        this.setState({showModal: false});\n        this.props.history.push('/signin');\n    };\n\n    private extractRefID = (url: string) => new URLSearchParams(url).get('refid');\n\n    private handleValidateForm = () => {\n        const {email, password, confirmPassword} = this.state;\n        const isEmailValid = email.match(EMAIL_REGEX);\n        const isPasswordValid = password.match(PASSWORD_REGEX);\n        const isConfirmPasswordValid = password === confirmPassword;\n\n        if (!isEmailValid && !isPasswordValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: this.props.intl.formatMessage({ id: ERROR_INVALID_PASSWORD }),\n                hasConfirmed: false,\n            });\n            return;\n        }\n\n        if (!isEmailValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: '',\n                hasConfirmed: false,\n            });\n            return;\n        }\n\n        if (!isPasswordValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: '',\n                passwordError: this.props.intl.formatMessage({ id: ERROR_INVALID_PASSWORD }),\n                hasConfirmed: false,\n            });\n            return;\n        }\n\n        if (!isConfirmPasswordValid) {\n            this.setState({\n                confirmationError: this.props.intl.formatMessage({ id: ERROR_PASSWORD_CONFIRMATION }),\n                emailError: '',\n                passwordError: '',\n                hasConfirmed: false,\n            });\n            return;\n        }\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    i18n: selectCurrentLanguage(state),\n    requireVerification: selectSignUpRequireVerification(state),\n    signUpError: selectSignUpError(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        signUp: credentials => dispatch(signUp(credentials)),\n    });\n\n// tslint:disable-next-line:no-any\nconst SignUpScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(SignUp) as any));\n\nexport {\n    SignUpScreen,\n};\n"]},"metadata":{},"sourceType":"module"}