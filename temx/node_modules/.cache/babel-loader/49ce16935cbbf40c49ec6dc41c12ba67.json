{"ast":null,"code":"import _toConsumableArray from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/MarketDepth/index.tsx\";\nimport { Decimal, MarketDepths } from '@openware/components';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { selectCurrentMarket, selectDepthAsks, selectDepthBids } from '../../modules';\nvar settings = {\n  tooltip: true,\n  dataKeyX: 'price',\n  dataKeyY: 'cumulativeVolume'\n};\n\nvar MarketDepthContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MarketDepthContainer, _React$Component);\n\n  function MarketDepthContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MarketDepthContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MarketDepthContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.convertToCumulative = function (data, type) {\n      var currentMarket = _this.props.currentMarket;\n\n      if (!currentMarket) {\n        return;\n      }\n\n      var _ref = [currentMarket.base_unit.toUpperCase(), currentMarket.quote_unit.toUpperCase()],\n          askCurrency = _ref[0],\n          bidCurrency = _ref[1];\n\n      var tipLayout = function tipLayout(_ref2) {\n        var volume = _ref2.volume,\n            price = _ref2.price,\n            cumulativeVolume = _ref2.cumulativeVolume,\n            cumulativePrice = _ref2.cumulativePrice;\n        return React.createElement(\"span\", {\n          className: 'pg-market-depth__tooltip',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"page.body.trade.header.marketDepths.content.price\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }), \" : \", Decimal.format(price, currentMarket.price_precision), \" \", bidCurrency), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"page.body.trade.header.marketDepths.content.volume\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), \" : \", Decimal.format(volume, currentMarket.amount_precision), \" \", askCurrency), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"page.body.trade.header.marketDepths.content.cumulativeVolume\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }), \" : \", Decimal.format(cumulativeVolume, currentMarket.amount_precision), \" \", askCurrency), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"page.body.trade.header.marketDepths.content.cumulativeValue\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }), \" : \", Decimal.format(cumulativePrice, currentMarket.price_precision), \" \", bidCurrency));\n      };\n\n      var cumulativeVolumeData = 0;\n      var cumulativePriceData = 0;\n      var cumulative = data.map(function (item, index) {\n        var _ref3;\n\n        var _item = _slicedToArray(item, 2),\n            price = _item[0],\n            volume = _item[1];\n\n        var numberVolume = Decimal.format(volume, currentMarket.amount_precision);\n        var numberPrice = Decimal.format(price, currentMarket.price_precision);\n        cumulativeVolumeData = +numberVolume + cumulativeVolumeData;\n        cumulativePriceData = cumulativePriceData + +numberPrice * +numberVolume;\n        return _ref3 = {}, _defineProperty(_ref3, type, Decimal.format(cumulativeVolumeData, currentMarket.amount_precision)), _defineProperty(_ref3, \"cumulativePrice\", Decimal.format(cumulativePriceData, currentMarket.price_precision)), _defineProperty(_ref3, \"cumulativeVolume\", Decimal.format(cumulativeVolumeData, currentMarket.amount_precision)), _defineProperty(_ref3, \"volume\", Decimal.format(+volume, currentMarket.amount_precision)), _defineProperty(_ref3, \"price\", Decimal.format(+numberPrice, currentMarket.price_precision)), _defineProperty(_ref3, \"name\", tipLayout({\n          volume: volume,\n          price: price,\n          cumulativeVolume: cumulativeVolumeData,\n          cumulativePrice: cumulativePriceData\n        })), _ref3;\n      });\n      return type === 'bid' ? cumulative.sort(function (a, b) {\n        return b.bid - a.bid;\n      }) : cumulative.sort(function (a, b) {\n        return a.ask - b.ask;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MarketDepthContainer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var currentMarket = next.currentMarket;\n      var prevCurrentMarket = this.props.currentMarket;\n\n      if (currentMarket && currentMarket !== prevCurrentMarket) {\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(prev, next) {\n      var asksItems = prev.asksItems,\n          bidsItems = prev.bidsItems;\n      var ordersLength = Number(asksItems.length) + Number(bidsItems.length);\n      return ordersLength !== this.props.asksItems.length + this.props.bidsItems.length;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          asksItems = _this$props.asksItems,\n          bidsItems = _this$props.bidsItems;\n      var colors = {\n        fillAreaAsk: '#fa5252',\n        fillAreaBid: '#12b886',\n        gridBackgroundStart: '#1a243b',\n        gridBackgroundEnd: '#1a243b',\n        strokeAreaAsk: '#fa5252',\n        strokeAreaBid: '#12b886',\n        strokeGrid: ' #B8E9F5',\n        strokeAxis: '#cccccc'\n      };\n      return React.createElement(\"div\", {\n        className: \"cr-market-depth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-table-header__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: 'pg-market-depth__title',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.trade.header.marketDepths\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }))), asksItems.length || bidsItems.length ? this.renderMarketDepth(colors) : null);\n    }\n  }, {\n    key: \"renderMarketDepth\",\n    value: function renderMarketDepth(colors) {\n      return React.createElement(MarketDepths, {\n        settings: settings,\n        className: 'pg-market-depth',\n        colors: colors,\n        data: this.convertToDepthFormat(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"convertToDepthFormat\",\n    value: function convertToDepthFormat() {\n      var _this$props2 = this.props,\n          asksItems = _this$props2.asksItems,\n          bidsItems = _this$props2.bidsItems;\n      var asksItemsLength = asksItems.length;\n      var bidsItemsLength = bidsItems.length;\n      var resultLength = asksItemsLength > bidsItemsLength ? bidsItemsLength : asksItemsLength;\n      var asks = asksItems.slice(0, resultLength);\n      var bids = bidsItems.slice(0, resultLength);\n      var asksVolume = this.convertToCumulative(asks, 'ask');\n      var bidsVolume = this.convertToCumulative(bids, 'bid');\n      return [].concat(_toConsumableArray(bidsVolume), _toConsumableArray(asksVolume));\n    }\n  }]);\n\n  return MarketDepthContainer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    asksItems: selectDepthAsks(state),\n    bidsItems: selectDepthBids(state),\n    currentMarket: selectCurrentMarket(state)\n  };\n};\n\nexport var MarketDepthsComponent = connect(mapStateToProps)(MarketDepthContainer);","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/MarketDepth/index.tsx"],"names":["Decimal","MarketDepths","React","FormattedMessage","connect","selectCurrentMarket","selectDepthAsks","selectDepthBids","settings","tooltip","dataKeyX","dataKeyY","MarketDepthContainer","convertToCumulative","data","type","currentMarket","props","base_unit","toUpperCase","quote_unit","askCurrency","bidCurrency","tipLayout","volume","price","cumulativeVolume","cumulativePrice","format","price_precision","amount_precision","cumulativeVolumeData","cumulativePriceData","cumulative","map","item","index","numberVolume","numberPrice","sort","a","b","bid","ask","next","prevCurrentMarket","forceUpdate","prev","asksItems","bidsItems","ordersLength","Number","length","colors","fillAreaAsk","fillAreaBid","gridBackgroundStart","gridBackgroundEnd","strokeAreaAsk","strokeAreaBid","strokeGrid","strokeAxis","renderMarketDepth","convertToDepthFormat","asksItemsLength","bidsItemsLength","resultLength","asks","slice","bids","asksVolume","bidsVolume","Component","mapStateToProps","state","MarketDepthsComponent"],"mappings":"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","sourcesContent":["import { Decimal, MarketDepths } from '@openware/components';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport {\n    Market,\n    RootState,\n    selectCurrentMarket,\n    selectDepthAsks,\n    selectDepthBids,\n} from '../../modules';\n\ninterface ReduxProps {\n    asksItems: string[][];\n    bidsItems: string[][];\n    currentMarket: Market | undefined;\n}\n\ntype Props = ReduxProps;\n\nconst settings = {\n    tooltip: true,\n    dataKeyX: 'price',\n    dataKeyY: 'cumulativeVolume',\n};\n\nclass MarketDepthContainer extends React.Component<Props> {\n    public componentWillReceiveProps(next: Props) {\n        const { currentMarket } = next;\n        const { currentMarket: prevCurrentMarket} = this.props;\n\n        if (currentMarket && currentMarket !== prevCurrentMarket) {\n            this.forceUpdate();\n        }\n    }\n\n    public shouldComponentUpdate(prev, next) {\n        const { asksItems, bidsItems } = prev;\n        const ordersLength = Number(asksItems.length) + Number(bidsItems.length);\n\n        return ordersLength !== (this.props.asksItems.length + this.props.bidsItems.length);\n    }\n\n    public render() {\n        const { asksItems, bidsItems } = this.props;\n        const colors = {\n            fillAreaAsk: '#fa5252',\n            fillAreaBid: '#12b886',\n            gridBackgroundStart: '#1a243b',\n            gridBackgroundEnd: '#1a243b',\n            strokeAreaAsk: '#fa5252',\n            strokeAreaBid: '#12b886',\n            strokeGrid: ' #B8E9F5',\n            strokeAxis: '#cccccc',\n        };\n        return (\n            <div className=\"cr-market-depth\">\n                <div className=\"cr-table-header__content\">\n                    <div className={'pg-market-depth__title'}>\n                        <FormattedMessage id=\"page.body.trade.header.marketDepths\" />\n                    </div>\n                </div>\n                {(asksItems.length || bidsItems.length) ? this.renderMarketDepth(colors) : null}\n            </div>\n        );\n    }\n\n    private renderMarketDepth(colors) {\n        return (\n            <MarketDepths\n                settings={settings}\n                className={'pg-market-depth'}\n                colors={colors}\n                data={this.convertToDepthFormat()}\n            />);\n    }\n\n    private convertToCumulative = (data, type) => {\n        const { currentMarket } = this.props;\n\n        if (!currentMarket) {\n            return;\n        }\n\n        const [askCurrency, bidCurrency] = [currentMarket.base_unit.toUpperCase(), currentMarket.quote_unit.toUpperCase()];\n        const tipLayout = ({ volume, price, cumulativeVolume, cumulativePrice }) => (\n            <span className={'pg-market-depth__tooltip'}>\n                <span><FormattedMessage id=\"page.body.trade.header.marketDepths.content.price\" /> : {Decimal.format(price, currentMarket.price_precision)} {bidCurrency}</span>\n                <span><FormattedMessage id=\"page.body.trade.header.marketDepths.content.volume\" /> : {Decimal.format(volume, currentMarket.amount_precision)} {askCurrency}</span>\n                <span><FormattedMessage id=\"page.body.trade.header.marketDepths.content.cumulativeVolume\" /> : {Decimal.format(cumulativeVolume, currentMarket.amount_precision)} {askCurrency}</span>\n                <span><FormattedMessage id=\"page.body.trade.header.marketDepths.content.cumulativeValue\" /> : {Decimal.format(cumulativePrice, currentMarket.price_precision)} {bidCurrency}</span>\n            </span>\n        );\n\n        let cumulativeVolumeData = 0;\n        let cumulativePriceData = 0;\n\n        const cumulative = data.map((item, index) => {\n            const [price, volume] = item;\n            const numberVolume = Decimal.format(volume, currentMarket.amount_precision);\n            const numberPrice = Decimal.format(price, currentMarket.price_precision);\n            cumulativeVolumeData = +numberVolume + cumulativeVolumeData;\n            cumulativePriceData = cumulativePriceData + (+numberPrice * +numberVolume);\n            return {\n                [type]: Decimal.format(cumulativeVolumeData, currentMarket.amount_precision),\n                cumulativePrice: Decimal.format(cumulativePriceData, currentMarket.price_precision),\n                cumulativeVolume: Decimal.format(cumulativeVolumeData, currentMarket.amount_precision),\n                volume: Decimal.format(+volume, currentMarket.amount_precision),\n                price: Decimal.format(+numberPrice, currentMarket.price_precision),\n                name: tipLayout({ volume, price, cumulativeVolume: cumulativeVolumeData, cumulativePrice: cumulativePriceData }),\n            };\n        });\n\n        return type === 'bid' ? cumulative\n            .sort((a, b) => b.bid - a.bid) :\n            cumulative.sort((a, b) => a.ask - b.ask);\n    };\n\n    private convertToDepthFormat() {\n        const { asksItems, bidsItems } = this.props;\n        const asksItemsLength = asksItems.length;\n        const bidsItemsLength = bidsItems.length;\n\n\n        const resultLength = asksItemsLength > bidsItemsLength ? bidsItemsLength : asksItemsLength;\n        const asks = asksItems.slice(0, resultLength);\n        const bids = bidsItems.slice(0, resultLength);\n\n        const asksVolume = this.convertToCumulative(asks, 'ask');\n        const bidsVolume = this.convertToCumulative(bids, 'bid');\n\n        return [...bidsVolume, ...asksVolume];\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    asksItems: selectDepthAsks(state),\n    bidsItems: selectDepthBids(state),\n    currentMarket: selectCurrentMarket(state),\n});\n\nexport const MarketDepthsComponent = connect(mapStateToProps)(MarketDepthContainer);\n"]},"metadata":{},"sourceType":"module"}