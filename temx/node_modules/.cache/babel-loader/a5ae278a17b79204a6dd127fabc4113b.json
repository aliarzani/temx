{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleKlineFetchSaga);\n\n// tslint:disable-next-line no-submodule-imports\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../alert';\nimport { klineData } from '../actions';\nvar klineRequestOptions = {\n  apiVersion: 'arke'\n};\nexport function handleKlineFetchSaga(action) {\n  var _action$payload, market, resolution, from, to, data, convertedData;\n\n  return _regeneratorRuntime.wrap(function handleKlineFetchSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, market = _action$payload.market, resolution = _action$payload.resolution, from = _action$payload.from, to = _action$payload.to;\n          _context.next = 4;\n          return call(API.get(klineRequestOptions), \"/public/markets/\".concat(market, \"/k-line?period=\").concat(resolution, \"&time_from=\").concat(from, \"&time_to=\").concat(to));\n\n        case 4:\n          data = _context.sent;\n          convertedData = data.map(function (elem) {\n            var _elem$map = elem.map(function (e) {\n              switch (typeof e) {\n                case 'number':\n                  return e;\n\n                case 'string':\n                  return Number.parseFloat(e);\n\n                default:\n                  throw new Error(\"unexpected type \".concat(typeof e));\n              }\n            }),\n                _elem$map2 = _slicedToArray(_elem$map, 6),\n                date = _elem$map2[0],\n                open = _elem$map2[1],\n                high = _elem$map2[2],\n                low = _elem$map2[3],\n                close = _elem$map2[4],\n                volume = _elem$map2[5];\n\n            return {\n              date: date * 1e3,\n              open: open,\n              high: high,\n              low: low,\n              close: close,\n              volume: volume\n            };\n          });\n          _context.next = 8;\n          return put(klineData(convertedData));\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/public/kline/sagas/handleKlineFetchSaga.ts"],"names":["handleKlineFetchSaga","call","put","API","alertPush","klineData","klineRequestOptions","apiVersion","action","payload","market","resolution","from","to","get","data","convertedData","map","elem","e","Number","parseFloat","Error","date","open","high","low","close","volume","message","code","type"],"mappings":";;;;;yBAUiBA,oB;;AAVjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAAsC,YAAtC;AAEA,IAAMC,mBAAmC,GAAG;AACxCC,EAAAA,UAAU,EAAE;AAD4B,CAA5C;AAIA,OAAO,SAAUP,oBAAV,CAA+BQ,MAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAOGA,MAAM,CAACC,OAPV,EAGGC,MAHH,mBAGGA,MAHH,EAIGC,UAJH,mBAIGA,UAJH,EAKGC,IALH,mBAKGA,IALH,EAMGC,EANH,mBAMGA,EANH;AAAA;AAQY,iBAAMZ,IAAI,CAACE,GAAG,CAACW,GAAJ,CAAQR,mBAAR,CAAD,4BAAkDI,MAAlD,4BAA0EC,UAA1E,wBAAkGC,IAAlG,sBAAkHC,EAAlH,EAAV;;AARZ;AAQKE,UAAAA,IARL;AAUKC,UAAAA,aAVL,GAUqBD,IAAI,CAACE,GAAL,CAAS,UAAAC,IAAI,EAAI;AAAA,4BACYA,IAAI,CAACD,GAAL,CAAS,UAAAE,CAAC,EAAI;AACzD,sBAAQ,OAAOA,CAAf;AACI,qBAAK,QAAL;AACI,yBAAOA,CAAP;;AACJ,qBAAK,QAAL;AACI,yBAAOC,MAAM,CAACC,UAAP,CAAkBF,CAAlB,CAAP;;AACJ;AACI,wBAAO,IAAIG,KAAJ,2BAA6B,OAAOH,CAApC,EAAP;AANR;AAQH,aAT8C,CADZ;AAAA;AAAA,gBAC5BI,IAD4B;AAAA,gBACtBC,IADsB;AAAA,gBAChBC,IADgB;AAAA,gBACVC,GADU;AAAA,gBACLC,KADK;AAAA,gBACEC,MADF;;AAYnC,mBAAO;AACHL,cAAAA,IAAI,EAAEA,IAAI,GAAG,GADV;AAEHC,cAAAA,IAAI,EAAJA,IAFG;AAGHC,cAAAA,IAAI,EAAJA,IAHG;AAIHC,cAAAA,GAAG,EAAHA,GAJG;AAKHC,cAAAA,KAAK,EAALA,KALG;AAMHC,cAAAA,MAAM,EAANA;AANG,aAAP;AAQH,WApBqB,CAVrB;AAAA;AA+BD,iBAAM1B,GAAG,CAACG,SAAS,CAACW,aAAD,CAAV,CAAT;;AA/BC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiCD,iBAAMd,GAAG,CAACE,SAAS,CAAC;AAACyB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CC,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAjCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line no-submodule-imports\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../alert';\nimport { klineData, KlineFetch } from '../actions';\n\nconst klineRequestOptions: RequestOptions = {\n    apiVersion: 'arke',\n};\n\nexport function* handleKlineFetchSaga(action: KlineFetch) {\n  try {\n      const {\n          market,\n          resolution,\n          from,\n          to,\n      } = action.payload;\n      const data = yield call(API.get(klineRequestOptions), `/public/markets/${market}/k-line?period=${resolution}&time_from=${from}&time_to=${to}`);\n\n      const convertedData = data.map(elem => {\n          const [date, open, high, low, close, volume] = elem.map(e => {\n              switch (typeof e) {\n                  case 'number':\n                      return e;\n                  case 'string':\n                      return Number.parseFloat(e);\n                  default:\n                      throw (new Error(`unexpected type ${typeof e}`));\n              }\n          });\n\n          return {\n              date: date * 1e3,\n              open,\n              high,\n              low,\n              close,\n              volume,\n          };\n      });\n      yield put(klineData(convertedData));\n  } catch (error) {\n      yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}