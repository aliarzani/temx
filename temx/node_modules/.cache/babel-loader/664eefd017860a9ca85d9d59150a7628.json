{"ast":null,"code":"import _defineProperty from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/ProfileAuthDetails/index.tsx\";\nimport { Button } from '@openware/components';\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ProfileTwoFactorAuth } from '../';\nimport { CustomInput, Modal } from '../../components';\nimport { PASSWORD_REGEX } from '../../helpers';\nimport { selectUserInfo } from '../../modules';\nimport { changePasswordFetch, selectChangePasswordSuccess, selectTwoFactorAuthSuccess, toggle2faFetch, toggleUser2fa as _toggleUser2fa } from '../../modules/user/profile';\n\nvar ProfileAuthDetailsComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProfileAuthDetailsComponent, _React$Component);\n\n  function ProfileAuthDetailsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ProfileAuthDetailsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProfileAuthDetailsComponent).call(this, props));\n\n    _this.renderProfileTwoFactor = function () {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(ProfileTwoFactorAuth, {\n        is2faEnabled: _this.props.user.otp,\n        navigateTo2fa: _this.handleNavigateTo2fa,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      })));\n    };\n\n    _this.renderModalHeader = function () {\n      return React.createElement(\"div\", {\n        className: \"cr-email-form__options-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option-inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.profile.header.account.content.twoFactorAuthentication.modalHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"cr-email-form__cros-icon\",\n        onClick: _this.closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"close\",\n        src: require('./close.svg'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      })))));\n    };\n\n    _this.renderModalBody = function () {\n      var _this$state = _this.state,\n          code2FA = _this$state.code2FA,\n          code2FAFocus = _this$state.code2FAFocus;\n      var code2FAClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': code2FAFocus\n      });\n      return React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-body pg-exchange-modal-submit-body-2fa\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: code2FAClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"text\",\n        label: \"2FA code\",\n        placeholder: \"2FA code\",\n        defaultLabel: \"\",\n        handleFocusInput: _this.handleClickFieldFocus('code2FAFocus'),\n        handleChangeInput: _this.handleChange2FACode,\n        inputValue: code2FA,\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      })));\n    };\n\n    _this.renderModalFooter = function () {\n      var code2FA = _this.state.code2FA;\n      var isValid2FA = code2FA.match('^[0-9]{6}$');\n      var code2FAButtonClass = cr('pg-exchange-modal-submit-footer__button-inverse', {\n        'pg-exchange-modal-submit-footer__button-inverse--disabled': !isValid2FA\n      });\n      return React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: code2FAButtonClass,\n        disabled: !isValid2FA,\n        label: _this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.twoFactorAuthentication.disable'\n        }),\n        onClick: _this.handleDisable2FA,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderChangeModalHeader = function () {\n      return React.createElement(\"div\", {\n        className: \"cr-email-form__options-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option-inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.profile.header.account.content.password.change\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"cr-email-form__cros-icon\",\n        onClick: _this.handleCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"close\",\n        src: require('./close.svg'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      })))));\n    };\n\n    _this.handleChangePassword = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.props.changePassword({\n        old_password: _this.state.oldPassword,\n        new_password: _this.state.newPassword,\n        confirm_password: _this.state.confirmationPassword\n      });\n    };\n\n    _this.handleChange2FACode = function (value) {\n      _this.setState({\n        code2FA: value\n      });\n    };\n\n    _this.handleDisable2FA = function () {\n      _this.props.toggle2fa({\n        code: _this.state.code2FA,\n        enable: false\n      });\n\n      _this.closeModal();\n\n      _this.handleChange2FACode('');\n    };\n\n    _this.closeModal = function () {\n      _this.setState({\n        showModal: false\n      });\n    };\n\n    _this.showChangeModal = function () {\n      _this.setState({\n        showChangeModal: true\n      });\n    };\n\n    _this.handleNavigateTo2fa = function (enable2fa) {\n      if (enable2fa) {\n        _this.props.history.push('/security/2fa', {\n          enable2fa: enable2fa\n        });\n      } else {\n        _this.setState({\n          showModal: !_this.state.showModal\n        });\n      }\n    };\n\n    _this.handleOldPassword = function (value) {\n      _this.setState({\n        oldPassword: value\n      });\n    };\n\n    _this.handleConfPassword = function (value) {\n      _this.setState({\n        confirmationPassword: value\n      });\n    };\n\n    _this.handleNewPassword = function (value) {\n      _this.setState({\n        newPassword: value\n      });\n    };\n\n    _this.handleCancel = function () {\n      _this.setState({\n        showChangeModal: false,\n        oldPassword: '',\n        newPassword: '',\n        confirmationPassword: ''\n      });\n    };\n\n    _this.handleClickFieldFocus = function (field) {\n      return function () {\n        _this.handleFieldFocus(field);\n      };\n    };\n\n    _this.handleFieldFocus = function (field) {\n      // @ts-ignore\n      _this.setState(function (prev) {\n        return _defineProperty({}, field, !prev[field]);\n      });\n    };\n\n    _this.state = {\n      showChangeModal: false,\n      showModal: false,\n      oldPassword: '',\n      newPassword: '',\n      confirmationPassword: '',\n      oldPasswordFocus: false,\n      newPasswordFocus: false,\n      confirmPasswordFocus: false,\n      code2FA: '',\n      code2FAFocus: false\n    };\n    return _this;\n  }\n\n  _createClass(ProfileAuthDetailsComponent, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var toggle2FASuccess = this.props.toggle2FASuccess;\n\n      if (next.passwordChangeSuccess) {\n        this.setState({\n          showChangeModal: false,\n          oldPassword: '',\n          newPassword: '',\n          confirmationPassword: '',\n          confirmPasswordFocus: false\n        });\n      }\n\n      if (next.toggle2FASuccess && next.toggle2FASuccess !== toggle2FASuccess) {\n        this.props.toggleUser2fa();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var user = this.props.user;\n      var _this$state2 = this.state,\n          oldPasswordFocus = _this$state2.oldPasswordFocus,\n          newPasswordFocus = _this$state2.newPasswordFocus,\n          confirmationPassword = _this$state2.confirmationPassword,\n          oldPassword = _this$state2.oldPassword,\n          newPassword = _this$state2.newPassword,\n          confirmPasswordFocus = _this$state2.confirmPasswordFocus;\n      var oldPasswordClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': oldPasswordFocus\n      });\n      var newPasswordClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': newPasswordFocus\n      });\n      var confirmPasswordClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': confirmPasswordFocus\n      });\n      var changeModalBody = React.createElement(\"div\", {\n        className: \"cr-email-form__form-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: oldPasswordClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"password\",\n        label: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.old'\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.old'\n        }),\n        defaultLabel: \"Old password\",\n        handleChangeInput: this.handleOldPassword,\n        inputValue: oldPassword,\n        handleFocusInput: this.handleClickFieldFocus('oldPasswordFocus'),\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: newPasswordClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"password\",\n        label: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.new'\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.new'\n        }),\n        defaultLabel: \"New password\",\n        handleChangeInput: this.handleNewPassword,\n        inputValue: newPassword,\n        handleFocusInput: this.handleClickFieldFocus('newPasswordFocus'),\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: confirmPasswordClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"password\",\n        label: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.conf'\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.conf'\n        }),\n        defaultLabel: \"Password confirmation\",\n        handleChangeInput: this.handleConfPassword,\n        inputValue: confirmationPassword,\n        handleFocusInput: this.handleClickFieldFocus('confirmPasswordFocus'),\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"cr-email-form__button-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: 'submit',\n        value: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.button.change'\n        }),\n        className: this.isValidForm() ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled',\n        disabled: !this.isValidForm(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      })));\n      var modal = this.state.showChangeModal ? React.createElement(\"div\", {\n        className: \"cr-modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"cr-email-form\",\n        onSubmit: this.handleChangePassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-change-password-screen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, this.renderChangeModalHeader(), changeModalBody))) : null;\n      return React.createElement(\"div\", {\n        className: \"pg-profile-page__box pg-profile-page__left-col__basic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__box-header pg-profile-page__left-col__basic__info-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__left-col__basic__info-row__block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__row pg-profile-page__details-user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, user.email)), React.createElement(\"div\", {\n        className: \"pg-profile-page__row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"UID: \", user.uid)))), React.createElement(\"div\", {\n        className: \"pg-profile-page__row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, this.props.intl.formatMessage({\n        id: 'page.body.profile.header.account.content.password'\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"************\")), React.createElement(Button, {\n        className: \"pg-profile-page__btn-secondary-change\",\n        onClick: this.showChangeModal,\n        label: this.props.intl.formatMessage({\n          id: 'page.body.profile.header.account.content.password.button.change'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), modal), this.renderProfileTwoFactor(), React.createElement(Modal, {\n        className: \"pg-profile-page__disable-2fa-modal\",\n        show: this.state.showModal,\n        header: this.renderModalHeader(),\n        content: this.renderModalBody(),\n        footer: this.renderModalFooter(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"isValidForm\",\n    value: function isValidForm() {\n      var _this$state3 = this.state,\n          confirmationPassword = _this$state3.confirmationPassword,\n          oldPassword = _this$state3.oldPassword,\n          newPassword = _this$state3.newPassword;\n      var isNewPasswordValid = newPassword.match(PASSWORD_REGEX);\n      var isConfirmPasswordValid = newPassword === confirmationPassword;\n      return oldPassword && isNewPasswordValid && isConfirmPasswordValid;\n    }\n  }]);\n\n  return ProfileAuthDetailsComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: selectUserInfo(state),\n    passwordChangeSuccess: selectChangePasswordSuccess(state),\n    toggle2FASuccess: selectTwoFactorAuthSuccess(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    changePassword: function changePassword(_ref2) {\n      var old_password = _ref2.old_password,\n          new_password = _ref2.new_password,\n          confirm_password = _ref2.confirm_password;\n      return dispatch(changePasswordFetch({\n        old_password: old_password,\n        new_password: new_password,\n        confirm_password: confirm_password\n      }));\n    },\n    toggle2fa: function toggle2fa(_ref3) {\n      var code = _ref3.code,\n          enable = _ref3.enable;\n      return dispatch(toggle2faFetch({\n        code: code,\n        enable: enable\n      }));\n    },\n    toggleUser2fa: function toggleUser2fa() {\n      return dispatch(_toggleUser2fa());\n    }\n  };\n};\n\nvar ProfileAuthDetailsConnected = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ProfileAuthDetailsComponent)); // tslint:disable-next-line:no-any\n\nvar ProfileAuthDetails = withRouter(ProfileAuthDetailsConnected);\nexport { ProfileAuthDetails };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/ProfileAuthDetails/index.tsx"],"names":["Button","cr","React","FormattedMessage","injectIntl","connect","withRouter","ProfileTwoFactorAuth","CustomInput","Modal","PASSWORD_REGEX","selectUserInfo","changePasswordFetch","selectChangePasswordSuccess","selectTwoFactorAuthSuccess","toggle2faFetch","toggleUser2fa","ProfileAuthDetailsComponent","props","renderProfileTwoFactor","user","otp","handleNavigateTo2fa","renderModalHeader","closeModal","require","renderModalBody","state","code2FA","code2FAFocus","code2FAClass","handleClickFieldFocus","handleChange2FACode","renderModalFooter","isValid2FA","match","code2FAButtonClass","intl","formatMessage","id","handleDisable2FA","renderChangeModalHeader","handleCancel","handleChangePassword","e","preventDefault","stopPropagation","changePassword","old_password","oldPassword","new_password","newPassword","confirm_password","confirmationPassword","value","setState","toggle2fa","code","enable","showModal","showChangeModal","enable2fa","history","push","handleOldPassword","handleConfPassword","handleNewPassword","field","handleFieldFocus","prev","oldPasswordFocus","newPasswordFocus","confirmPasswordFocus","next","toggle2FASuccess","passwordChangeSuccess","oldPasswordClass","newPasswordClass","confirmPasswordClass","changeModalBody","isValidForm","modal","email","uid","isNewPasswordValid","isConfirmPasswordValid","Component","mapStateToProps","mapDispatchToProps","dispatch","ProfileAuthDetailsConnected","ProfileAuthDetails"],"mappings":"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","sourcesContent":["import { Button } from '@openware/components';\nimport cr from 'classnames';\nimport { History } from 'history';\nimport * as React from 'react';\nimport {\n    FormattedMessage,\n    InjectedIntlProps,\n    injectIntl,\n} from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ProfileTwoFactorAuth } from '../';\nimport { CustomInput, Modal } from '../../components';\nimport { PASSWORD_REGEX } from '../../helpers';\nimport {\n    RootState,\n    selectUserInfo,\n    User,\n} from '../../modules';\nimport {\n    changePasswordFetch,\n    selectChangePasswordSuccess,\n    selectTwoFactorAuthSuccess,\n    toggle2faFetch,\n    toggleUser2fa,\n} from '../../modules/user/profile';\n\n\ninterface ReduxProps {\n    user: User;\n    passwordChangeSuccess?: boolean;\n    toggle2FASuccess?: boolean;\n}\n\ninterface RouterProps {\n    history: History;\n}\n\ninterface OnChangeEvent {\n    target: {\n        value: string;\n    };\n}\n\ninterface DispatchProps {\n    changePassword: typeof changePasswordFetch;\n    clearPasswordChangeError: () => void;\n    toggle2fa: typeof toggle2faFetch;\n    toggleUser2fa: typeof toggleUser2fa;\n}\n\ninterface ProfileProps {\n    showModal: boolean;\n}\n\ninterface State {\n    showChangeModal: boolean;\n    showModal: boolean;\n    oldPassword: string;\n    newPassword: string;\n    confirmationPassword: string;\n    oldPasswordFocus: boolean;\n    newPasswordFocus: boolean;\n    confirmPasswordFocus: boolean;\n    code2FA: string;\n    code2FAFocus: boolean;\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & ProfileProps & InjectedIntlProps & OnChangeEvent;\n\nclass ProfileAuthDetailsComponent extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            showChangeModal: false,\n            showModal: false,\n            oldPassword: '',\n            newPassword: '',\n            confirmationPassword: '',\n            oldPasswordFocus: false,\n            newPasswordFocus: false,\n            confirmPasswordFocus: false,\n            code2FA: '',\n            code2FAFocus: false,\n        };\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        const { toggle2FASuccess } = this.props;\n\n        if (next.passwordChangeSuccess) {\n            this.setState({\n                showChangeModal: false,\n                oldPassword: '',\n                newPassword: '',\n                confirmationPassword: '',\n                confirmPasswordFocus: false,\n            });\n        }\n\n        if (next.toggle2FASuccess && next.toggle2FASuccess !== toggle2FASuccess) {\n            this.props.toggleUser2fa();\n        }\n    }\n\n    public render() {\n        const {\n            user,\n        } = this.props;\n        const {\n            oldPasswordFocus,\n            newPasswordFocus,\n            confirmationPassword,\n            oldPassword,\n            newPassword,\n            confirmPasswordFocus,\n        } = this.state;\n\n        const oldPasswordClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': oldPasswordFocus,\n        });\n\n        const newPasswordClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': newPasswordFocus,\n        });\n\n        const confirmPasswordClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': confirmPasswordFocus,\n        });\n\n        const changeModalBody = (\n            <div className=\"cr-email-form__form-content\">\n                <div className={oldPasswordClass}>\n                    <CustomInput\n                        type=\"password\"\n                        label={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.password.old'})}\n                        placeholder={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.password.old'})}\n                        defaultLabel=\"Old password\"\n                        handleChangeInput={this.handleOldPassword}\n                        inputValue={oldPassword}\n                        handleFocusInput={this.handleClickFieldFocus('oldPasswordFocus')}\n                        classNameLabel=\"cr-email-form__label\"\n                        classNameInput=\"cr-email-form__input\"\n                        autoFocus={true}\n                    />\n                </div>\n                <div className={newPasswordClass}>\n                    <CustomInput\n                        type=\"password\"\n                        label={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.password.new'})}\n                        placeholder={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.password.new'})}\n                        defaultLabel=\"New password\"\n                        handleChangeInput={this.handleNewPassword}\n                        inputValue={newPassword}\n                        handleFocusInput={this.handleClickFieldFocus('newPasswordFocus')}\n                        classNameLabel=\"cr-email-form__label\"\n                        classNameInput=\"cr-email-form__input\"\n                        autoFocus={false}\n                    />\n                </div>\n                <div className={confirmPasswordClass}>\n                    <CustomInput\n                        type=\"password\"\n                        label={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.password.conf'})}\n                        placeholder={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.password.conf'})}\n                        defaultLabel=\"Password confirmation\"\n                        handleChangeInput={this.handleConfPassword}\n                        inputValue={confirmationPassword}\n                        handleFocusInput={this.handleClickFieldFocus('confirmPasswordFocus')}\n                        classNameLabel=\"cr-email-form__label\"\n                        classNameInput=\"cr-email-form__input\"\n                        autoFocus={false}\n                    />\n                </div>\n                <div className=\"cr-email-form__button-wrapper\">\n                    <input\n                        type={'submit'}\n                        value={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.password.button.change'})}\n                        className={this.isValidForm() ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled'}\n                        disabled={!this.isValidForm()}\n                    />\n                </div>\n            </div>\n        );\n\n        const modal = this.state.showChangeModal ? (\n            <div className=\"cr-modal\">\n              <form className=\"cr-email-form\" onSubmit={this.handleChangePassword}>\n                <div className=\"pg-change-password-screen\">\n                  {this.renderChangeModalHeader()}\n                  {changeModalBody}\n                </div>\n              </form>\n            </div>\n        ) : null;\n\n        return (\n            <div className=\"pg-profile-page__box pg-profile-page__left-col__basic\">\n                <div className=\"pg-profile-page__box-header pg-profile-page__left-col__basic__info-row\">\n                    <div className=\"pg-profile-page__left-col__basic__info-row__block\">\n                        <div className=\"pg-profile-page__row pg-profile-page__details-user\">\n                            <p>{user.email}</p>\n                        </div>\n                        <div className=\"pg-profile-page__row\">\n                            <h2>UID: {user.uid}</h2>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"pg-profile-page__row\">\n                    <div>\n                        <div className=\"pg-profile-page__label\">\n                            {this.props.intl.formatMessage({ id: 'page.body.profile.header.account.content.password'})}\n                        </div>\n                        <div>\n                            ************\n                        </div>\n                    </div>\n                    <Button\n                        className=\"pg-profile-page__btn-secondary-change\"\n                        onClick={this.showChangeModal}\n                        label={this.props.intl.formatMessage({ id: 'page.body.profile.header.account.content.password.button.change'})}\n                    />\n                    {modal}\n                </div>\n                {this.renderProfileTwoFactor()}\n                <Modal\n                    className=\"pg-profile-page__disable-2fa-modal\"\n                    show={this.state.showModal}\n                    header={this.renderModalHeader()}\n                    content={this.renderModalBody()}\n                    footer={this.renderModalFooter()}\n                />\n            </div>\n        );\n    }\n\n    private renderProfileTwoFactor = () => {\n        return (\n            <React.Fragment>\n                <div className=\"pg-profile-page__row\">\n                    <ProfileTwoFactorAuth is2faEnabled={this.props.user.otp} navigateTo2fa={this.handleNavigateTo2fa}/>\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    private renderModalHeader = () => {\n        return (\n            <div className=\"cr-email-form__options-group\">\n                <div className=\"cr-email-form__option\">\n                    <div className=\"cr-email-form__option-inner\">\n                        <FormattedMessage id=\"page.body.profile.header.account.content.twoFactorAuthentication.modalHeader\"/>\n                        <div className=\"cr-email-form__cros-icon\" onClick={this.closeModal}>\n                            <img alt=\"close\" src={require('./close.svg')}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    private renderModalBody = () => {\n        const { code2FA, code2FAFocus } = this.state;\n\n        const code2FAClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': code2FAFocus,\n        });\n\n        return (\n            <div className=\"pg-exchange-modal-submit-body pg-exchange-modal-submit-body-2fa\">\n                <div className={code2FAClass}>\n                    <CustomInput\n                        type=\"text\"\n                        label=\"2FA code\"\n                        placeholder=\"2FA code\"\n                        defaultLabel=\"\"\n                        handleFocusInput={this.handleClickFieldFocus('code2FAFocus')}\n                        handleChangeInput={this.handleChange2FACode}\n                        inputValue={code2FA}\n                        classNameLabel=\"cr-email-form__label\"\n                        classNameInput=\"cr-email-form__input\"\n                        autoFocus={true}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    private renderModalFooter = () => {\n        const { code2FA } = this.state;\n        const isValid2FA = code2FA.match('^[0-9]{6}$');\n\n        const code2FAButtonClass = cr('pg-exchange-modal-submit-footer__button-inverse', {\n            'pg-exchange-modal-submit-footer__button-inverse--disabled': !isValid2FA,\n        });\n\n        return (\n            <div className=\"pg-exchange-modal-submit-footer\">\n                <Button\n                    className={code2FAButtonClass}\n                    disabled={!isValid2FA}\n                    label={this.props.intl.formatMessage({id: 'page.body.profile.header.account.content.twoFactorAuthentication.disable'})}\n                    onClick={this.handleDisable2FA}\n                />\n            </div>\n        );\n    };\n\n    private renderChangeModalHeader = () => (\n        <div className=\"cr-email-form__options-group\">\n            <div className=\"cr-email-form__option\">\n              <div className=\"cr-email-form__option-inner\">\n                  <FormattedMessage id=\"page.body.profile.header.account.content.password.change\"/>\n                  <div className=\"cr-email-form__cros-icon\" onClick={this.handleCancel}>\n                      <img alt=\"close\" src={require('./close.svg')}/>\n                  </div>\n              </div>\n            </div>\n        </div>\n    );\n\n    private handleChangePassword = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.props.changePassword({\n            old_password: this.state.oldPassword,\n            new_password: this.state.newPassword,\n            confirm_password: this.state.confirmationPassword,\n        });\n    };\n\n    private handleChange2FACode = (value: string) => {\n        this.setState({\n            code2FA: value,\n        });\n    };\n\n    private handleDisable2FA = () => {\n        this.props.toggle2fa({\n            code: this.state.code2FA,\n            enable: false,\n        });\n        this.closeModal();\n        this.handleChange2FACode('');\n    };\n\n    private closeModal = () => {\n        this.setState({\n            showModal: false,\n        });\n      };\n\n    private showChangeModal = () => {\n        this.setState({\n            showChangeModal: true,\n        });\n    }\n\n    private handleNavigateTo2fa = (enable2fa: boolean) => {\n        if (enable2fa) {\n            this.props.history.push('/security/2fa', { enable2fa });\n        } else {\n            this.setState({\n                showModal: !this.state.showModal,\n            });\n        }\n    }\n\n    private handleOldPassword = (value: string) => {\n        this.setState({\n            oldPassword: value,\n        });\n    }\n\n    private handleConfPassword = (value: string) => {\n        this.setState({\n            confirmationPassword: value,\n        });\n    }\n\n    private handleNewPassword = (value: string) => {\n        this.setState({\n            newPassword: value,\n        });\n    }\n\n    private handleCancel = () => {\n        this.setState({\n            showChangeModal: false,\n            oldPassword: '',\n            newPassword: '',\n            confirmationPassword: '',\n        });\n    }\n\n    private handleClickFieldFocus = (field: string) => () => {\n        this.handleFieldFocus(field);\n    }\n\n    private handleFieldFocus = (field: string) => {\n        // @ts-ignore\n        this.setState(prev => ({\n            [field]: !prev[field],\n        }));\n    };\n\n    private isValidForm() {\n        const {\n            confirmationPassword,\n            oldPassword,\n            newPassword,\n        } = this.state;\n        const isNewPasswordValid = newPassword.match(PASSWORD_REGEX);\n        const isConfirmPasswordValid = newPassword === confirmationPassword;\n\n        return oldPassword && isNewPasswordValid && isConfirmPasswordValid;\n    }\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    user: selectUserInfo(state),\n    passwordChangeSuccess: selectChangePasswordSuccess(state),\n    toggle2FASuccess: selectTwoFactorAuthSuccess(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    changePassword: ({ old_password, new_password, confirm_password }) =>\n        dispatch(changePasswordFetch({ old_password, new_password, confirm_password })),\n    toggle2fa: ({ code, enable }) => dispatch(toggle2faFetch({ code, enable })),\n    toggleUser2fa: () => dispatch(toggleUser2fa()),\n});\n\nconst ProfileAuthDetailsConnected = injectIntl(connect(mapStateToProps, mapDispatchToProps)(ProfileAuthDetailsComponent));\n// tslint:disable-next-line:no-any\nconst ProfileAuthDetails = withRouter(ProfileAuthDetailsConnected as any);\n\nexport {\n    ProfileAuthDetails,\n};\n"]},"metadata":{},"sourceType":"module"}