{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(historySaga);\n\n// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API, defaultStorageLimit } from '../../../../api';\nimport { getHistorySagaParam } from '../../../../helpers';\nimport { alertPush } from '../../../public/alert';\nimport { failHistory, successHistory } from '../actions';\nvar config = {\n  apiVersion: 'peatio',\n  withHeaders: true\n};\nexport function historySaga(action) {\n  var _action$payload, type, page, coreEndpoint, params, _ref, data, headers, updatedData;\n\n  return _regeneratorRuntime.wrap(function historySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, type = _action$payload.type, page = _action$payload.page;\n          coreEndpoint = {\n            deposits: '/account/deposits',\n            withdraws: '/account/withdraws',\n            trades: '/market/trades'\n          };\n          params = getHistorySagaParam(action.payload);\n          _context.next = 6;\n          return call(API.get(config), \"\".concat(coreEndpoint[type], \"?\").concat(params));\n\n        case 6:\n          _ref = _context.sent;\n          data = _ref.data;\n          headers = _ref.headers;\n          updatedData = data;\n\n          if (type === 'trades') {\n            updatedData = data.slice(0, defaultStorageLimit());\n          }\n\n          _context.next = 13;\n          return put(successHistory({\n            list: updatedData,\n            page: page,\n            fullHistory: headers.total\n          }));\n\n        case 13:\n          _context.next = 21;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 19;\n          return put(failHistory([]));\n\n        case 19:\n          _context.next = 21;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 15]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/user/history/sagas/historySaga.ts"],"names":["historySaga","call","put","API","defaultStorageLimit","getHistorySagaParam","alertPush","failHistory","successHistory","config","apiVersion","withHeaders","action","payload","type","page","coreEndpoint","deposits","withdraws","trades","params","get","data","headers","updatedData","slice","list","fullHistory","total","message","code"],"mappings":";;;;yBAYiBA,W;;AAZjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,EAAcC,mBAAd,QAAyD,iBAAzD;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,EAAoCC,cAApC,QAA0D,YAA1D;AAEA,IAAMC,MAAsB,GAAG;AAC3BC,EAAAA,UAAU,EAAE,QADe;AAE3BC,EAAAA,WAAW,EAAE;AAFc,CAA/B;AAKA,OAAO,SAAUX,WAAV,CAAsBY,MAAtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEwBA,MAAM,CAACC,OAF/B,EAESC,IAFT,mBAESA,IAFT,EAEeC,IAFf,mBAEeA,IAFf;AAGOC,UAAAA,YAHP,GAGsB;AACjBC,YAAAA,QAAQ,EAAE,mBADO;AAEjBC,YAAAA,SAAS,EAAE,oBAFM;AAGjBC,YAAAA,MAAM,EAAE;AAHS,WAHtB;AAQOC,UAAAA,MARP,GAQgBf,mBAAmB,CAACO,MAAM,CAACC,OAAR,CARnC;AAAA;AAS2B,iBAAMZ,IAAI,CAACE,GAAG,CAACkB,GAAJ,CAAQZ,MAAR,CAAD,YAAqBO,YAAY,CAACF,IAAD,CAAjC,cAA2CM,MAA3C,EAAV;;AAT3B;AAAA;AASSE,UAAAA,IATT,QASSA,IATT;AASeC,UAAAA,OATf,QASeA,OATf;AAUKC,UAAAA,WAVL,GAUmBF,IAVnB;;AAWC,cAAIR,IAAI,KAAK,QAAb,EAAuB;AACnBU,YAAAA,WAAW,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcrB,mBAAmB,EAAjC,CAAd;AACH;;AAbF;AAeC,iBAAMF,GAAG,CAACM,cAAc,CAAC;AAAEkB,YAAAA,IAAI,EAAEF,WAAR;AAAqBT,YAAAA,IAAI,EAAJA,IAArB;AAA2BY,YAAAA,WAAW,EAAEJ,OAAO,CAACK;AAAhD,WAAD,CAAf,CAAT;;AAfD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBC,iBAAM1B,GAAG,CAACK,WAAW,CAAC,EAAD,CAAZ,CAAT;;AAjBD;AAAA;AAkBC,iBAAML,GAAG,CAACI,SAAS,CAAC;AAACuB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2ChB,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAlBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API, defaultStorageLimit, RequestOptions } from '../../../../api';\nimport { getHistorySagaParam } from '../../../../helpers';\nimport { alertPush } from '../../../public/alert';\nimport { failHistory, HistoryFetch, successHistory } from '../actions';\n\nconst config: RequestOptions = {\n    apiVersion: 'peatio',\n    withHeaders: true,\n};\n\nexport function* historySaga(action: HistoryFetch) {\n    try {\n        const { type, page } = action.payload;\n        const coreEndpoint = {\n            deposits: '/account/deposits',\n            withdraws: '/account/withdraws',\n            trades: '/market/trades',\n        };\n        const params = getHistorySagaParam(action.payload);\n        const { data, headers } = yield call(API.get(config), `${coreEndpoint[type]}?${params}`);\n        let updatedData = data;\n        if (type === 'trades') {\n            updatedData = data.slice(0, defaultStorageLimit());\n        }\n\n        yield put(successHistory({ list: updatedData, page, fullHistory: headers.total }));\n    } catch (error) {\n        yield put(failHistory([]));\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}