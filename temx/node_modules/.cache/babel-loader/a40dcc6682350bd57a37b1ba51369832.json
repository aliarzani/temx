{"ast":null,"code":"import _defineProperty from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/screens/WalletsScreen/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Button, Loader } from '@openware/components';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CurrencyInfo, DepositCrypto, DepositFiat, TabPanel, WalletList } from '../../components';\nimport { Withdraw } from '../../containers';\nimport { ModalWithdrawConfirmation } from '../../containers/ModalWithdrawConfirmation';\nimport { ModalWithdrawSubmit } from '../../containers/ModalWithdrawSubmit';\nimport { EstimatedValue } from '../../containers/Wallets/EstimatedValue';\nimport { WalletHistory } from '../../containers/Wallets/History';\nimport { formatCCYAddress, setDocumentTitle } from '../../helpers';\nimport { alertPush, beneficiariesFetch, currenciesFetch as _currenciesFetch, selectBeneficiariesActivateSuccess, selectBeneficiariesDeleteSuccess, selectCurrencies, selectHistory, selectMobileWalletUi, selectUserInfo, selectWalletAddress, selectWallets, selectWalletsAddressError, selectWalletsLoading, selectWithdrawSuccess, setMobileWalletUi as _setMobileWalletUi, walletsAddressFetch, walletsData, walletsFetch, walletsWithdrawCcyFetch } from '../../modules';\nvar defaultBeneficiary = {\n  id: 0,\n  currency: '',\n  name: '',\n  state: '',\n  data: {\n    address: ''\n  }\n};\n\nvar WalletsComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WalletsComponent, _React$Component);\n\n  function WalletsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, WalletsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WalletsComponent).call(this, props));\n\n    _this.translate = function (id) {\n      return _this.props.intl.formatMessage({\n        id: id\n      });\n    };\n\n    _this.title = _this.translate('page.body.wallets.tabs.deposit.fiat.message1');\n    _this.description = _this.translate('page.body.wallets.tabs.deposit.fiat.message2');\n\n    _this.onTabChange = function (index, label) {\n      return _this.setState({\n        tab: label\n      });\n    };\n\n    _this.onActiveIndexChange = function (index) {\n      return _this.setState({\n        activeIndex: index\n      });\n    };\n\n    _this.onCurrentTabChange = function (index) {\n      return _this.setState({\n        currentTabIndex: index\n      });\n    };\n\n    _this.toggleSubmitModal = function () {\n      _this.setState(function (state) {\n        return {\n          withdrawSubmitModal: !state.withdrawSubmitModal,\n          withdrawDone: true\n        };\n      });\n    };\n\n    _this.toggleConfirmModal = function (amount, total, beneficiary, otpCode) {\n      _this.setState(function (state) {\n        return {\n          amount: amount ? amount : 0,\n          beneficiary: beneficiary ? beneficiary : defaultBeneficiary,\n          otpCode: otpCode ? otpCode : '',\n          withdrawConfirmModal: !state.withdrawConfirmModal,\n          total: total ? total : 0,\n          withdrawDone: false\n        };\n      });\n    };\n\n    _this.handleWithdraw = function () {\n      var _this$state = _this.state,\n          selectedWalletIndex = _this$state.selectedWalletIndex,\n          otpCode = _this$state.otpCode,\n          amount = _this$state.amount,\n          beneficiary = _this$state.beneficiary;\n\n      if (selectedWalletIndex === -1) {\n        return;\n      }\n\n      var currency = _this.props.wallets[selectedWalletIndex].currency;\n      var withdrawRequest = {\n        amount: String(amount),\n        currency: currency.toLowerCase(),\n        otp: otpCode,\n        beneficiary_id: beneficiary.id\n      };\n\n      _this.props.walletsWithdrawCcy(withdrawRequest);\n\n      _this.toggleConfirmModal();\n    };\n\n    _this.handleOnCopy = function () {\n      _this.props.fetchSuccess({\n        message: ['page.body.wallets.tabs.deposit.ccy.message.success'],\n        type: 'success'\n      });\n    };\n\n    _this.renderDeposit = function () {\n      var _this$props = _this.props,\n          addressDepositError = _this$props.addressDepositError,\n          wallets = _this$props.wallets,\n          user = _this$props.user,\n          selectedWalletAddress = _this$props.selectedWalletAddress,\n          currencies = _this$props.currencies;\n      var selectedWalletIndex = _this.state.selectedWalletIndex;\n      var currency = (wallets[selectedWalletIndex] || {\n        currency: ''\n      }).currency;\n      var currencyItem = currencies && currencies.find(function (item) {\n        return item.id === currency;\n      }) || {\n        min_confirmations: 6\n      };\n\n      var text = _this.props.intl.formatMessage({\n        id: 'page.body.wallets.tabs.deposit.ccy.message.submit'\n      }, {\n        confirmations: currencyItem.min_confirmations\n      });\n\n      var error = addressDepositError ? _this.props.intl.formatMessage({\n        id: addressDepositError.message\n      }) : _this.props.intl.formatMessage({\n        id: 'page.body.wallets.tabs.deposit.ccy.message.error'\n      });\n      var walletAddress = formatCCYAddress(currency, selectedWalletAddress);\n\n      if (wallets[selectedWalletIndex].type === 'coin') {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          },\n          __self: this\n        }, React.createElement(CurrencyInfo, {\n          wallet: wallets[selectedWalletIndex],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324\n          },\n          __self: this\n        }), React.createElement(DepositCrypto, {\n          data: walletAddress,\n          handleOnCopy: _this.handleOnCopy,\n          error: error,\n          text: text,\n          disabled: walletAddress === '',\n          copiableTextFieldText: _this.translate('page.body.wallets.tabs.deposit.ccy.message.address'),\n          copyButtonText: _this.translate('page.body.wallets.tabs.deposit.ccy.message.button'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325\n          },\n          __self: this\n        }), currency && React.createElement(WalletHistory, {\n          label: \"deposit\",\n          type: \"deposits\",\n          currency: currency,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339\n          },\n          __self: this\n        }, React.createElement(CurrencyInfo, {\n          wallet: wallets[selectedWalletIndex],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        }), React.createElement(DepositFiat, {\n          title: _this.title,\n          description: _this.description,\n          uid: user ? user.uid : '',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 341\n          },\n          __self: this\n        }), currency && React.createElement(WalletHistory, {\n          label: \"deposit\",\n          type: \"deposits\",\n          currency: currency,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 342\n          },\n          __self: this\n        }));\n      }\n    };\n\n    _this.renderWithdraw = function () {\n      var _this$props2 = _this.props,\n          walletsError = _this$props2.walletsError,\n          user = _this$props2.user,\n          wallets = _this$props2.wallets;\n      var selectedWalletIndex = _this.state.selectedWalletIndex;\n      var currency = (wallets[selectedWalletIndex] || {\n        currency: ''\n      }).currency;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(CurrencyInfo, {\n        wallet: wallets[selectedWalletIndex],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }), walletsError && React.createElement(\"p\", {\n        className: \"pg-wallet__error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, walletsError.message), _this.renderWithdrawContent(), user.otp && currency && React.createElement(WalletHistory, {\n        label: \"withdraw\",\n        type: \"withdraws\",\n        currency: currency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderWithdrawContent = function () {\n      var _this$state2 = _this.state,\n          withdrawDone = _this$state2.withdrawDone,\n          selectedWalletIndex = _this$state2.selectedWalletIndex;\n\n      if (selectedWalletIndex === -1) {\n        return [{\n          content: null,\n          label: ''\n        }];\n      }\n\n      var _this$props3 = _this.props,\n          _this$props3$user = _this$props3.user,\n          level = _this$props3$user.level,\n          otp = _this$props3$user.otp,\n          wallets = _this$props3.wallets;\n      var wallet = wallets[selectedWalletIndex];\n      var currency = wallet.currency,\n          fee = wallet.fee,\n          type = wallet.type;\n      var fixed = (wallet || {\n        fixed: 0\n      }).fixed;\n      var withdrawProps = {\n        withdrawDone: withdrawDone,\n        currency: currency,\n        fee: fee,\n        onClick: _this.toggleConfirmModal,\n        twoFactorAuthRequired: _this.isTwoFactorAuthRequired(level, otp),\n        fixed: fixed,\n        type: type,\n        withdrawAmountLabel: _this.props.intl.formatMessage({\n          id: 'page.body.wallets.tabs.withdraw.content.amount'\n        }),\n        withdraw2faLabel: _this.props.intl.formatMessage({\n          id: 'page.body.wallets.tabs.withdraw.content.code2fa'\n        }),\n        withdrawFeeLabel: _this.props.intl.formatMessage({\n          id: 'page.body.wallets.tabs.withdraw.content.fee'\n        }),\n        withdrawTotalLabel: _this.props.intl.formatMessage({\n          id: 'page.body.wallets.tabs.withdraw.content.total'\n        }),\n        withdrawButtonLabel: _this.props.intl.formatMessage({\n          id: 'page.body.wallets.tabs.withdraw.content.button'\n        })\n      };\n      return otp ? React.createElement(Withdraw, Object.assign({}, withdrawProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      })) : _this.isOtpDisabled();\n    };\n\n    _this.isOtpDisabled = function () {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"pg-wallet__enable-2fa-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, _this.translate('page.body.wallets.tabs.withdraw.content.enable2fa')), React.createElement(Button, {\n        className: \"pg-wallet__button-2fa\",\n        label: _this.translate('page.body.wallets.tabs.withdraw.content.enable2faButton'),\n        onClick: _this.redirectToEnable2fa,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }));\n    };\n\n    _this.redirectToEnable2fa = function () {\n      return _this.props.history.push('/security/2fa', {\n        enable2fa: true\n      });\n    };\n\n    _this.onWalletSelectionChange = function (value) {\n      var wallets = _this.props.wallets;\n\n      if (!value.address && wallets.length && value.type !== 'fiat') {\n        _this.props.fetchAddress({\n          currency: value.currency\n        });\n      }\n\n      var nextWalletIndex = _this.props.wallets.findIndex(function (wallet) {\n        return wallet.currency.toLowerCase() === value.currency.toLowerCase();\n      });\n\n      _this.setState({\n        selectedWalletIndex: nextWalletIndex,\n        withdrawDone: false\n      });\n\n      _this.props.setMobileWalletUi(wallets[nextWalletIndex].name);\n    };\n\n    _this.state = {\n      activeIndex: 0,\n      selectedWalletIndex: -1,\n      withdrawSubmitModal: false,\n      withdrawConfirmModal: false,\n      otpCode: '',\n      amount: 0,\n      beneficiary: defaultBeneficiary,\n      tab: _this.translate('page.body.wallets.tabs.deposit'),\n      withdrawDone: false,\n      total: 0,\n      currentTabIndex: 0\n    };\n    return _this;\n  } //tslint:disable member-ordering\n\n\n  _createClass(WalletsComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Wallets');\n      var _this$props4 = this.props,\n          wallets = _this$props4.wallets,\n          fetchAddress = _this$props4.fetchAddress;\n      var selectedWalletIndex = this.state.selectedWalletIndex;\n\n      if (this.props.wallets.length === 0) {\n        this.props.fetchWallets();\n      }\n\n      if (wallets.length > 0) {\n        this.props.fetchBeneficiaries();\n      }\n\n      if (selectedWalletIndex === -1 && wallets.length) {\n        this.setState({\n          selectedWalletIndex: 0\n        });\n        wallets[0].type === 'coin' && fetchAddress({\n          currency: wallets[0].currency\n        });\n      }\n\n      if (!this.props.currencies.length) {\n        this.props.currenciesFetch();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.clearWallets();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var _this$props5 = this.props,\n          wallets = _this$props5.wallets,\n          beneficiariesActivateSuccess = _this$props5.beneficiariesActivateSuccess,\n          beneficiariesDeleteSuccess = _this$props5.beneficiariesDeleteSuccess,\n          withdrawSuccess = _this$props5.withdrawSuccess;\n\n      if (wallets.length === 0 && next.wallets.length > 0) {\n        this.setState({\n          selectedWalletIndex: 0\n        });\n        this.props.fetchBeneficiaries();\n        next.wallets[0].type === 'coin' && this.props.fetchAddress({\n          currency: next.wallets[0].currency\n        });\n      }\n\n      if (!withdrawSuccess && next.withdrawSuccess) {\n        this.toggleSubmitModal();\n      }\n\n      if (next.beneficiariesActivateSuccess && !beneficiariesActivateSuccess || next.beneficiariesDeleteSuccess && !beneficiariesDeleteSuccess) {\n        this.props.fetchBeneficiaries();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          wallets = _this$props6.wallets,\n          historyList = _this$props6.historyList,\n          mobileWalletChosen = _this$props6.mobileWalletChosen,\n          walletsLoading = _this$props6.walletsLoading;\n      var _this$state3 = this.state,\n          beneficiary = _this$state3.beneficiary,\n          total = _this$state3.total,\n          selectedWalletIndex = _this$state3.selectedWalletIndex,\n          filteredWallets = _this$state3.filteredWallets,\n          withdrawSubmitModal = _this$state3.withdrawSubmitModal,\n          withdrawConfirmModal = _this$state3.withdrawConfirmModal,\n          currentTabIndex = _this$state3.currentTabIndex;\n      var formattedWallets = wallets.map(function (wallet) {\n        return _objectSpread({}, wallet, {\n          currency: wallet.currency.toUpperCase(),\n          iconUrl: wallet.iconUrl ? wallet.iconUrl : ''\n        });\n      });\n      var selectedCurrency = (wallets[selectedWalletIndex] || {\n        currency: ''\n      }).currency;\n      var confirmationAddress = '';\n\n      if (wallets[selectedWalletIndex]) {\n        confirmationAddress = wallets[selectedWalletIndex].type === 'fiat' ? beneficiary.name : beneficiary.data ? beneficiary.data.address : '';\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(EstimatedValue, {\n        wallets: wallets,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pg-container pg-wallet\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, walletsLoading && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"row no-gutters pg-wallet__tabs-content \".concat(!historyList.length && 'pg-wallet__tabs-content-height'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-5 col-sm-12 col-12 \".concat(mobileWalletChosen && 'd-none d-md-block'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(WalletList, {\n        onWalletSelectionChange: this.onWalletSelectionChange,\n        walletItems: filteredWallets || formattedWallets,\n        activeIndex: this.state.activeIndex,\n        onActiveIndexChange: this.onActiveIndexChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"pg-wallet__tabs col-md-7 col-sm-12 col-12 \".concat(!mobileWalletChosen && 'd-none d-md-block'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(TabPanel, {\n        panels: this.renderTabs(),\n        onTabChange: this.onTabChange,\n        currentTabIndex: currentTabIndex,\n        onCurrentTabChange: this.onCurrentTabChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }))), React.createElement(ModalWithdrawSubmit, {\n        show: withdrawSubmitModal,\n        currency: selectedCurrency,\n        onSubmit: this.toggleSubmitModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(ModalWithdrawConfirmation, {\n        show: withdrawConfirmModal,\n        amount: total,\n        currency: selectedCurrency,\n        rid: confirmationAddress,\n        onSubmit: this.handleWithdraw,\n        onDismiss: this.toggleConfirmModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"renderTabs\",\n    value: function renderTabs() {\n      var _this$state4 = this.state,\n          tab = _this$state4.tab,\n          selectedWalletIndex = _this$state4.selectedWalletIndex;\n\n      if (selectedWalletIndex === -1) {\n        return [{\n          content: null,\n          label: ''\n        }];\n      }\n\n      return [{\n        content: tab === this.translate('page.body.wallets.tabs.deposit') ? this.renderDeposit() : null,\n        label: this.translate('page.body.wallets.tabs.deposit')\n      }, {\n        content: tab === this.translate('page.body.wallets.tabs.withdraw') ? this.renderWithdraw() : null,\n        label: this.translate('page.body.wallets.tabs.withdraw')\n      }];\n    }\n  }, {\n    key: \"isTwoFactorAuthRequired\",\n    value: function isTwoFactorAuthRequired(level, is2faEnabled) {\n      return level > 1 || level === 1 && is2faEnabled;\n    }\n  }]);\n\n  return WalletsComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: selectUserInfo(state),\n    wallets: selectWallets(state),\n    walletsLoading: selectWalletsLoading(state),\n    addressDepositError: selectWalletsAddressError(state),\n    withdrawSuccess: selectWithdrawSuccess(state),\n    historyList: selectHistory(state),\n    mobileWalletChosen: selectMobileWalletUi(state),\n    selectedWalletAddress: selectWalletAddress(state),\n    beneficiariesActivateSuccess: selectBeneficiariesActivateSuccess(state),\n    beneficiariesDeleteSuccess: selectBeneficiariesDeleteSuccess(state),\n    currencies: selectCurrencies(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchBeneficiaries: function fetchBeneficiaries() {\n      return dispatch(beneficiariesFetch());\n    },\n    fetchWallets: function fetchWallets() {\n      return dispatch(walletsFetch());\n    },\n    fetchAddress: function fetchAddress(_ref) {\n      var currency = _ref.currency;\n      return dispatch(walletsAddressFetch({\n        currency: currency\n      }));\n    },\n    walletsWithdrawCcy: function walletsWithdrawCcy(params) {\n      return dispatch(walletsWithdrawCcyFetch(params));\n    },\n    clearWallets: function clearWallets() {\n      return dispatch(walletsData([]));\n    },\n    fetchSuccess: function fetchSuccess(payload) {\n      return dispatch(alertPush(payload));\n    },\n    setMobileWalletUi: function setMobileWalletUi(payload) {\n      return dispatch(_setMobileWalletUi(payload));\n    },\n    currenciesFetch: function currenciesFetch() {\n      return dispatch(_currenciesFetch());\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nexport var WalletsScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(WalletsComponent)));","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/screens/WalletsScreen/index.tsx"],"names":["Button","Loader","React","injectIntl","connect","withRouter","CurrencyInfo","DepositCrypto","DepositFiat","TabPanel","WalletList","Withdraw","ModalWithdrawConfirmation","ModalWithdrawSubmit","EstimatedValue","WalletHistory","formatCCYAddress","setDocumentTitle","alertPush","beneficiariesFetch","currenciesFetch","selectBeneficiariesActivateSuccess","selectBeneficiariesDeleteSuccess","selectCurrencies","selectHistory","selectMobileWalletUi","selectUserInfo","selectWalletAddress","selectWallets","selectWalletsAddressError","selectWalletsLoading","selectWithdrawSuccess","setMobileWalletUi","walletsAddressFetch","walletsData","walletsFetch","walletsWithdrawCcyFetch","defaultBeneficiary","id","currency","name","state","data","address","WalletsComponent","props","translate","intl","formatMessage","title","description","onTabChange","index","label","setState","tab","onActiveIndexChange","activeIndex","onCurrentTabChange","currentTabIndex","toggleSubmitModal","withdrawSubmitModal","withdrawDone","toggleConfirmModal","amount","total","beneficiary","otpCode","withdrawConfirmModal","handleWithdraw","selectedWalletIndex","wallets","withdrawRequest","String","toLowerCase","otp","beneficiary_id","walletsWithdrawCcy","handleOnCopy","fetchSuccess","message","type","renderDeposit","addressDepositError","user","selectedWalletAddress","currencies","currencyItem","find","item","min_confirmations","text","confirmations","error","walletAddress","uid","renderWithdraw","walletsError","renderWithdrawContent","content","level","wallet","fee","fixed","withdrawProps","onClick","twoFactorAuthRequired","isTwoFactorAuthRequired","withdrawAmountLabel","withdraw2faLabel","withdrawFeeLabel","withdrawTotalLabel","withdrawButtonLabel","isOtpDisabled","redirectToEnable2fa","history","push","enable2fa","onWalletSelectionChange","value","length","fetchAddress","nextWalletIndex","findIndex","fetchWallets","fetchBeneficiaries","clearWallets","next","beneficiariesActivateSuccess","beneficiariesDeleteSuccess","withdrawSuccess","historyList","mobileWalletChosen","walletsLoading","filteredWallets","formattedWallets","map","toUpperCase","iconUrl","selectedCurrency","confirmationAddress","renderTabs","is2faEnabled","Component","mapStateToProps","mapDispatchToProps","dispatch","params","payload","WalletsScreen"],"mappings":"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","sourcesContent":["import { Button, Loader } from '@openware/components';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect, MapDispatchToProps } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { CurrencyInfo, DepositCrypto, DepositFiat, TabPanel, WalletItemProps, WalletList } from '../../components';\nimport { Withdraw, WithdrawProps } from '../../containers';\nimport { ModalWithdrawConfirmation } from '../../containers/ModalWithdrawConfirmation';\nimport { ModalWithdrawSubmit } from '../../containers/ModalWithdrawSubmit';\nimport { EstimatedValue } from '../../containers/Wallets/EstimatedValue';\nimport { WalletHistory } from '../../containers/Wallets/History';\nimport { formatCCYAddress, setDocumentTitle } from '../../helpers';\nimport {\n    alertPush,\n    beneficiariesFetch,\n    Beneficiary,\n    currenciesFetch,\n    Currency,\n    RootState,\n    selectBeneficiariesActivateSuccess,\n    selectBeneficiariesDeleteSuccess,\n    selectCurrencies,\n    selectHistory,\n    selectMobileWalletUi,\n    selectUserInfo,\n    selectWalletAddress,\n    selectWallets,\n    selectWalletsAddressError,\n    selectWalletsLoading,\n    selectWithdrawSuccess,\n    setMobileWalletUi,\n    User,\n    WalletHistoryList,\n    walletsAddressFetch,\n    walletsData,\n    walletsFetch,\n    walletsWithdrawCcyFetch,\n} from '../../modules';\nimport { CommonError } from '../../modules/types';\n\n\ninterface ReduxProps {\n    user: User;\n    wallets: WalletItemProps[];\n    withdrawSuccess: boolean;\n    addressDepositError?: CommonError;\n    walletsLoading?: boolean;\n    historyList: WalletHistoryList;\n    mobileWalletChosen: string;\n    selectedWalletAddress: string;\n    beneficiariesActivateSuccess: boolean;\n    beneficiariesDeleteSuccess: boolean;\n    currencies: Currency[];\n}\n\ninterface DispatchProps {\n    fetchBeneficiaries: typeof beneficiariesFetch;\n    fetchWallets: typeof walletsFetch;\n    fetchAddress: typeof walletsAddressFetch;\n    clearWallets: () => void;\n    walletsWithdrawCcy: typeof walletsWithdrawCcyFetch;\n    fetchSuccess: typeof alertPush;\n    setMobileWalletUi: typeof setMobileWalletUi;\n    currenciesFetch: typeof currenciesFetch;\n}\n\nconst defaultBeneficiary: Beneficiary = {\n    id: 0,\n    currency: '',\n    name: '',\n    state: '',\n    data: {\n        address: '',\n    },\n};\n\ninterface WalletsState {\n    activeIndex: number;\n    otpCode: string;\n    amount: number;\n    beneficiary: Beneficiary;\n    selectedWalletIndex: number;\n    withdrawSubmitModal: boolean;\n    withdrawConfirmModal: boolean;\n    bchAddress?: string;\n    filteredWallets?: WalletItemProps[] | null;\n    tab: string;\n    withdrawDone: boolean;\n    total: number;\n    currentTabIndex: number;\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & InjectedIntlProps;\n\nclass WalletsComponent extends React.Component<Props, WalletsState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            activeIndex: 0,\n            selectedWalletIndex: -1,\n            withdrawSubmitModal: false,\n            withdrawConfirmModal: false,\n            otpCode: '',\n            amount: 0,\n            beneficiary: defaultBeneficiary,\n            tab: this.translate('page.body.wallets.tabs.deposit'),\n            withdrawDone: false,\n            total: 0,\n            currentTabIndex: 0,\n        };\n    }\n\n    //tslint:disable member-ordering\n    public translate = (id: string) => this.props.intl.formatMessage({ id });\n\n    private title = this.translate('page.body.wallets.tabs.deposit.fiat.message1');\n    private description = this.translate('page.body.wallets.tabs.deposit.fiat.message2');\n\n    public componentDidMount() {\n        setDocumentTitle('Wallets');\n        const { wallets, fetchAddress } = this.props;\n        const { selectedWalletIndex } = this.state;\n\n        if (this.props.wallets.length === 0) {\n            this.props.fetchWallets();\n        }\n\n        if (wallets.length > 0) {\n            this.props.fetchBeneficiaries();\n        }\n\n        if (selectedWalletIndex === -1 && wallets.length) {\n            this.setState({ selectedWalletIndex: 0 });\n            wallets[0].type === 'coin' && fetchAddress({ currency: wallets[0].currency });\n        }\n\n        if (!this.props.currencies.length) {\n            this.props.currenciesFetch();\n        }\n    }\n\n    public componentWillUnmount() {\n        this.props.clearWallets();\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        const {\n            wallets,\n            beneficiariesActivateSuccess,\n            beneficiariesDeleteSuccess,\n            withdrawSuccess,\n        } = this.props;\n\n        if (wallets.length === 0 && next.wallets.length > 0) {\n            this.setState({\n                selectedWalletIndex: 0,\n            });\n            this.props.fetchBeneficiaries();\n            next.wallets[0].type === 'coin' && this.props.fetchAddress({ currency: next.wallets[0].currency });\n        }\n\n        if (!withdrawSuccess && next.withdrawSuccess) {\n            this.toggleSubmitModal();\n        }\n\n        if ((next.beneficiariesActivateSuccess && !beneficiariesActivateSuccess) ||\n            (next.beneficiariesDeleteSuccess && !beneficiariesDeleteSuccess)) {\n            this.props.fetchBeneficiaries();\n        }\n    }\n\n    public render() {\n        const { wallets, historyList, mobileWalletChosen, walletsLoading } = this.props;\n        const {\n            beneficiary,\n            total,\n            selectedWalletIndex,\n            filteredWallets,\n            withdrawSubmitModal,\n            withdrawConfirmModal,\n            currentTabIndex,\n        } = this.state;\n        const formattedWallets = wallets.map((wallet: WalletItemProps) => ({\n            ...wallet,\n            currency: wallet.currency.toUpperCase(),\n            iconUrl: wallet.iconUrl ? wallet.iconUrl : '',\n        }));\n        const selectedCurrency = (wallets[selectedWalletIndex] || { currency: '' }).currency;\n\n        let confirmationAddress = '';\n        if (wallets[selectedWalletIndex]) {\n            confirmationAddress = wallets[selectedWalletIndex].type === 'fiat' ? (\n                beneficiary.name\n            ) : (\n                beneficiary.data ? (beneficiary.data.address as string) : ''\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <EstimatedValue wallets={wallets}/>\n                <div className=\"pg-container pg-wallet\">\n                    <div className=\"text-center\">\n                        {walletsLoading && <Loader />}\n                    </div>\n                    <div className={`row no-gutters pg-wallet__tabs-content ${!historyList.length && 'pg-wallet__tabs-content-height'}`}>\n                        <div className={`col-md-5 col-sm-12 col-12 ${mobileWalletChosen && 'd-none d-md-block'}`}>\n                            <WalletList\n                                onWalletSelectionChange={this.onWalletSelectionChange}\n                                walletItems={filteredWallets || formattedWallets}\n                                activeIndex={this.state.activeIndex}\n                                onActiveIndexChange={this.onActiveIndexChange}\n                            />\n                        </div>\n                        <div className={`pg-wallet__tabs col-md-7 col-sm-12 col-12 ${!mobileWalletChosen && 'd-none d-md-block'}`}>\n                            <TabPanel\n                                panels={this.renderTabs()}\n                                onTabChange={this.onTabChange}\n                                currentTabIndex={currentTabIndex}\n                                onCurrentTabChange={this.onCurrentTabChange}\n                            />\n                        </div>\n                    </div>\n                    <ModalWithdrawSubmit\n                        show={withdrawSubmitModal}\n                        currency={selectedCurrency}\n                        onSubmit={this.toggleSubmitModal}\n                    />\n                    <ModalWithdrawConfirmation\n                        show={withdrawConfirmModal}\n                        amount={total}\n                        currency={selectedCurrency}\n                        rid={confirmationAddress}\n                        onSubmit={this.handleWithdraw}\n                        onDismiss={this.toggleConfirmModal}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private onTabChange = (index, label) => this.setState({ tab: label });\n\n    private onActiveIndexChange = index => this.setState({ activeIndex: index });\n\n    private onCurrentTabChange = index => this.setState({ currentTabIndex: index });\n\n    private toggleSubmitModal = () => {\n        this.setState((state: WalletsState) => ({\n            withdrawSubmitModal: !state.withdrawSubmitModal,\n            withdrawDone: true,\n        }));\n    };\n\n    private toggleConfirmModal = (amount?: number, total?: number, beneficiary?: Beneficiary, otpCode?: string) => {\n        this.setState((state: WalletsState) => ({\n            amount: amount ? amount : 0,\n            beneficiary: beneficiary ? beneficiary : defaultBeneficiary,\n            otpCode: otpCode ? otpCode : '',\n            withdrawConfirmModal: !state.withdrawConfirmModal,\n            total: total ? total : 0,\n            withdrawDone: false,\n        }));\n    };\n\n    private renderTabs() {\n        const { tab, selectedWalletIndex } = this.state;\n\n        if (selectedWalletIndex === -1) {\n            return [{ content: null, label: '' }];\n        }\n\n        return [\n            {\n                content: tab === this.translate('page.body.wallets.tabs.deposit') ? this.renderDeposit() : null,\n                label: this.translate('page.body.wallets.tabs.deposit'),\n            },\n            {\n                content: tab === this.translate('page.body.wallets.tabs.withdraw') ? this.renderWithdraw() : null,\n                label: this.translate('page.body.wallets.tabs.withdraw'),\n            },\n        ];\n    }\n\n    private handleWithdraw = () => {\n        const { selectedWalletIndex, otpCode, amount, beneficiary } = this.state;\n        if (selectedWalletIndex === -1) {\n            return;\n        }\n\n        const { currency } = this.props.wallets[selectedWalletIndex];\n        const withdrawRequest = {\n            amount: String(amount),\n            currency: currency.toLowerCase(),\n            otp: otpCode,\n            beneficiary_id: beneficiary.id,\n        };\n        this.props.walletsWithdrawCcy(withdrawRequest);\n        this.toggleConfirmModal();\n    };\n\n    private handleOnCopy = () => {\n        this.props.fetchSuccess({ message: ['page.body.wallets.tabs.deposit.ccy.message.success'], type: 'success'});\n    };\n\n    private renderDeposit = () => {\n        const { addressDepositError, wallets, user, selectedWalletAddress, currencies } = this.props;\n        const { selectedWalletIndex } = this.state;\n        const currency = (wallets[selectedWalletIndex] || { currency: '' }).currency;\n        const currencyItem = (currencies && currencies.find(item => item.id === currency)) || { min_confirmations: 6 };\n        const text = this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.deposit.ccy.message.submit' },\n                                                   { confirmations: currencyItem.min_confirmations });\n        const error = addressDepositError ?\n            this.props.intl.formatMessage({id: addressDepositError.message}) :\n            this.props.intl.formatMessage({id: 'page.body.wallets.tabs.deposit.ccy.message.error'});\n\n        const walletAddress = formatCCYAddress(currency, selectedWalletAddress);\n\n        if (wallets[selectedWalletIndex].type === 'coin') {\n            return (\n                <React.Fragment>\n                    <CurrencyInfo wallet={wallets[selectedWalletIndex]}/>\n                    <DepositCrypto\n                        data={walletAddress}\n                        handleOnCopy={this.handleOnCopy}\n                        error={error}\n                        text={text}\n                        disabled={walletAddress === ''}\n                        copiableTextFieldText={this.translate('page.body.wallets.tabs.deposit.ccy.message.address')}\n                        copyButtonText={this.translate('page.body.wallets.tabs.deposit.ccy.message.button')}\n                    />\n                    {currency && <WalletHistory label=\"deposit\" type=\"deposits\" currency={currency} />}\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <CurrencyInfo wallet={wallets[selectedWalletIndex]}/>\n                    <DepositFiat title={this.title} description={this.description} uid={user ? user.uid : ''}/>\n                    {currency && <WalletHistory label=\"deposit\" type=\"deposits\" currency={currency} />}\n                </React.Fragment>\n            );\n        }\n    };\n\n    private renderWithdraw = () => {\n        const { walletsError, user, wallets } = this.props;\n        const { selectedWalletIndex } = this.state;\n        const currency = (wallets[selectedWalletIndex] || { currency: '' }).currency;\n\n        return (\n            <React.Fragment>\n                <CurrencyInfo wallet={wallets[selectedWalletIndex]}/>\n                {walletsError && <p className=\"pg-wallet__error\">{walletsError.message}</p>}\n                {this.renderWithdrawContent()}\n                {user.otp && currency && <WalletHistory label=\"withdraw\" type=\"withdraws\" currency={currency} />}\n            </React.Fragment>\n        );\n    };\n\n    private renderWithdrawContent = () => {\n        const { withdrawDone, selectedWalletIndex } = this.state;\n\n        if (selectedWalletIndex === -1) {\n            return [{ content: null, label: '' }];\n        }\n        const { user: { level, otp }, wallets } = this.props;\n        const wallet = wallets[selectedWalletIndex];\n        const { currency, fee, type } = wallet;\n        const fixed = (wallet || { fixed: 0 }).fixed;\n\n        const withdrawProps: WithdrawProps = {\n            withdrawDone,\n            currency,\n            fee,\n            onClick: this.toggleConfirmModal,\n            twoFactorAuthRequired: this.isTwoFactorAuthRequired(level, otp),\n            fixed,\n            type,\n            withdrawAmountLabel: this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.amount' }),\n            withdraw2faLabel: this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.code2fa' }),\n            withdrawFeeLabel: this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.fee' }),\n            withdrawTotalLabel: this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.total' }),\n            withdrawButtonLabel: this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.button' }),\n        };\n\n        return otp ? <Withdraw {...withdrawProps} /> : this.isOtpDisabled();\n    };\n\n\n    private isOtpDisabled = () => {\n        return (\n            <React.Fragment>\n                <p className=\"pg-wallet__enable-2fa-message\">\n                    {this.translate('page.body.wallets.tabs.withdraw.content.enable2fa')}\n                </p>\n                <Button\n                    className=\"pg-wallet__button-2fa\"\n                    label={this.translate('page.body.wallets.tabs.withdraw.content.enable2faButton')}\n                    onClick={this.redirectToEnable2fa}\n                />\n            </React.Fragment>\n        );\n    };\n\n\n    private redirectToEnable2fa = () => this.props.history.push('/security/2fa', { enable2fa: true });\n\n\n    private isTwoFactorAuthRequired(level: number, is2faEnabled: boolean) {\n        return level > 1 || (level === 1 && is2faEnabled);\n    }\n\n    private onWalletSelectionChange = (value: WalletItemProps) => {\n        const { wallets } = this.props;\n        if (!value.address && wallets.length && value.type !== 'fiat') {\n            this.props.fetchAddress({ currency: value.currency });\n        }\n        const nextWalletIndex = this.props.wallets.findIndex(\n            wallet => wallet.currency.toLowerCase() === value.currency.toLowerCase(),\n        );\n        this.setState({ selectedWalletIndex: nextWalletIndex, withdrawDone: false });\n        this.props.setMobileWalletUi(wallets[nextWalletIndex].name);\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    user: selectUserInfo(state),\n    wallets: selectWallets(state),\n    walletsLoading: selectWalletsLoading(state),\n    addressDepositError: selectWalletsAddressError(state),\n    withdrawSuccess: selectWithdrawSuccess(state),\n    historyList: selectHistory(state),\n    mobileWalletChosen: selectMobileWalletUi(state),\n    selectedWalletAddress: selectWalletAddress(state),\n    beneficiariesActivateSuccess: selectBeneficiariesActivateSuccess(state),\n    beneficiariesDeleteSuccess: selectBeneficiariesDeleteSuccess(state),\n    currencies: selectCurrencies(state),\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = dispatch => ({\n    fetchBeneficiaries: () => dispatch(beneficiariesFetch()),\n    fetchWallets: () => dispatch(walletsFetch()),\n    fetchAddress: ({ currency }) => dispatch(walletsAddressFetch({ currency })),\n    walletsWithdrawCcy: params => dispatch(walletsWithdrawCcyFetch(params)),\n    clearWallets: () => dispatch(walletsData([])),\n    fetchSuccess: payload => dispatch(alertPush(payload)),\n    setMobileWalletUi: payload => dispatch(setMobileWalletUi(payload)),\n    currenciesFetch: () => dispatch(currenciesFetch()),\n});\n\n// tslint:disable-next-line:no-any\nexport const WalletsScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(WalletsComponent) as any));\n"]},"metadata":{},"sourceType":"module"}