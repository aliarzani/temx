{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/Withdraw/index.tsx\";\n// tslint:disable:jsx-no-lambda\nimport { Button, Decimal, Input } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Beneficiaries, CustomInput, SummaryField } from '../../components';\nvar defaultBeneficiary = {\n  id: 0,\n  currency: '',\n  name: '',\n  state: '',\n  data: {\n    address: ''\n  }\n};\nexport var Withdraw =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Withdraw, _React$Component);\n\n  function Withdraw() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Withdraw);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Withdraw)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      amount: '',\n      beneficiary: defaultBeneficiary,\n      otpCode: '',\n      withdrawAmountFocused: false,\n      withdrawCodeFocused: false,\n      total: 0\n    };\n\n    _this.renderFee = function () {\n      var _this$props = _this.props,\n          fee = _this$props.fee,\n          fixed = _this$props.fixed,\n          currency = _this$props.currency;\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Decimal, {\n        fixed: fixed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, fee.toString()), \" \", currency.toUpperCase());\n    };\n\n    _this.renderTotal = function () {\n      var total = _this.state.total;\n      var _this$props2 = _this.props,\n          fixed = _this$props2.fixed,\n          currency = _this$props2.currency;\n      return total ? React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Decimal, {\n        fixed: fixed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, total.toString()), \" \", currency.toUpperCase()) : React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"0 \", currency.toUpperCase());\n    };\n\n    _this.renderOtpCodeInput = function () {\n      var _this$state = _this.state,\n          otpCode = _this$state.otpCode,\n          withdrawCodeFocused = _this$state.withdrawCodeFocused;\n      var withdraw2faLabel = _this.props.withdraw2faLabel;\n      var withdrawCodeClass = classnames('cr-withdraw__group__code', {\n        'cr-withdraw__group__code--focused': withdrawCodeFocused\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: withdrawCodeClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"number\",\n        label: withdraw2faLabel || '2FA code',\n        placeholder: withdraw2faLabel || '2FA code',\n        defaultLabel: \"2FA code\",\n        handleChangeInput: _this.handleChangeInputOtpCode,\n        inputValue: otpCode,\n        handleFocusInput: function handleFocusInput() {\n          return _this.handleFieldFocus('code');\n        },\n        classNameLabel: \"cr-withdraw__label\",\n        classNameInput: \"cr-withdraw__input\",\n        autoFocus: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"cr-withdraw__divider cr-withdraw__divider-two\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }));\n    };\n\n    _this.handleClick = function () {\n      return _this.props.onClick(parseFloat(_this.state.amount), _this.state.total, _this.state.beneficiary, _this.state.otpCode);\n    };\n\n    _this.handleFieldFocus = function (field) {\n      switch (field) {\n        case 'amount':\n          _this.setState(function (prev) {\n            return {\n              withdrawAmountFocused: !prev.withdrawAmountFocused\n            };\n          });\n\n          break;\n\n        case 'code':\n          _this.setState(function (prev) {\n            return {\n              withdrawCodeFocused: !prev.withdrawCodeFocused\n            };\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.handleChangeInputAmount = function (text) {\n      var fixed = _this.props.fixed;\n      var value = text !== '' ? Number(parseFloat(text).toFixed(fixed)) : '';\n      var total = value !== '' ? value - _this.props.fee : 0;\n\n      if (total < 0) {\n        _this.setTotal(0);\n      } else {\n        _this.setTotal(total);\n      }\n\n      _this.setState({\n        amount: value\n      });\n    };\n\n    _this.setTotal = function (value) {\n      _this.setState({\n        total: value\n      });\n    };\n\n    _this.handleChangeBeneficiary = function (value) {\n      _this.setState({\n        beneficiary: value\n      });\n    };\n\n    _this.handleChangeInputOtpCode = function (otpCode) {\n      _this.setState({\n        otpCode: otpCode\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Withdraw, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props3 = this.props,\n          currency = _this$props3.currency,\n          withdrawDone = _this$props3.withdrawDone;\n\n      if (nextProps && JSON.stringify(nextProps.currency) !== JSON.stringify(currency) || nextProps.withdrawDone && !withdrawDone) {\n        this.setState({\n          amount: '',\n          otpCode: '',\n          total: 0\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          amount = _this$state2.amount,\n          beneficiary = _this$state2.beneficiary,\n          total = _this$state2.total,\n          withdrawAmountFocused = _this$state2.withdrawAmountFocused,\n          otpCode = _this$state2.otpCode;\n      var _this$props4 = this.props,\n          className = _this$props4.className,\n          currency = _this$props4.currency,\n          type = _this$props4.type,\n          twoFactorAuthRequired = _this$props4.twoFactorAuthRequired,\n          withdrawAmountLabel = _this$props4.withdrawAmountLabel,\n          withdrawFeeLabel = _this$props4.withdrawFeeLabel,\n          withdrawTotalLabel = _this$props4.withdrawTotalLabel,\n          withdrawButtonLabel = _this$props4.withdrawButtonLabel;\n      var cx = classnames('cr-withdraw', className);\n      var lastDividerClassName = classnames('cr-withdraw__divider', {\n        'cr-withdraw__divider-one': twoFactorAuthRequired,\n        'cr-withdraw__divider-two': !twoFactorAuthRequired\n      });\n      var withdrawAmountClass = classnames('cr-withdraw__group__amount', {\n        'cr-withdraw__group__amount--focused': withdrawAmountFocused\n      });\n      return React.createElement(\"div\", {\n        className: cx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-withdraw-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-withdraw__group__address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Beneficiaries, {\n        currency: currency,\n        type: type,\n        onChangeValue: this.handleChangeBeneficiary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"cr-withdraw__divider cr-withdraw__divider-one\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: withdrawAmountClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cr-withdraw__label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, Number(amount) !== 0 && amount && (withdrawAmountLabel || 'Withdrawal Amount')), React.createElement(Input, {\n        type: \"number\",\n        value: amount,\n        placeholder: withdrawAmountLabel || 'Amount',\n        className: \"cr-withdraw__input\",\n        onFocus: function onFocus() {\n          return _this2.handleFieldFocus('amount');\n        },\n        onBlur: function onBlur() {\n          return _this2.handleFieldFocus('amount');\n        },\n        onChangeValue: this.handleChangeInputAmount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: lastDividerClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), twoFactorAuthRequired && this.renderOtpCodeInput()), React.createElement(\"div\", {\n        className: \"cr-withdraw-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(SummaryField, {\n        className: \"cr-withdraw__summary-field\",\n        message: withdrawFeeLabel ? withdrawFeeLabel : 'Fee',\n        content: this.renderFee(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(SummaryField, {\n        className: \"cr-withdraw__summary-field\",\n        message: withdrawTotalLabel ? withdrawTotalLabel : 'Total Withdraw Amount',\n        content: this.renderTotal(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"cr-withdraw__deep\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"cr-withdraw__button\",\n        label: withdrawButtonLabel ? withdrawButtonLabel : 'WITHDRAW',\n        onClick: this.handleClick,\n        disabled: Number(total) <= 0 || !Boolean(beneficiary.id) || !Boolean(otpCode),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Withdraw;\n}(React.Component);","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/Withdraw/index.tsx"],"names":["Button","Decimal","Input","classnames","React","Beneficiaries","CustomInput","SummaryField","defaultBeneficiary","id","currency","name","state","data","address","Withdraw","amount","beneficiary","otpCode","withdrawAmountFocused","withdrawCodeFocused","total","renderFee","props","fee","fixed","toString","toUpperCase","renderTotal","renderOtpCodeInput","withdraw2faLabel","withdrawCodeClass","handleChangeInputOtpCode","handleFieldFocus","handleClick","onClick","parseFloat","field","setState","prev","handleChangeInputAmount","text","value","Number","toFixed","setTotal","handleChangeBeneficiary","nextProps","withdrawDone","JSON","stringify","className","type","twoFactorAuthRequired","withdrawAmountLabel","withdrawFeeLabel","withdrawTotalLabel","withdrawButtonLabel","cx","lastDividerClassName","withdrawAmountClass","Boolean","Component"],"mappings":"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","sourcesContent":["// tslint:disable:jsx-no-lambda\nimport { Button, Decimal, Input } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport {\n    Beneficiaries,\n    CustomInput,\n    SummaryField,\n} from '../../components';\nimport { Beneficiary } from '../../modules';\n\nexport interface WithdrawProps {\n    currency: string;\n    fee: number;\n    onClick: (amount: number, total: number, beneficiary: Beneficiary, otpCode: string) => void;\n    fixed: number;\n    className?: string;\n    type: 'fiat' | 'coin';\n    twoFactorAuthRequired?: boolean;\n    withdrawAmountLabel?: string;\n    withdraw2faLabel?: string;\n    withdrawFeeLabel?: string;\n    withdrawTotalLabel?: string;\n    withdrawButtonLabel?: string;\n    withdrawDone: boolean;\n}\n\nconst defaultBeneficiary: Beneficiary = {\n    id: 0,\n    currency: '',\n    name: '',\n    state: '',\n    data: {\n        address: '',\n    },\n};\n\ninterface WithdrawState {\n    amount: number | string;\n    beneficiary: Beneficiary;\n    otpCode: string;\n    withdrawAmountFocused: boolean;\n    withdrawCodeFocused: boolean;\n    total: number;\n}\n\nexport class Withdraw extends React.Component<WithdrawProps, WithdrawState> {\n    public state = {\n        amount: '',\n        beneficiary: defaultBeneficiary,\n        otpCode: '',\n        withdrawAmountFocused: false,\n        withdrawCodeFocused: false,\n        total: 0,\n    };\n\n    public componentWillReceiveProps(nextProps) {\n        const { currency, withdrawDone } = this.props;\n\n        if ((nextProps && (JSON.stringify(nextProps.currency) !== JSON.stringify(currency))) || (nextProps.withdrawDone && !withdrawDone)) {\n            this.setState({\n                amount: '',\n                otpCode: '',\n                total: 0,\n            });\n        }\n    }\n\n    public render() {\n        const {\n            amount,\n            beneficiary,\n            total,\n            withdrawAmountFocused,\n            otpCode,\n        } = this.state;\n        const {\n            className,\n            currency,\n            type,\n            twoFactorAuthRequired,\n            withdrawAmountLabel,\n            withdrawFeeLabel,\n            withdrawTotalLabel,\n            withdrawButtonLabel,\n        } = this.props;\n\n        const cx = classnames('cr-withdraw', className);\n        const lastDividerClassName = classnames('cr-withdraw__divider', {\n            'cr-withdraw__divider-one': twoFactorAuthRequired,\n            'cr-withdraw__divider-two': !twoFactorAuthRequired,\n        });\n\n        const withdrawAmountClass = classnames('cr-withdraw__group__amount', {\n          'cr-withdraw__group__amount--focused': withdrawAmountFocused,\n        });\n\n        return (\n            <div className={cx}>\n                <div className=\"cr-withdraw-column\">\n                    <div className=\"cr-withdraw__group__address\">\n                        <Beneficiaries\n                            currency={currency}\n                            type={type}\n                            onChangeValue={this.handleChangeBeneficiary}\n                        />\n                    </div>\n                    <div className=\"cr-withdraw__divider cr-withdraw__divider-one\" />\n                    <div className={withdrawAmountClass}>\n                        <label className=\"cr-withdraw__label\">\n                            {(Number(amount) !== 0 && amount) && (withdrawAmountLabel || 'Withdrawal Amount')}\n                        </label>\n                        <Input\n                            type=\"number\"\n                            value={amount}\n                            placeholder={withdrawAmountLabel || 'Amount'}\n                            className=\"cr-withdraw__input\"\n                            onFocus={() => this.handleFieldFocus('amount')}\n                            onBlur={() => this.handleFieldFocus('amount')}\n                            onChangeValue={this.handleChangeInputAmount}\n                        />\n                    </div>\n                    <div className={lastDividerClassName} />\n                    {twoFactorAuthRequired && this.renderOtpCodeInput()}\n                </div>\n                <div className=\"cr-withdraw-column\">\n                    <div>\n                        <SummaryField\n                            className=\"cr-withdraw__summary-field\"\n                            message={withdrawFeeLabel ? withdrawFeeLabel : 'Fee'}\n                            content={this.renderFee()}\n                        />\n                        <SummaryField\n                            className=\"cr-withdraw__summary-field\"\n                            message={withdrawTotalLabel ? withdrawTotalLabel : 'Total Withdraw Amount'}\n                            content={this.renderTotal()}\n                        />\n                    </div>\n                    <div className=\"cr-withdraw__deep\">\n                        <Button\n                            className=\"cr-withdraw__button\"\n                            label={withdrawButtonLabel ? withdrawButtonLabel : 'WITHDRAW'}\n                            onClick={this.handleClick}\n                            disabled={Number(total) <= 0 || !Boolean(beneficiary.id) || !Boolean(otpCode)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderFee = () => {\n        const { fee, fixed, currency } = this.props;\n        return (\n            <span>\n                <Decimal fixed={fixed}>{fee.toString()}</Decimal> {currency.toUpperCase()}\n            </span>\n        );\n    };\n\n    private renderTotal = () => {\n        const total = this.state.total;\n        const { fixed, currency } = this.props;\n        return total ? (\n            <span>\n                <Decimal fixed={fixed}>{total.toString()}</Decimal> {currency.toUpperCase()}\n            </span>\n        ) : <span>0 {currency.toUpperCase()}</span>;\n    };\n\n    private renderOtpCodeInput = () => {\n        const { otpCode, withdrawCodeFocused } = this.state;\n        const { withdraw2faLabel } = this.props;\n        const withdrawCodeClass = classnames('cr-withdraw__group__code', {\n          'cr-withdraw__group__code--focused': withdrawCodeFocused,\n        });\n        return (\n            <React.Fragment>\n              <div className={withdrawCodeClass}>\n                  <CustomInput\n                      type=\"number\"\n                      label={withdraw2faLabel || '2FA code'}\n                      placeholder={withdraw2faLabel || '2FA code'}\n                      defaultLabel=\"2FA code\"\n                      handleChangeInput={this.handleChangeInputOtpCode}\n                      inputValue={otpCode}\n                      handleFocusInput={() => this.handleFieldFocus('code')}\n                      classNameLabel=\"cr-withdraw__label\"\n                      classNameInput=\"cr-withdraw__input\"\n                      autoFocus={false}\n                  />\n              </div>\n              <div className=\"cr-withdraw__divider cr-withdraw__divider-two\" />\n            </React.Fragment>\n        );\n    };\n\n    private handleClick = () => this.props.onClick(\n        parseFloat(this.state.amount),\n        this.state.total,\n        this.state.beneficiary,\n        this.state.otpCode,\n    );\n\n    private handleFieldFocus = (field: string) => {\n        switch (field) {\n            case 'amount':\n                this.setState(prev => ({\n                    withdrawAmountFocused: !prev.withdrawAmountFocused,\n                }));\n                break;\n            case 'code':\n                this.setState(prev => ({\n                    withdrawCodeFocused: !prev.withdrawCodeFocused,\n                }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handleChangeInputAmount = (text: string) => {\n        const { fixed } = this.props;\n        const value = (text !== '') ? Number(parseFloat(text).toFixed(fixed)) : '';\n        const total = (value !== '') ? value - this.props.fee : 0;\n        if (total < 0) {\n            this.setTotal(0);\n        } else {\n            this.setTotal(total);\n        }\n        this.setState({ amount: value });\n    };\n\n    private setTotal = (value: number) => {\n        this.setState({ total: value });\n    };\n\n    private handleChangeBeneficiary = (value: Beneficiary) => {\n        this.setState({\n            beneficiary: value,\n        });\n    };\n\n    private handleChangeInputOtpCode = (otpCode: string) => {\n        this.setState({ otpCode });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}