{"ast":null,"code":"import _slicedToArray from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/Sidebar/index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { CloseIcon, OpenIcon } from '../../assets/images/NavBarIcons';\nimport { colors, pgRoutes } from '../../constants';\nimport { changeLanguage as _changeLanguage, logoutFetch as _logoutFetch, selectCurrentColorTheme, selectCurrentLanguage, selectCurrentMarket, selectSidebarState, selectUserLoggedIn, toggleSidebar as _toggleSidebar } from '../../modules';\n\nvar SidebarContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SidebarContainer, _React$Component);\n\n  function SidebarContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SidebarContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SidebarContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isOpenLanguage: false\n    };\n\n    _this.renderNavItems = function (address) {\n      return function (values, index) {\n        var currentMarket = _this.props.currentMarket;\n\n        var _values = _slicedToArray(values, 3),\n            name = _values[0],\n            url = _values[1],\n            img = _values[2];\n\n        var handleLinkChange = function handleLinkChange() {\n          return _this.props.toggleSidebar(false);\n        };\n\n        var path = url.includes('/trading') && currentMarket ? \"/trading/\".concat(currentMarket.id) : url;\n        var isActive = url === '/trading/' && address.includes('/trading') || address === url;\n        return React.createElement(Link, {\n          to: path,\n          key: index,\n          onClick: handleLinkChange,\n          className: \"\".concat(isActive && 'route-selected'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"pg-sidebar-wrapper-nav-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"pg-sidebar-wrapper-nav-item-img-wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          className: \"pg-sidebar-wrapper-nav-item-img\",\n          src: require(\"../../assets/images/sidebar/\".concat(img, \".svg\")),\n          alt: \"icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        })), React.createElement(\"p\", {\n          className: \"pg-sidebar-wrapper-nav-item-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }))));\n      };\n    };\n\n    _this.renderProfileLink = function () {\n      var _this$props = _this.props,\n          isLoggedIn = _this$props.isLoggedIn,\n          colorTheme = _this$props.colorTheme,\n          location = _this$props.location;\n      var isLight = colorTheme === 'light';\n\n      var handleLinkChange = function handleLinkChange() {\n        return _this.props.toggleSidebar(false);\n      };\n\n      var address = location ? location.pathname : '';\n      var isActive = address === '/profile';\n      return isLoggedIn && React.createElement(\"div\", {\n        className: \"pg-sidebar-wrapper-profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/profile\",\n        onClick: handleLinkChange,\n        className: \"\".concat(isActive && 'route-selected'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-sidebar-wrapper-profile-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"pg-sidebar-wrapper-profile-link-img\",\n        src: require(\"../../assets/images/sidebar/profile\".concat(isLight ? 'Light' : '', \".svg\")),\n        alt: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"pg-sidebar-wrapper-profile-link-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: 'page.header.navbar.profile',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })))));\n    };\n\n    _this.renderLogout = function () {\n      var _this$props2 = _this.props,\n          isLoggedIn = _this$props2.isLoggedIn,\n          colorTheme = _this$props2.colorTheme;\n      var isLight = colorTheme === 'light';\n\n      if (!isLoggedIn) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"pg-sidebar-wrapper-logout\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-sidebar-wrapper-logout-link\",\n        onClick: _this.props.logoutFetch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"pg-sidebar-wrapper-logout-link-img\",\n        src: require(\"../../assets/images/sidebar/logout\".concat(isLight ? 'Light' : '', \".svg\")),\n        alt: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"pg-sidebar-wrapper-logout-link-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: 'page.body.profile.content.action.logout',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }))));\n    };\n\n    _this.toggleLanguageMenu = function () {\n      _this.setState({\n        isOpenLanguage: !_this.state.isOpenLanguage\n      }, function () {\n        if (_this.state.isOpenLanguage) {\n          document.addEventListener('click', _this.closeLanguageMenu);\n        } else {\n          document.removeEventListener('click', _this.closeLanguageMenu);\n        }\n      });\n    };\n\n    _this.closeLanguageMenu = function () {\n      _this.setState({\n        isOpenLanguage: false\n      }, function () {\n        document.removeEventListener('click', _this.closeLanguageMenu);\n      });\n    };\n\n    _this.getLanguageMenuIcon = function () {\n      var colorTheme = _this.props.colorTheme;\n      var isOpenLanguage = _this.state.isOpenLanguage;\n\n      if (colorTheme === 'light') {\n        return isOpenLanguage ? React.createElement(\"span\", {\n          className: \"icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(OpenIcon, {\n          fillColor: colors.light.navbar.language,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        })) : React.createElement(\"span\", {\n          className: \"icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, React.createElement(CloseIcon, {\n          fillColor: colors.light.navbar.language,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }));\n      }\n\n      return isOpenLanguage ? React.createElement(\"span\", {\n        className: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(OpenIcon, {\n        fillColor: colors.basic.navbar.language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })) : React.createElement(\"span\", {\n        className: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        fillColor: colors.basic.navbar.language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }));\n    };\n\n    _this.getLanguageMenu = function () {\n      return React.createElement(\"div\", {\n        className: \"dropdown-menu dropdown-menu-language\",\n        role: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"dropdown-menu-item-lang\",\n        onClick: function onClick(e) {\n          return _this.handleChangeLanguage('en');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require('../../assets/images/sidebar/en.svg'),\n        alt: \"usa\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"EN\")), React.createElement(\"div\", {\n        className: \"dropdown-menu-item-lang\",\n        onClick: function onClick(e) {\n          return _this.handleChangeLanguage('fa');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require('../../assets/images/sidebar/fa.svg'),\n        alt: \"far\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, \"FA\")), React.createElement(\"div\", {\n        className: \"dropdown-menu-item-lang\",\n        onClick: function onClick(e) {\n          return _this.handleChangeLanguage('ru');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require('../../assets/images/sidebar/ru.svg'),\n        alt: \"rus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"RU\")));\n    };\n\n    _this.handleChangeLanguage = function (language) {\n      _this.props.changeLanguage(language);\n    };\n\n    return _this;\n  }\n\n  _createClass(SidebarContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          isLoggedIn = _this$props3.isLoggedIn,\n          colorTheme = _this$props3.colorTheme,\n          isActive = _this$props3.isActive,\n          lang = _this$props3.lang;\n      var isOpenLanguage = this.state.isOpenLanguage;\n      var address = this.props.history.location ? this.props.history.location.pathname : '';\n      var isLight = colorTheme === 'light';\n      var lightBox = isLight ? 'light-box' : '';\n      var languageName = lang.toUpperCase();\n      var languageClassName = classnames('dropdown-menu-language-field', {\n        'dropdown-menu-language-field-active': isOpenLanguage\n      });\n      return React.createElement(\"div\", {\n        className: \"pg-sidebar-wrapper \".concat(lightBox, \" pg-sidebar-wrapper--\").concat(isActive ? 'active' : 'hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.renderProfileLink(), React.createElement(\"div\", {\n        className: \"pg-sidebar-wrapper-nav\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, pgRoutes(isLoggedIn, isLight).map(this.renderNavItems(address))), React.createElement(\"div\", {\n        className: \"pg-sidebar-wrapper-lng\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"btn-group pg-navbar__header-settings__account-dropdown dropdown-toggle dropdown-menu-language-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.toggleLanguageMenu,\n        className: languageClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require(\"../../assets/images/sidebar/\".concat(lang, \".svg\")),\n        alt: \"flag\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"dropdown-menu-language-selected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, languageName), this.getLanguageMenuIcon()), isOpenLanguage ? this.getLanguageMenu() : null)), this.renderLogout());\n    }\n  }]);\n\n  return SidebarContainer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    colorTheme: selectCurrentColorTheme(state),\n    isLoggedIn: selectUserLoggedIn(state),\n    currentMarket: selectCurrentMarket(state),\n    lang: selectCurrentLanguage(state),\n    isActive: selectSidebarState(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    changeLanguage: function changeLanguage(payload) {\n      return dispatch(_changeLanguage(payload));\n    },\n    toggleSidebar: function toggleSidebar(payload) {\n      return dispatch(_toggleSidebar(payload));\n    },\n    logoutFetch: function logoutFetch() {\n      return dispatch(_logoutFetch());\n    }\n  };\n}; // tslint:disable no-any\n\n\nvar Sidebar = withRouter(connect(mapStateToProps, mapDispatchToProps)(SidebarContainer));\nexport { Sidebar };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/Sidebar/index.tsx"],"names":["classnames","React","FormattedMessage","connect","Link","withRouter","CloseIcon","OpenIcon","colors","pgRoutes","changeLanguage","logoutFetch","selectCurrentColorTheme","selectCurrentLanguage","selectCurrentMarket","selectSidebarState","selectUserLoggedIn","toggleSidebar","SidebarContainer","state","isOpenLanguage","renderNavItems","address","values","index","currentMarket","props","name","url","img","handleLinkChange","path","includes","id","isActive","require","renderProfileLink","isLoggedIn","colorTheme","location","isLight","pathname","renderLogout","toggleLanguageMenu","setState","document","addEventListener","closeLanguageMenu","removeEventListener","getLanguageMenuIcon","light","navbar","language","basic","getLanguageMenu","e","handleChangeLanguage","lang","history","lightBox","languageName","toUpperCase","languageClassName","map","Component","mapStateToProps","mapDispatchToProps","dispatch","payload","Sidebar"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport { History } from 'history';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { Link, RouteProps, withRouter } from 'react-router-dom';\nimport { CloseIcon, OpenIcon } from '../../assets/images/NavBarIcons';\nimport { colors, pgRoutes } from '../../constants';\nimport {\n    changeLanguage,\n    logoutFetch,\n    Market,\n    RootState,\n    selectCurrentColorTheme,\n    selectCurrentLanguage,\n    selectCurrentMarket,\n    selectSidebarState,\n    selectUserLoggedIn,\n    toggleSidebar,\n} from '../../modules';\n\n\ninterface State {\n    isOpenLanguage: boolean;\n}\n\ninterface DispatchProps {\n    changeLanguage: typeof changeLanguage;\n    toggleSidebar: typeof toggleSidebar;\n    logoutFetch: typeof logoutFetch;\n}\n\ninterface ReduxProps {\n    lang: string;\n    colorTheme: string;\n    isLoggedIn: boolean;\n    currentMarket: Market | undefined;\n    isActive: boolean;\n}\n\ninterface OwnProps {\n    onLinkChange?: () => void;\n    history: History;\n}\n\ntype Props = OwnProps & ReduxProps & RouteProps & DispatchProps;\n\n\nclass SidebarContainer extends React.Component<Props, State> {\n    public state = {\n        isOpenLanguage: false,\n    };\n\n    public render() {\n        const { isLoggedIn, colorTheme, isActive, lang } = this.props;\n        const { isOpenLanguage } = this.state;\n\n        const address = this.props.history.location ? this.props.history.location.pathname : '';\n        const isLight = colorTheme === 'light';\n        const lightBox = isLight ? 'light-box' : '';\n        const languageName = lang.toUpperCase();\n\n        const languageClassName = classnames('dropdown-menu-language-field', {\n            'dropdown-menu-language-field-active': isOpenLanguage,\n        });\n\n        return (\n            <div className={`pg-sidebar-wrapper ${lightBox} pg-sidebar-wrapper--${isActive ? 'active' : 'hidden'}`}>\n                {this.renderProfileLink()}\n                <div className=\"pg-sidebar-wrapper-nav\">\n                    {pgRoutes(isLoggedIn, isLight).map(this.renderNavItems(address))}\n                </div>\n                <div className=\"pg-sidebar-wrapper-lng\">\n                    <div className=\"btn-group pg-navbar__header-settings__account-dropdown dropdown-toggle dropdown-menu-language-container\">\n                        <div onClick={this.toggleLanguageMenu} className={languageClassName}>\n                            <img src={require(`../../assets/images/sidebar/${lang}.svg`)} alt=\"flag\"/>\n                            <span className=\"dropdown-menu-language-selected\">{languageName}</span>\n                            {this.getLanguageMenuIcon()}\n                        </div>\n                        {isOpenLanguage ? this.getLanguageMenu() : null}\n                    </div>\n                </div>\n                {this.renderLogout()}\n            </div>\n        );\n    }\n\n    public renderNavItems = (address: string) => (values: string[], index: number) => {\n        const { currentMarket } = this.props;\n\n        const [name, url, img] = values;\n        const handleLinkChange = () => this.props.toggleSidebar(false);\n        const path = url.includes('/trading') && currentMarket ? `/trading/${currentMarket.id}` : url;\n        const isActive = (url === '/trading/' && address.includes('/trading')) || address === url;\n        return (\n            <Link to={path} key={index} onClick={handleLinkChange} className={`${isActive && 'route-selected'}`}>\n                <div className=\"pg-sidebar-wrapper-nav-item\">\n                    <div className=\"pg-sidebar-wrapper-nav-item-img-wrapper\">\n                        <img\n                            className=\"pg-sidebar-wrapper-nav-item-img\"\n                            src={require(`../../assets/images/sidebar/${img}.svg`)}\n                            alt=\"icon\"\n                        />\n                    </div>\n                    <p className=\"pg-sidebar-wrapper-nav-item-text\">\n                        <FormattedMessage id={name} />\n                    </p>\n                </div>\n            </Link>\n        );\n    };\n\n    public renderProfileLink = () => {\n        const { isLoggedIn, colorTheme, location } = this.props;\n        const isLight = colorTheme === 'light';\n        const handleLinkChange = () => this.props.toggleSidebar(false);\n        const address = location ? location.pathname : '';\n        const isActive = address === '/profile';\n\n        return isLoggedIn && (\n            <div className=\"pg-sidebar-wrapper-profile\">\n                <Link to=\"/profile\" onClick={handleLinkChange} className={`${isActive && 'route-selected'}`}>\n                    <div className=\"pg-sidebar-wrapper-profile-link\">\n                        <img\n                            className=\"pg-sidebar-wrapper-profile-link-img\"\n                            src={require(`../../assets/images/sidebar/profile${isLight ? 'Light' : '' }.svg`)}\n                            alt=\"icon\"\n                        />\n                        <p className=\"pg-sidebar-wrapper-profile-link-text\">\n                            <FormattedMessage id={'page.header.navbar.profile'} />\n                        </p>\n                    </div>\n                </Link>\n            </div>\n        );\n    };\n\n    public renderLogout = () => {\n        const { isLoggedIn, colorTheme } = this.props;\n        const isLight = colorTheme === 'light';\n        if (!isLoggedIn) {\n            return null;\n        }\n\n        return (\n            <div className=\"pg-sidebar-wrapper-logout\">\n                <div className=\"pg-sidebar-wrapper-logout-link\" onClick={this.props.logoutFetch}>\n                    <img\n                        className=\"pg-sidebar-wrapper-logout-link-img\"\n                        src={require(`../../assets/images/sidebar/logout${isLight ? 'Light' : '' }.svg`)}\n                        alt=\"icon\"\n                    />\n                    <p className=\"pg-sidebar-wrapper-logout-link-text\">\n                        <FormattedMessage id={'page.body.profile.content.action.logout'} />\n                    </p>\n                </div>\n            </div>\n        );\n    };\n\n    private toggleLanguageMenu = () => {\n        this.setState({\n            isOpenLanguage: !this.state.isOpenLanguage,\n        }, () => {\n            if (this.state.isOpenLanguage) {\n                document.addEventListener('click', this.closeLanguageMenu);\n            } else {\n                document.removeEventListener('click', this.closeLanguageMenu);\n            }\n        });\n    };\n\n    private closeLanguageMenu = () => {\n        this.setState({\n            isOpenLanguage: false,\n        }, () => {\n            document.removeEventListener('click', this.closeLanguageMenu);\n        });\n    };\n\n    private getLanguageMenuIcon = () => {\n        const { colorTheme } = this.props;\n        const { isOpenLanguage } = this.state;\n\n        if (colorTheme === 'light') {\n            return (\n                isOpenLanguage ? (\n                    <span className=\"icon\"><OpenIcon fillColor={colors.light.navbar.language} /></span>\n                ) : (\n                    <span className=\"icon\"><CloseIcon fillColor={colors.light.navbar.language} /></span>\n                )\n            );\n        }\n\n        return (\n            isOpenLanguage ? (\n                <span className=\"icon\"><OpenIcon fillColor={colors.basic.navbar.language} /></span>\n            ) : (\n                <span className=\"icon\"><CloseIcon fillColor={colors.basic.navbar.language} /></span>\n            )\n        );\n    };\n    // tslint:disable:jsx-no-lambda\n    private getLanguageMenu = () => {\n        return (\n            <div className=\"dropdown-menu dropdown-menu-language\" role=\"menu\">\n                <div className=\"dropdown-menu-item-lang\" onClick={e => this.handleChangeLanguage('en')}>\n                    <img\n                        src={require('../../assets/images/sidebar/en.svg')}\n                        alt=\"usa\"\n                    />\n                    <span>EN</span>\n                </div>\n\t\t\t\t<div className=\"dropdown-menu-item-lang\" onClick={e => this.handleChangeLanguage('fa')}>\n                    <img\n                        src={require('../../assets/images/sidebar/fa.svg')}\n                        alt=\"far\"\n                    />\n                    <span>FA</span>\n                </div>\n                <div className=\"dropdown-menu-item-lang\" onClick={e => this.handleChangeLanguage('ru')}>\n                    <img\n                        src={require('../../assets/images/sidebar/ru.svg')}\n                        alt=\"rus\"\n                    />\n                    <span>RU</span>\n                </div>\n            </div>\n        );\n    };\n\n    private handleChangeLanguage = (language: string) => {\n        this.props.changeLanguage(language);\n    }\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    colorTheme: selectCurrentColorTheme(state),\n    isLoggedIn: selectUserLoggedIn(state),\n    currentMarket: selectCurrentMarket(state),\n    lang: selectCurrentLanguage(state),\n    isActive: selectSidebarState(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        changeLanguage: payload => dispatch(changeLanguage(payload)),\n        toggleSidebar: payload => dispatch(toggleSidebar(payload)),\n        logoutFetch: () => dispatch(logoutFetch()),\n    });\n\n// tslint:disable no-any\nconst Sidebar = withRouter(connect(mapStateToProps, mapDispatchToProps)(SidebarContainer) as any) as any;\n\nexport {\n    Sidebar,\n};\n"]},"metadata":{},"sourceType":"module"}