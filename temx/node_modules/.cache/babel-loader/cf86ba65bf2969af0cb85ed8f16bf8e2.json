{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/components/TabPanel/index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nexport var HideMode;\n\n(function (HideMode) {\n  HideMode[\"hide\"] = \"hide\";\n  HideMode[\"unmount\"] = \"unmount\";\n})(HideMode || (HideMode = {}));\n\n/**\n * Component for switching between different tabs on one page.\n */\nexport var TabPanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TabPanel, _React$Component);\n\n  function TabPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TabPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TabPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderTabPanel = function (tab, index) {\n      var disabled = tab.disabled,\n          hidden = tab.hidden,\n          label = tab.label;\n      var _this$props = _this.props,\n          tabIndex = _this$props.tabIndex,\n          currentTabIndex = _this$props.currentTabIndex;\n      var newCurrentTabIndex = tabIndex ? tabIndex : currentTabIndex;\n      var active = newCurrentTabIndex === index;\n      var className = classnames('cr-tab', {\n        'cr-tab__active': active,\n        'cr-tab__disabled': disabled,\n        'cr-tab__hidden': hidden\n      });\n      return React.createElement(\"div\", {\n        className: className,\n        key: index,\n        onClick: _this.createOnTabChangeHandler(index, tab),\n        role: \"tab\",\n        tabIndex: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, label, active && React.createElement(\"span\", {\n        className: \"cr-tab__pointer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderTabContent = function (tab, index) {\n      var _this$props2 = _this.props,\n          hideMode = _this$props2.hideMode,\n          tabIndex = _this$props2.tabIndex,\n          currentTabIndex = _this$props2.currentTabIndex;\n      var newCurrentTabIndex = tabIndex ? tabIndex : currentTabIndex;\n      var className = classnames('cr-tab-content', {\n        'cr-tab-content__active': hideMode === HideMode.hide ? newCurrentTabIndex === index : false\n      });\n      return React.createElement(\"div\", {\n        className: className,\n        key: \"\".concat(tab.label, \"-\").concat(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, tab.content);\n    };\n\n    _this.createOnTabChangeHandler = function (index, tab) {\n      return function () {\n        if (!tab.disabled) {\n          if (_this.props.onCurrentTabChange) {\n            _this.props.onCurrentTabChange(index);\n          }\n\n          if (_this.props.onTabChange) {\n            _this.props.onTabChange(index, tab.label);\n          }\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(TabPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          fixed = _this$props3.fixed,\n          hideMode = _this$props3.hideMode,\n          panels = _this$props3.panels,\n          optionalHead = _this$props3.optionalHead,\n          currentTabIndex = _this$props3.currentTabIndex;\n      var className = classnames('cr-tab-panel', {\n        'cr-tab-panel__fixed': fixed\n      });\n      var contents = hideMode === HideMode.hide ? panels.map(this.renderTabContent) : panels.filter(function (panel, index) {\n        return index === currentTabIndex;\n      }).map(this.renderTabContent);\n      var navCx = 'cr-tab-panel__navigation-container-navigation';\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-tab-panel__navigation-container draggable-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: navCx,\n        role: \"tablist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, panels.map(this.renderTabPanel)), optionalHead && React.createElement(\"div\", {\n        className: \"cr-tab-panel__optinal-head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, optionalHead)), contents);\n    }\n  }]);\n\n  return TabPanel;\n}(React.Component);\nTabPanel.defaultProps = {\n  hideMode: HideMode.hide\n};","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/components/TabPanel/index.tsx"],"names":["classnames","React","HideMode","TabPanel","renderTabPanel","tab","index","disabled","hidden","label","props","tabIndex","currentTabIndex","newCurrentTabIndex","active","className","createOnTabChangeHandler","renderTabContent","hideMode","hide","content","onCurrentTabChange","onTabChange","fixed","panels","optionalHead","contents","map","filter","panel","navCx","Component","defaultProps"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\n\nexport enum HideMode {\n    hide = 'hide',\n    unmount = 'unmount',\n}\n\nexport type OnTabChangeCallback = (index: number, label?: string) => void;\n\ntype OnCurrentTabChange = (index: number) => void;\n\nexport interface Tab {\n    content: React.ReactNode;\n    disabled?: boolean;\n    hidden?: boolean;\n    label: string;\n}\n\nexport interface TabPanelProps {\n    /**\n     * List of tabs to be rendered\n     */\n    panels: Tab[];\n    /**\n     * Determines whether tabs should be full container width\n     * @default false\n     */\n    fixed?: boolean;\n    /**\n     * Tab change mode:\n     * `hide` mode will mount but hide inactive tabs changing `display` css\n     * property of tab content to `none`.\n     * `unmount` mode will not mount the tab content of inactive tabs.\n     * @default hide\n     */\n    hideMode?: HideMode;\n    /**\n     * Callback which is called when currently active tab is changed\n     */\n    onTabChange?: OnTabChangeCallback;\n    /**\n     * Function which is called for changing currently active tab is changed\n     */\n    onCurrentTabChange?: OnCurrentTabChange;\n    /**\n     * Index of tab to switch on\n     */\n    tabIndex?: number;\n    /**\n     * Current index of tab\n     */\n    currentTabIndex: number;\n    /**\n     * Optinal JSX element to head\n     */\n    optionalHead?: React.ReactNode;\n}\n\n\n/**\n * Component for switching between different tabs on one page.\n */\nexport class TabPanel extends React.Component<TabPanelProps> {\n    public static defaultProps = {\n        hideMode: HideMode.hide,\n    };\n\n    public render() {\n        const { fixed, hideMode, panels, optionalHead, currentTabIndex } = this.props;\n        const className: string = classnames('cr-tab-panel', {\n            'cr-tab-panel__fixed': fixed,\n        });\n\n        const contents = hideMode === HideMode.hide\n            ? panels.map(this.renderTabContent)\n            : panels\n                .filter((panel, index) => index === currentTabIndex)\n                .map(this.renderTabContent);\n\n        const navCx = 'cr-tab-panel__navigation-container-navigation';\n        return (\n            <div className={className}>\n                <div className=\"cr-tab-panel__navigation-container draggable-container\">\n                    <div className={navCx} role=\"tablist\">\n                        {panels.map(this.renderTabPanel)}\n                    </div>\n                    {optionalHead && <div className=\"cr-tab-panel__optinal-head\">{optionalHead}</div>}\n                </div>\n                {contents}\n            </div>\n        );\n    }\n\n    private renderTabPanel = (tab: Tab, index: number) => {\n        const { disabled, hidden, label } = tab;\n        const { tabIndex, currentTabIndex } = this.props;\n        const newCurrentTabIndex = tabIndex ? tabIndex : currentTabIndex;\n\n        const active = newCurrentTabIndex === index;\n        const className = classnames('cr-tab', {\n            'cr-tab__active': active,\n            'cr-tab__disabled': disabled,\n            'cr-tab__hidden': hidden,\n        });\n\n        return (\n            <div\n                className={className}\n                key={index}\n                onClick={this.createOnTabChangeHandler(index, tab)}\n                role=\"tab\"\n                tabIndex={index}\n            >\n                {label}\n                {active && <span className=\"cr-tab__pointer\" />}\n            </div>\n        );\n    };\n\n    private renderTabContent = (tab: Tab, index: number) => {\n        const { hideMode, tabIndex, currentTabIndex } = this.props;\n        const newCurrentTabIndex = tabIndex ? tabIndex : currentTabIndex;\n\n        const className: string = classnames('cr-tab-content',\n            {\n                'cr-tab-content__active':\n                    hideMode === HideMode.hide ?\n                        newCurrentTabIndex === index : false,\n            },\n        );\n\n        return (\n            <div className={className} key={`${tab.label}-${index}`}>\n                {tab.content}\n            </div>\n        );\n    };\n\n    private createOnTabChangeHandler = (index: number, tab: Tab) => () => {\n        if (!tab.disabled) {\n            if (this.props.onCurrentTabChange) {\n                this.props.onCurrentTabChange(index);\n            }\n            if (this.props.onTabChange) {\n                this.props.onTabChange(index, tab.label);\n            }\n\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}