{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/screens/ConfirmScreen/index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Phone } from '../../containers';\nimport { Documents } from '../../containers/Confirm/Documents';\nimport { Identity } from '../../containers/Confirm/Identity';\nimport { setDocumentTitle } from '../../helpers';\nimport { labelFetch as _labelFetch, selectCurrentColorTheme, selectLabelData, selectUserInfo } from '../../modules';\nimport logo from \"../../assets/images/logo.svg\";\nimport logoLight from \"../../assets/images/logoLight.svg\";\n\nvar ConfirmComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ConfirmComponent, _React$Component);\n\n  function ConfirmComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ConfirmComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConfirmComponent).call(this, props));\n\n    _this.goBack = function (event) {\n      event.preventDefault();\n\n      _this.props.history.goBack();\n    };\n\n    _this.renderContent = function () {\n      var labels = _this.props.labels;\n      var level = _this.state.level;\n      var isIdentity = labels.find(function (w) {\n        return w.key === 'profile' && (w.value === 'verified' || w.value === 'submitted');\n      });\n\n      switch (level) {\n        case 1:\n          return React.createElement(Phone, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          });\n\n        case 2:\n          return isIdentity ? React.createElement(Documents, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          }) : React.createElement(Identity, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          });\n\n        case 3:\n          return React.createElement(Documents, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          });\n\n        default:\n          return 'Something went wrong';\n      }\n    };\n\n    _this.state = {\n      title: '',\n      level: 1\n    };\n    return _this;\n  }\n\n  _createClass(ConfirmComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Confirm');\n      this.props.labelFetch();\n      var userData = this.props.userData;\n      this.setState({\n        level: userData.level\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.userData.level !== this.state.level) {\n        this.setState({\n          level: next.userData.level\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    // tslint:disable:jsx-no-multiline-js\n    value: function render() {\n      var _this$props = this.props,\n          colorTheme = _this$props.colorTheme,\n          userData = _this$props.userData,\n          labels = _this$props.labels;\n      var isIdentity = labels.find(function (w) {\n        return w.key === 'profile' && (w.value === 'verified' || w.value === 'submitted');\n      });\n      var currentProfileLevel = userData.level;\n      var cx = classnames('pg-confirm__progress-items', {\n        'pg-confirm__progress-first': currentProfileLevel === 1,\n        'pg-confirm__progress-second': currentProfileLevel === 2 && !isIdentity,\n        'pg-confirm__progress-third': currentProfileLevel === 3 || isIdentity\n      });\n      return React.createElement(\"div\", {\n        className: \"pg-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, colorTheme === 'light' ? React.createElement(\"img\", {\n        src: logoLight,\n        className: \"pg-logo__img\",\n        alt: \"Logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }) : React.createElement(\"img\", {\n        src: logo,\n        className: \"pg-logo__img\",\n        alt: \"Logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"pg-confirm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.goBack,\n        className: \"pg-confirm-box-close\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pg-confirm__progress\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: cx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__progress-circle-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pg-confirm__title-text pg-confirm__active-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.kyc.head.phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__progress-line-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pg-confirm__progress-circle-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pg-confirm__title-text pg-confirm__active-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.kyc.head.identity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__progress-line-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pg-confirm__progress-circle-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pg-confirm__title-text pg-confirm__active-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.kyc.head.document\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"pg-confirm__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.renderContent()))));\n    } //tslint:enable:jsx-no-multiline-js\n\n  }]);\n\n  return ConfirmComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    colorTheme: selectCurrentColorTheme(state),\n    userData: selectUserInfo(state),\n    labels: selectLabelData(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    labelFetch: function labelFetch() {\n      return dispatch(_labelFetch());\n    }\n  };\n}; // tslint:disable-next-line\n\n\nexport var ConfirmScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(ConfirmComponent)));","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/screens/ConfirmScreen/index.tsx"],"names":["classnames","React","FormattedMessage","injectIntl","connect","withRouter","Phone","Documents","Identity","setDocumentTitle","labelFetch","selectCurrentColorTheme","selectLabelData","selectUserInfo","ConfirmComponent","props","goBack","event","preventDefault","history","renderContent","labels","level","state","isIdentity","find","w","key","value","title","userData","setState","next","colorTheme","currentProfileLevel","cx","logoLight","logo","Component","mapStateToProps","mapDispatchToProps","dispatch","ConfirmScreen"],"mappings":"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","sourcesContent":["import classnames from 'classnames';\nimport { History } from 'history';\nimport * as React from 'react';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Phone } from '../../containers';\nimport { Documents } from '../../containers/Confirm/Documents';\nimport { Identity } from '../../containers/Confirm/Identity';\nimport { setDocumentTitle } from '../../helpers';\nimport {\n    Label,\n    labelFetch,\n    RootState,\n    selectCurrentColorTheme,\n    selectLabelData,\n    selectUserInfo,\n    User,\n} from '../../modules';\n\nimport logo from '../../assets/images/logo.svg';\nimport logoLight from '../../assets/images/logoLight.svg';\n\ninterface ReduxProps {\n    colorTheme: string;\n    userData: User;\n    labels: Label[];\n}\n\ninterface HistoryProps {\n    history: History;\n}\n\ninterface ConfirmState {\n    title: string;\n    level: number;\n}\n\ninterface DispatchProps {\n    labelFetch: typeof labelFetch;\n}\n\ntype Props = ReduxProps & HistoryProps & DispatchProps & InjectedIntlProps;\n\nclass ConfirmComponent extends React.Component<Props, ConfirmState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            title: '',\n            level: 1,\n        };\n    }\n\n    public componentDidMount() {\n        setDocumentTitle('Confirm');\n        this.props.labelFetch();\n        const { userData } = this.props;\n        this.setState({\n            level: userData.level,\n        });\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.userData.level !== this.state.level) {\n            this.setState({\n                level: next.userData.level,\n            });\n        }\n    }\n\n    public goBack = event => {\n      event.preventDefault();\n      this.props.history.goBack();\n    };\n\n    // tslint:disable:jsx-no-multiline-js\n    public render() {\n        const {\n            colorTheme,\n            userData,\n            labels,\n        } = this.props;\n        const isIdentity = labels.find(w => w.key === 'profile' && (w.value === 'verified' || w.value === 'submitted'));\n        const currentProfileLevel = userData.level;\n        const cx = classnames('pg-confirm__progress-items', {\n            'pg-confirm__progress-first': currentProfileLevel === 1,\n            'pg-confirm__progress-second': currentProfileLevel === 2 && !isIdentity,\n            'pg-confirm__progress-third': currentProfileLevel === 3 || isIdentity,\n        });\n        return (\n            <div className=\"pg-wrapper\">\n                <div className=\"pg-logo\">\n                    {colorTheme === 'light' ? (\n                        <img src={logoLight} className=\"pg-logo__img\" alt=\"Logo\" />\n                    ) : (\n                        <img src={logo} className=\"pg-logo__img\" alt=\"Logo\" />\n                    )}\n                </div>\n                <div className=\"pg-confirm\">\n                    <div className=\"pg-confirm-box\">\n                        <div\n                            onClick={this.goBack}\n                            className=\"pg-confirm-box-close\"\n                        />\n                        <div className=\"pg-confirm__progress\">\n                            <div className={cx}>\n                                <div className=\"pg-confirm__progress-circle-1\">\n                                    <span className=\"pg-confirm__title-text pg-confirm__active-1\">\n                                    <FormattedMessage id=\"page.body.kyc.head.phone\"/>\n                                    </span>\n                                </div>\n                                <div className=\"pg-confirm__progress-line-1\" />\n                                <div className=\"pg-confirm__progress-circle-2\">\n                                    <span className=\"pg-confirm__title-text pg-confirm__active-2\">\n                                    <FormattedMessage id=\"page.body.kyc.head.identity\"/>\n                                    </span>\n                                </div>\n                                <div className=\"pg-confirm__progress-line-2\" />\n                                <div className=\"pg-confirm__progress-circle-3\">\n                                    <span className=\"pg-confirm__title-text pg-confirm__active-3\">\n                                    <FormattedMessage id=\"page.body.kyc.head.document\"/>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"pg-confirm__content\">\n                            {this.renderContent()}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    //tslint:enable:jsx-no-multiline-js\n\n    private renderContent = () => {\n        const { labels } = this.props;\n        const { level } = this.state;\n        const isIdentity = labels.find(w => w.key === 'profile' && (w.value === 'verified' || w.value === 'submitted'));\n\n        switch (level) {\n            case 1: return <Phone />;\n            case 2: return isIdentity ? <Documents /> : <Identity />;\n            case 3: return <Documents />;\n            default: return 'Something went wrong';\n        }\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    colorTheme: selectCurrentColorTheme(state),\n    userData: selectUserInfo(state),\n    labels: selectLabelData(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    labelFetch: () => dispatch(labelFetch()),\n});\n\n// tslint:disable-next-line\nexport const ConfirmScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(ConfirmComponent) as any));\n"]},"metadata":{},"sourceType":"module"}