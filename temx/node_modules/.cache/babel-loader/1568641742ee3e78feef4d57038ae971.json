{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(apiKeyCreateSaga);\n\n// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { apiKeyCreate, apiKeys2FAModal } from '../actions';\nvar createOptions = {\n  apiVersion: 'barong'\n};\nexport function apiKeyCreateSaga(action) {\n  var apiKey;\n  return _regeneratorRuntime.wrap(function apiKeyCreateSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(createOptions), '/resource/api_keys', action.payload);\n\n        case 3:\n          apiKey = _context.sent;\n          _context.next = 6;\n          return put(apiKeyCreate(apiKey));\n\n        case 6:\n          _context.next = 8;\n          return put(alertPush({\n            message: ['success.api_keys.created'],\n            type: 'success'\n          }));\n\n        case 8:\n          _context.next = 10;\n          return put(apiKeys2FAModal({\n            active: true,\n            action: 'createSuccess',\n            apiKey: apiKey\n          }));\n\n        case 10:\n          _context.next = 18;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 16:\n          _context.next = 18;\n          return put(apiKeys2FAModal({\n            active: false\n          }));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/user/apiKeys/sagas/apiKeyCreateSaga.ts"],"names":["apiKeyCreateSaga","call","put","API","alertPush","apiKeyCreate","apiKeys2FAModal","createOptions","apiVersion","action","post","payload","apiKey","message","type","active","code"],"mappings":";;;;yBAUiBA,gB;;AAVjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,YAAT,EAA0CC,eAA1C,QAAiE,YAAjE;AAEA,IAAMC,aAA6B,GAAG;AAClCC,EAAAA,UAAU,EAAE;AADsB,CAAtC;AAIA,OAAO,SAAUR,gBAAV,CAA2BS,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB,iBAAMR,IAAI,CAACE,GAAG,CAACO,IAAJ,CAASH,aAAT,CAAD,EAA0B,oBAA1B,EAAgDE,MAAM,CAACE,OAAvD,CAAV;;AAFhB;AAEOC,UAAAA,MAFP;AAAA;AAGC,iBAAMV,GAAG,CAACG,YAAY,CAACO,MAAD,CAAb,CAAT;;AAHD;AAAA;AAIC,iBAAMV,GAAG,CAACE,SAAS,CAAC;AAACS,YAAAA,OAAO,EAAE,CAAC,0BAAD,CAAV;AAAwCC,YAAAA,IAAI,EAAE;AAA9C,WAAD,CAAV,CAAT;;AAJD;AAAA;AAKC,iBAAMZ,GAAG,CAACI,eAAe,CAAC;AAACS,YAAAA,MAAM,EAAE,IAAT;AAAeN,YAAAA,MAAM,EAAE,eAAvB;AAAwCG,YAAAA,MAAM,EAANA;AAAxC,WAAD,CAAhB,CAAT;;AALD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOC,iBAAMV,GAAG,CAACE,SAAS,CAAC;AAACS,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBG,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CF,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAPD;AAAA;AAQC,iBAAMZ,GAAG,CAACI,eAAe,CAAC;AAACS,YAAAA,MAAM,EAAE;AAAT,WAAD,CAAhB,CAAT;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { apiKeyCreate, ApiKeyCreateFetch, apiKeys2FAModal } from '../actions';\n\nconst createOptions: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* apiKeyCreateSaga(action: ApiKeyCreateFetch) {\n    try {\n        const apiKey = yield call(API.post(createOptions), '/resource/api_keys', action.payload);\n        yield put(apiKeyCreate(apiKey));\n        yield put(alertPush({message: ['success.api_keys.created'], type: 'success'}));\n        yield put(apiKeys2FAModal({active: true, action: 'createSuccess', apiKey}));\n    } catch (error) {\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n        yield put(apiKeys2FAModal({active: false}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}