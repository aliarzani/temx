{"ast":null,"code":"\"use strict\";\n\nvar codes = require(\"./codes.json\");\n\nvar registeredLocales = {};\n/*\n * All codes map to ISO 3166-1 alpha-2\n */\n\nvar alpha2 = {},\n    alpha3 = {},\n    numeric = {},\n    invertedNumeric = {};\ncodes.forEach(function (codeInformation) {\n  var s = codeInformation;\n  alpha2[s[0]] = s[1];\n  alpha3[s[1]] = s[0];\n  numeric[s[2]] = s[0];\n  invertedNumeric[s[0]] = s[2];\n});\n\nfunction formatNumericCode(code) {\n  return String('000' + (code ? code : '')).slice(-3);\n}\n\nfunction registerLocale(localeData) {\n  if (!localeData.locale) {\n    throw new TypeError('Missing localeData.locale');\n  }\n\n  if (!localeData.countries) {\n    throw new TypeError('Missing localeData.countries');\n  }\n\n  registeredLocales[localeData.locale] = localeData.countries;\n}\n\nexports.registerLocale = registerLocale;\n/*\n * @param code Alpha-3 code\n * @return Alpha-2 code or undefined\n */\n\nfunction alpha3ToAlpha2(code) {\n  return alpha3[code];\n}\n\nexports.alpha3ToAlpha2 = alpha3ToAlpha2;\n/*\n * @param code Alpha-2 code\n * @return Alpha-3 code or undefined\n */\n\nfunction alpha2ToAlpha3(code) {\n  return alpha2[code];\n}\n\nexports.alpha2ToAlpha3 = alpha2ToAlpha3;\n/*\n * @param code Alpha-3 code\n * @return Numeric code or undefined\n */\n\nfunction alpha3ToNumeric(code) {\n  return invertedNumeric[alpha3ToAlpha2(code)];\n}\n\nexports.alpha3ToNumeric = alpha3ToNumeric;\n/*\n * @param code Alpha-2 code\n * @return Numeric code or undefined\n */\n\nfunction alpha2ToNumeric(code) {\n  return invertedNumeric[code];\n}\n\nexports.alpha2ToNumeric = alpha2ToNumeric;\n/*\n * @param code Numeric code\n * @return Alpha-3 code or undefined\n */\n\nfunction numericToAlpha3(code) {\n  var padded = formatNumericCode(code);\n  return alpha2ToAlpha3(numeric[padded]);\n}\n\nexports.numericToAlpha3 = numericToAlpha3;\n/*\n * @param code Numeric code\n * @return Alpha-2 code or undefined\n */\n\nfunction numericToAlpha2(code) {\n  var padded = formatNumericCode(code);\n  return numeric[padded];\n}\n\nexports.numericToAlpha2 = numericToAlpha2;\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-3\n */\n\nfunction toAlpha3(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha3(code);\n    }\n\n    if (code.length === 2) {\n      return alpha2ToAlpha3(code.toUpperCase());\n    }\n\n    if (code.length === 3) {\n      return code.toUpperCase();\n    }\n  }\n\n  if (typeof code === \"number\") {\n    return numericToAlpha3(code);\n  }\n\n  return undefined;\n}\n\nexports.toAlpha3 = toAlpha3;\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-2\n */\n\nfunction toAlpha2(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha2(code);\n    }\n\n    if (code.length === 2) {\n      return code.toUpperCase();\n    }\n\n    if (code.length === 3) {\n      return alpha3ToAlpha2(code.toUpperCase());\n    }\n  }\n\n  if (typeof code === \"number\") {\n    return numericToAlpha2(code);\n  }\n\n  return undefined;\n}\n\nexports.toAlpha2 = toAlpha2;\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @param lang language for country name\n * @return name or undefined\n */\n\nexports.getName = function (code, lang) {\n  try {\n    var d = registeredLocales[lang.toLowerCase()];\n    return d[toAlpha2(code)];\n  } catch (err) {\n    return undefined;\n  }\n};\n/*\n * @param lang language for country names\n * @return Object of country code mapped to county name\n */\n\n\nexports.getNames = function (lang) {\n  var d = registeredLocales[lang.toLowerCase()];\n\n  if (d === undefined) {\n    return {};\n  }\n\n  return d;\n};\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\n\n\nexports.getAlpha2Code = function (name, lang) {\n  try {\n    var p,\n        codenames = registeredLocales[lang.toLowerCase()];\n\n    for (p in codenames) {\n      if (codenames.hasOwnProperty(p)) {\n        if (codenames[p].toLowerCase() === name.toLowerCase()) {\n          return p;\n        }\n      }\n    }\n\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n/*\n * @return Object of alpha-2 codes mapped to alpha-3 codes\n */\n\n\nexports.getAlpha2Codes = function () {\n  return alpha2;\n};\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\n\n\nexports.getAlpha3Code = function (name, lang) {\n  var alpha2 = this.getAlpha2Code(name, lang);\n\n  if (alpha2) {\n    return this.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n/*\n * @return Object of alpha-3 codes mapped to alpha-2 codes\n */\n\n\nexports.getAlpha3Codes = function () {\n  return alpha3;\n};\n/*\n * @return Object of numeric codes mapped to alpha-2 codes\n */\n\n\nexports.getNumericCodes = function () {\n  return numeric;\n};\n/*\n * @return Array of supported languages\n */\n\n\nexports.langs = function () {\n  return Object.keys(registeredLocales);\n};\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return Boolean\n */\n\n\nexports.isValid = function (code) {\n  if (!code) {\n    return false;\n  }\n\n  var coerced = code.toString().toUpperCase();\n  return alpha3.hasOwnProperty(coerced) || alpha2.hasOwnProperty(coerced) || numeric.hasOwnProperty(coerced);\n};","map":null,"metadata":{},"sourceType":"script"}