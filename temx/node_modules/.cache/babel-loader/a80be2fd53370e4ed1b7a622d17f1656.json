{"ast":null,"code":"import _defineProperty from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/components/Beneficiaries/BeneficiariesActivateModal.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Button } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { CustomInput } from '../../components';\nimport { beneficiariesActivate, selectBeneficiariesActivateError, selectBeneficiariesActivateSuccess } from '../../modules';\nvar defaultState = {\n  confirmationModalCode: '',\n  confirmationModalCodeFocused: false\n}; // tslint:disable:jsx-no-lambda\n\nvar BeneficiariesActivateModalComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BeneficiariesActivateModalComponent, _React$Component);\n\n  function BeneficiariesActivateModalComponent(props) {\n    var _this;\n\n    _classCallCheck(this, BeneficiariesActivateModalComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BeneficiariesActivateModalComponent).call(this, props));\n\n    _this.renderConfirmationModalHeader = function () {\n      return React.createElement(\"div\", {\n        className: \"cr-email-form__options-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option-inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, _this.translate('page.body.wallets.beneficiaries.confirmationModal.header'), React.createElement(\"span\", {\n        className: \"pg-profile-page__close pg-profile-page__pull-right\",\n        onClick: _this.handleClickToggleConfirmationModal(true),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }))));\n    };\n\n    _this.renderConfirmationModalBodyItem = function (field, optional) {\n      var focusedClass = classnames('cr-email-form__group', {\n        'cr-email-form__group--focused': _this.state[\"\".concat(field, \"Focused\")],\n        'cr-email-form__group--optional': optional\n      });\n      return React.createElement(\"div\", {\n        key: field,\n        className: focusedClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"text\",\n        label: _this.translate(\"page.body.wallets.beneficiaries.confirmationModal.body.\".concat(field)),\n        placeholder: _this.translate(\"page.body.wallets.beneficiaries.confirmationModal.body.\".concat(field)),\n        defaultLabel: field,\n        handleChangeInput: function handleChangeInput(value) {\n          return _this.handleChangeFieldValue(field, value);\n        },\n        inputValue: _this.state[field],\n        handleFocusInput: function handleFocusInput() {\n          return _this.handleChangeFieldFocus(\"\".concat(field, \"Focused\"));\n        },\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderConfirmationModalBody = function () {\n      var confirmationModalCode = _this.state.confirmationModalCode;\n      var isDisabled = !confirmationModalCode;\n      return React.createElement(\"div\", {\n        className: \"cr-email-form__form-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"confirmation-modal__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"content-icon\",\n        className: \"confirmation-modal__content__icon\",\n        src: require('../../assets/images/LetterIcon.svg'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"confirmation-modal__content__text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, _this.translate('page.body.wallets.beneficiaries.confirmationModal.body.text'))), _this.renderConfirmationModalBodyItem('confirmationModalCode'), React.createElement(\"div\", {\n        className: \"cr-email-form__button-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Button, {\n        label: _this.translate('page.body.wallets.beneficiaries.confirmationModal.body.button'),\n        className: !isDisabled ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled',\n        disabled: isDisabled,\n        onClick: _this.handleSubmitConfirmationModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      })));\n    };\n\n    _this.handleChangeFieldValue = function (key, value) {\n      // @ts-ignore\n      _this.setState(_defineProperty({}, key, value));\n    };\n\n    _this.handleChangeFieldFocus = function (key) {\n      // @ts-ignore\n      _this.setState(function (prev) {\n        return _defineProperty({}, key, !prev[key]);\n      });\n    };\n\n    _this.handleClearModalsInputs = function () {\n      _this.setState(_objectSpread({}, defaultState));\n    };\n\n    _this.handleSubmitConfirmationModal = function () {\n      var beneficiariesAddData = _this.props.beneficiariesAddData;\n      var confirmationModalCode = _this.state.confirmationModalCode;\n\n      if (beneficiariesAddData) {\n        var payload = {\n          pin: confirmationModalCode,\n          id: beneficiariesAddData.id\n        };\n\n        _this.props.activateAddress(payload);\n      }\n    };\n\n    _this.handleClickToggleConfirmationModal = function (clear) {\n      return function () {\n        _this.props.handleToggleConfirmationModal();\n\n        if (clear) {\n          _this.handleClearModalsInputs();\n        }\n      };\n    };\n\n    _this.translate = function (id) {\n      return _this.props.intl.formatMessage({\n        id: id\n      });\n    };\n\n    _this.state = _objectSpread({}, defaultState);\n    return _this;\n  }\n\n  _createClass(BeneficiariesActivateModalComponent, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props = this.props,\n          beneficiariesActivateError = _this$props.beneficiariesActivateError,\n          beneficiariesActivateSuccess = _this$props.beneficiariesActivateSuccess;\n\n      if (nextProps.beneficiariesActivateError && !beneficiariesActivateError || nextProps.beneficiariesActivateSuccess && !beneficiariesActivateSuccess) {\n        this.props.handleToggleConfirmationModal();\n        this.handleClearModalsInputs();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"cr-modal beneficiaries-confirmation-modal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.renderConfirmationModalHeader(), this.renderConfirmationModalBody()));\n    }\n  }]);\n\n  return BeneficiariesActivateModalComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    beneficiariesActivateError: selectBeneficiariesActivateError(state),\n    beneficiariesActivateSuccess: selectBeneficiariesActivateSuccess(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    activateAddress: function activateAddress(payload) {\n      return dispatch(beneficiariesActivate(payload));\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nexport var BeneficiariesActivateModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BeneficiariesActivateModalComponent));","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/components/Beneficiaries/BeneficiariesActivateModal.tsx"],"names":["Button","classnames","React","injectIntl","connect","CustomInput","beneficiariesActivate","selectBeneficiariesActivateError","selectBeneficiariesActivateSuccess","defaultState","confirmationModalCode","confirmationModalCodeFocused","BeneficiariesActivateModalComponent","props","renderConfirmationModalHeader","translate","handleClickToggleConfirmationModal","renderConfirmationModalBodyItem","field","optional","focusedClass","state","value","handleChangeFieldValue","handleChangeFieldFocus","renderConfirmationModalBody","isDisabled","require","handleSubmitConfirmationModal","key","setState","prev","handleClearModalsInputs","beneficiariesAddData","payload","pin","id","activateAddress","clear","handleToggleConfirmationModal","intl","formatMessage","nextProps","beneficiariesActivateError","beneficiariesActivateSuccess","Component","mapStateToProps","mapDispatchToProps","dispatch","BeneficiariesActivateModal"],"mappings":"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","sourcesContent":["import { Button } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect, MapDispatchToProps } from 'react-redux';\nimport { CustomInput } from '../../components';\nimport {\n    beneficiariesActivate,\n    Beneficiary,\n    RootState,\n    selectBeneficiariesActivateError,\n    selectBeneficiariesActivateSuccess,\n} from '../../modules';\nimport { CommonError } from '../../modules/types';\n\ninterface ReduxProps {\n    beneficiariesActivateError?: CommonError;\n    beneficiariesActivateSuccess: boolean;\n}\n\ninterface DispatchProps {\n    activateAddress: typeof beneficiariesActivate;\n}\n\ninterface OwnProps {\n    beneficiariesAddData: Beneficiary;\n    handleToggleConfirmationModal: () => void;\n}\n\ninterface State {\n    confirmationModalCode: string;\n    confirmationModalCodeFocused: boolean;\n}\n\ntype Props = ReduxProps & DispatchProps & OwnProps & InjectedIntlProps;\n\nconst defaultState = {\n    confirmationModalCode: '',\n    confirmationModalCodeFocused: false,\n};\n\n// tslint:disable:jsx-no-lambda\nclass BeneficiariesActivateModalComponent extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            ...defaultState,\n        };\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        const {\n            beneficiariesActivateError,\n            beneficiariesActivateSuccess,\n        } = this.props;\n\n        if ((nextProps.beneficiariesActivateError && !beneficiariesActivateError) ||\n            (nextProps.beneficiariesActivateSuccess && !beneficiariesActivateSuccess)) {\n            this.props.handleToggleConfirmationModal();\n            this.handleClearModalsInputs();\n        }\n    }\n\n\n    public render() {\n        return (\n            <div className=\"cr-modal beneficiaries-confirmation-modal\">\n                <div className=\"cr-email-form\">\n                    {this.renderConfirmationModalHeader()}\n                    {this.renderConfirmationModalBody()}\n                </div>\n            </div>\n        );\n    }\n\n    private renderConfirmationModalHeader = () => {\n        return (\n            <div className=\"cr-email-form__options-group\">\n                <div className=\"cr-email-form__option\">\n                    <div className=\"cr-email-form__option-inner\">\n                        {this.translate('page.body.wallets.beneficiaries.confirmationModal.header')}\n                        <span\n                            className=\"pg-profile-page__close pg-profile-page__pull-right\"\n                            onClick={this.handleClickToggleConfirmationModal(true)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    private renderConfirmationModalBodyItem = (field: string, optional?: boolean) => {\n        const focusedClass = classnames('cr-email-form__group', {\n            'cr-email-form__group--focused': this.state[`${field}Focused`],\n            'cr-email-form__group--optional': optional,\n        });\n\n        return (\n            <div key={field} className={focusedClass}>\n                <CustomInput\n                    type=\"text\"\n                    label={this.translate(`page.body.wallets.beneficiaries.confirmationModal.body.${field}`)}\n                    placeholder={this.translate(`page.body.wallets.beneficiaries.confirmationModal.body.${field}`)}\n                    defaultLabel={field}\n                    handleChangeInput={value => this.handleChangeFieldValue(field, value)}\n                    inputValue={this.state[field]}\n                    handleFocusInput={() => this.handleChangeFieldFocus(`${field}Focused`)}\n                    classNameLabel=\"cr-email-form__label\"\n                    classNameInput=\"cr-email-form__input\"\n                    autoFocus={true}\n                />\n            </div>\n        );\n    }\n\n    private renderConfirmationModalBody = () => {\n        const { confirmationModalCode } = this.state;\n\n        const isDisabled = !confirmationModalCode;\n\n        return (\n            <div className=\"cr-email-form__form-content\">\n                <div className=\"confirmation-modal__content\">\n                    <img alt=\"content-icon\" className=\"confirmation-modal__content__icon\" src={require('../../assets/images/LetterIcon.svg')}/>\n                    <span className=\"confirmation-modal__content__text\">{this.translate('page.body.wallets.beneficiaries.confirmationModal.body.text')}</span>\n                </div>\n                {this.renderConfirmationModalBodyItem('confirmationModalCode')}\n                <div className=\"cr-email-form__button-wrapper\">\n                    <Button\n                        label={this.translate('page.body.wallets.beneficiaries.confirmationModal.body.button')}\n                        className={!isDisabled ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled'}\n                        disabled={isDisabled}\n                        onClick={this.handleSubmitConfirmationModal}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    private handleChangeFieldValue = (key: string, value: string) => {\n        // @ts-ignore\n        this.setState({\n            [key]: value,\n        });\n    }\n\n    private handleChangeFieldFocus = (key: string) => {\n        // @ts-ignore\n        this.setState(prev => ({\n            [key]: !prev[key],\n        }));\n    };\n\n    private handleClearModalsInputs = () => {\n        this.setState({\n            ...defaultState,\n        });\n    }\n\n    private handleSubmitConfirmationModal = () => {\n        const { beneficiariesAddData } = this.props;\n        const { confirmationModalCode } = this.state;\n\n        if (beneficiariesAddData) {\n            const payload = {\n                pin: confirmationModalCode,\n                id: beneficiariesAddData.id,\n            };\n\n            this.props.activateAddress(payload);\n        }\n    }\n\n    private handleClickToggleConfirmationModal = (clear?: boolean) => () => {\n        this.props.handleToggleConfirmationModal();\n\n        if (clear) {\n            this.handleClearModalsInputs();\n        }\n    }\n\n    private translate = (id: string) => this.props.intl.formatMessage({ id });\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    beneficiariesActivateError: selectBeneficiariesActivateError(state),\n    beneficiariesActivateSuccess: selectBeneficiariesActivateSuccess(state),\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = dispatch => ({\n    activateAddress: payload => dispatch(beneficiariesActivate(payload)),\n});\n\n// tslint:disable-next-line:no-any\nexport const BeneficiariesActivateModal = injectIntl(connect(mapStateToProps, mapDispatchToProps)(BeneficiariesActivateModalComponent) as any);\n"]},"metadata":{},"sourceType":"module"}