{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/components/EmailForm/index.tsx\";\nimport { Button } from '@openware/components';\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { CustomInput } from '../';\nimport { EMAIL_REGEX } from '../../helpers';\nexport var EmailForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EmailForm, _React$Component);\n\n  function EmailForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EmailForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EmailForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleCancel = function () {\n      _this.props.handleReturnBack();\n    };\n\n    _this.handleClick = function (label, e) {\n      if (e) {\n        e.preventDefault();\n      }\n\n      if (!_this.isValidForm()) {\n        _this.props.validateForm();\n      } else {\n        _this.handleSubmitForm();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(EmailForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          buttonLabel = _this$props.buttonLabel,\n          isLoading = _this$props.isLoading,\n          emailLabel = _this$props.emailLabel,\n          message = _this$props.message,\n          email = _this$props.email,\n          emailFocused = _this$props.emailFocused,\n          emailError = _this$props.emailError;\n      var emailGroupClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': emailFocused\n      });\n      return React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__options-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option-inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, title ? title : 'Forgot password', React.createElement(\"div\", {\n        className: \"cr-email-form__cros-icon\",\n        onClick: this.handleCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"close\",\n        src: require('./close.svg'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"cr-email-form__form-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, message), React.createElement(\"div\", {\n        className: emailGroupClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"email\",\n        label: emailLabel || 'Email',\n        placeholder: emailLabel || 'Email',\n        defaultLabel: \"Email\",\n        handleChangeInput: this.props.handleInputEmail,\n        inputValue: email,\n        handleFocusInput: this.props.handleFieldFocus,\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), emailError && React.createElement(\"div\", {\n        className: \"cr-email-form__error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, emailError)), React.createElement(\"div\", {\n        className: \"cr-email-form__button-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Button, {\n        label: isLoading ? 'Loading...' : buttonLabel ? buttonLabel : 'Send',\n        type: \"submit\",\n        className: email ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled',\n        disabled: isLoading || !email.match(EMAIL_REGEX),\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"handleSubmitForm\",\n    value: function handleSubmitForm() {\n      this.props.OnSubmit();\n    }\n  }, {\n    key: \"isValidForm\",\n    value: function isValidForm() {\n      var email = this.props.email;\n      var isEmailValid = email.match(EMAIL_REGEX);\n      return email && isEmailValid;\n    }\n  }]);\n\n  return EmailForm;\n}(React.Component);","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/components/EmailForm/index.tsx"],"names":["Button","cr","React","CustomInput","EMAIL_REGEX","EmailForm","handleCancel","props","handleReturnBack","handleClick","label","e","preventDefault","isValidForm","validateForm","handleSubmitForm","title","buttonLabel","isLoading","emailLabel","message","email","emailFocused","emailError","emailGroupClass","require","handleInputEmail","handleFieldFocus","match","OnSubmit","isEmailValid","Component"],"mappings":"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","sourcesContent":["import { Button } from '@openware/components';\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { CustomInput } from '../';\nimport { EMAIL_REGEX } from '../../helpers';\n\nexport interface EmailFormProps {\n    title?: string;\n    buttonLabel?: string;\n    errorMessage?: string;\n    isLoading?: boolean;\n    OnSubmit: () => void;\n    className?: string;\n    emailLabel?: string;\n    email: string;\n    message: string;\n    emailError: string;\n    emailFocused: boolean;\n    placeholder?: string;\n    validateForm: () => void;\n    handleInputEmail: (value: string) => void;\n    handleFieldFocus: () => void;\n    handleReturnBack: () => void;\n}\n\nexport class EmailForm extends React.Component<EmailFormProps> {\n    public render() {\n        const {\n            title,\n            buttonLabel,\n            isLoading,\n            emailLabel,\n            message,\n            email,\n            emailFocused,\n            emailError,\n        } = this.props;\n        const emailGroupClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': emailFocused,\n        });\n        return (\n            <form>\n                <div className=\"cr-email-form\">\n                    <div className=\"cr-email-form__options-group\">\n                        <div className=\"cr-email-form__option\">\n                            <div className=\"cr-email-form__option-inner\">\n                                {title ? title : 'Forgot password'}\n                                <div className=\"cr-email-form__cros-icon\" onClick={this.handleCancel}>\n                                    <img alt=\"close\" src={require('./close.svg')}/>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"cr-email-form__form-content\">\n                        <div className=\"cr-email-form__header\">\n                          {message}\n                        </div>\n                        <div className={emailGroupClass}>\n                            <CustomInput\n                                type=\"email\"\n                                label={emailLabel || 'Email'}\n                                placeholder={emailLabel || 'Email'}\n                                defaultLabel=\"Email\"\n                                handleChangeInput={this.props.handleInputEmail}\n                                inputValue={email}\n                                handleFocusInput={this.props.handleFieldFocus}\n                                classNameLabel=\"cr-email-form__label\"\n                                classNameInput=\"cr-email-form__input\"\n                                autoFocus={true}\n                            />\n                            {emailError && <div className=\"cr-email-form__error\">{emailError}</div>}\n                        </div>\n                        <div className=\"cr-email-form__button-wrapper\">\n                            <Button\n                                label={isLoading ? 'Loading...' : buttonLabel ? buttonLabel : 'Send'}\n                                type=\"submit\"\n                                className={email ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled'}\n                                disabled={isLoading || !email.match(EMAIL_REGEX)}\n                                onClick={this.handleClick}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n\n    private handleCancel = () => {\n        this.props.handleReturnBack();\n    }\n\n    private handleSubmitForm() {\n        this.props.OnSubmit();\n    }\n\n    private isValidForm() {\n        const { email } = this.props;\n        const isEmailValid = email.match(EMAIL_REGEX);\n\n        return email && isEmailValid;\n    }\n\n    private handleClick = (label?: string, e?: React.FormEvent<HTMLInputElement>) => {\n        if (e) {\n            e.preventDefault();\n        }\n        if (!this.isValidForm()) {\n            this.props.validateForm();\n        } else {\n            this.handleSubmitForm();\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}