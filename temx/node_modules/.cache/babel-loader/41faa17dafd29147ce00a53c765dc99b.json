{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/components/Grid/index.tsx\";\nimport { GridItem } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\n/* tslint:disable-next-line */\n\nvar _require = require('react-grid-layout'),\n    WidthProvider = _require.WidthProvider,\n    Responsive = _require.Responsive;\n\nvar ReactGridLayout = WidthProvider(Responsive);\n/* tslint:disable jsx-no-multiline-js */\n\nvar generateChildren = function generateChildren(children, layouts) {\n  return (children || layouts.lg).map(function (child) {\n    return React.createElement(\"div\", {\n      key: child.i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, child.title ? React.createElement(GridItem, {\n      title: child.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, child.render ? child.render() : \"Child Body \".concat(child.i)) : React.createElement(GridItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, child.render ? child.render() : \"Child Body \".concat(child.i)));\n  });\n};\n\nexport var Grid = function Grid(props) {\n  var children = props.children,\n      className = props.className,\n      draggableHandle = props.draggableHandle,\n      rowHeight = props.rowHeight,\n      breakpoints = props.breakpoints,\n      cols = props.cols,\n      layouts = props.layouts,\n      onLayoutChange = props.onLayoutChange,\n      handleResize = props.handleResize;\n  var cx = classnames('cr-grid', className);\n  var margin = 5;\n  return React.createElement(\"div\", {\n    \"data-react-toolbox\": \"grid\",\n    className: cx,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"cr-grid__grid-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(ReactGridLayout, {\n    breakpoints: breakpoints,\n    cols: cols,\n    draggableHandle: draggableHandle,\n    rowHeight: rowHeight,\n    layouts: layouts,\n    onLayoutChange: onLayoutChange,\n    margin: [margin, margin],\n    onResize: handleResize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, generateChildren(children, layouts))));\n};","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/components/Grid/index.tsx"],"names":["GridItem","classnames","React","require","WidthProvider","Responsive","ReactGridLayout","generateChildren","children","layouts","lg","map","child","i","title","render","Grid","props","className","draggableHandle","rowHeight","breakpoints","cols","onLayoutChange","handleResize","cx","margin"],"mappings":";AAAA,SAASA,QAAT,QAAwC,sBAAxC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA;;eACsCC,OAAO,CAAC,mBAAD,C;IAArCC,a,YAAAA,a;IAAeC,U,YAAAA,U;;AA0EvB,IAAMC,eAAe,GAAGF,aAAa,CAACC,UAAD,CAArC;AAEA;;AACA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAkCC,OAAlC,EAA0D;AAC/E,SAAO,CAACD,QAAQ,IAAIC,OAAO,CAACC,EAArB,EAAyBC,GAAzB,CAA6B,UAACC,KAAD;AAAA,WAChC;AAAK,MAAA,GAAG,EAAEA,KAAK,CAACC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,KAAK,CAACE,KAAN,GAAc,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEF,KAAK,CAACE,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BF,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACG,MAAN,EAAf,wBAA8CH,KAAK,CAACC,CAApD,CAA/B,CAAd,GACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAWD,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACG,MAAN,EAAf,wBAA8CH,KAAK,CAACC,CAApD,CAAX,CAFN,CADgC;AAAA,GAA7B,CAAP;AAMH,CAPD;;AASA,OAAO,IAAMG,IAAwC,GAAG,SAA3CA,IAA2C,CAAAC,KAAK,EAAI;AAAA,MAEzDT,QAFyD,GAWzDS,KAXyD,CAEzDT,QAFyD;AAAA,MAGzDU,SAHyD,GAWzDD,KAXyD,CAGzDC,SAHyD;AAAA,MAIzDC,eAJyD,GAWzDF,KAXyD,CAIzDE,eAJyD;AAAA,MAKzDC,SALyD,GAWzDH,KAXyD,CAKzDG,SALyD;AAAA,MAMzDC,WANyD,GAWzDJ,KAXyD,CAMzDI,WANyD;AAAA,MAOzDC,IAPyD,GAWzDL,KAXyD,CAOzDK,IAPyD;AAAA,MAQzDb,OARyD,GAWzDQ,KAXyD,CAQzDR,OARyD;AAAA,MASzDc,cATyD,GAWzDN,KAXyD,CASzDM,cATyD;AAAA,MAUzDC,YAVyD,GAWzDP,KAXyD,CAUzDO,YAVyD;AAY7D,MAAMC,EAAE,GAAGxB,UAAU,CAAC,SAAD,EAAYiB,SAAZ,CAArB;AACA,MAAMQ,MAAM,GAAG,CAAf;AACA,SACI;AAAK,0BAAmB,MAAxB;AAA+B,IAAA,SAAS,EAAED,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AACE,IAAA,WAAW,EAAEJ,WADf;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,eAAe,EAAEH,eAHnB;AAIE,IAAA,SAAS,EAAEC,SAJb;AAKE,IAAA,OAAO,EAAEX,OALX;AAME,IAAA,cAAc,EAAEc,cANlB;AAOE,IAAA,MAAM,EAAE,CAACG,MAAD,EAASA,MAAT,CAPV;AAQE,IAAA,QAAQ,EAAEF,YARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKjB,gBAAgB,CAACC,QAAD,EAAWC,OAAX,CAVrB,CADJ,CADJ,CADJ;AAkBH,CAhCM","sourcesContent":["import { GridItem, GridItemProps } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\n\n/* tslint:disable-next-line */\nconst { WidthProvider, Responsive } = require('react-grid-layout');\n\nexport interface GridGeneralInterface {\n    lg: number;\n    md: number;\n    sm: number;\n    xs: number;\n    xxs: number;\n}\n\nexport interface LayoutGridGeneralInterface {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    i: string;\n}\n\nexport interface LayoutGrid {\n    lg: LayoutGridGeneralInterface[];\n    md: LayoutGridGeneralInterface[];\n    sm: LayoutGridGeneralInterface[];\n}\n\nexport interface GridChildInterface {\n    i: number;\n    render: () => React.ReactNode | GridChildInterface;\n    title?: string;\n}\n\nexport interface GridProps {\n    /**\n     * Property with breakpoints for Grid component\n     */\n    breakpoints: GridGeneralInterface;\n    /**\n     * Property for children nodes for Grid component. These nodes are GridItems\n     */\n    children: GridChildInterface[];\n    /**\n     * Additional class name. By default element receives `cr-grid` class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * Property with cols for Grid component\n     */\n    cols: GridGeneralInterface;\n    /**\n     * Array of layouts of objects for Grid component\n     */\n    layouts: LayoutGrid;\n    /**\n     * Function for getting event of changing layout\n     */\n    onLayoutChange: (layout, layouts) => void;\n    /**\n     * Value for rowHeight for Grid Component\n     */\n    rowHeight: number;\n    /**\n     * A CSS selector for elements that will act as the draggable handle\n     */\n    draggableHandle?: string;\n    handleResize?: (\n        layout: LayoutGrid,\n        oldItem: React.FunctionComponent<GridItemProps>,\n        newItem: React.FunctionComponent<GridItemProps>,\n        placeholder: React.FunctionComponent<GridItemProps>,\n        e: React.MouseEvent,\n        element: HTMLElement,\n    ) => void;\n}\n\nconst ReactGridLayout = WidthProvider(Responsive);\n\n/* tslint:disable jsx-no-multiline-js */\nconst generateChildren = (children: GridProps['children'], layouts: LayoutGrid) => {\n    return (children || layouts.lg).map((child: GridChildInterface) => (\n        <div key={child.i}>\n            {child.title ? <GridItem title={child.title}>{child.render ? child.render() : `Child Body ${child.i}`}</GridItem>\n            : <GridItem>{child.render ? child.render() : `Child Body ${child.i}`}</GridItem>}\n        </div>\n    ));\n};\n\nexport const Grid: React.FunctionComponent<GridProps> = props => {\n    const {\n        children,\n        className,\n        draggableHandle,\n        rowHeight,\n        breakpoints,\n        cols,\n        layouts,\n        onLayoutChange,\n        handleResize,\n    } = props;\n    const cx = classnames('cr-grid', className);\n    const margin = 5;\n    return (\n        <div data-react-toolbox=\"grid\" className={cx}>\n            <div className=\"cr-grid__grid-wrapper\">\n                <ReactGridLayout\n                  breakpoints={breakpoints}\n                  cols={cols}\n                  draggableHandle={draggableHandle}\n                  rowHeight={rowHeight}\n                  layouts={layouts}\n                  onLayoutChange={onLayoutChange}\n                  margin={[margin, margin]}\n                  onResize={handleResize}\n                >\n                    {generateChildren(children, layouts)}\n                </ReactGridLayout>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}