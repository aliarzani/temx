{"ast":null,"code":"import _defineProperty from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/Order/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Loader } from '@openware/components';\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Order } from '../../components';\nimport { alertPush, selectCurrentPrice, selectDepthAsks, selectDepthBids, selectUserLoggedIn, selectWallets, setCurrentPrice as _setCurrentPrice, walletsFetch } from '../../modules';\nimport { selectCurrentMarket, selectMarketTickers } from '../../modules/public/markets';\nimport { orderExecuteFetch, selectOrderExecuteLoading } from '../../modules/user/orders';\n\nvar OrderInsert =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(OrderInsert, _React$PureComponent);\n\n  function OrderInsert(props) {\n    var _this;\n\n    _classCallCheck(this, OrderInsert);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrderInsert).call(this, props));\n    _this.getOrderTypes = [_this.props.intl.formatMessage({\n      id: 'page.body.trade.header.newOrder.content.orderType.limit'\n    }), _this.props.intl.formatMessage({\n      id: 'page.body.trade.header.newOrder.content.orderType.market'\n    })];\n    _this.orderRef = void 0;\n\n    _this.handleSubmit = function (value) {\n      var currentMarket = _this.props.currentMarket;\n\n      if (!currentMarket) {\n        return;\n      }\n\n      var amount = value.amount,\n          available = value.available,\n          orderType = value.orderType,\n          price = value.price,\n          type = value.type;\n\n      _this.props.setCurrentPrice();\n\n      var resultData = {\n        market: currentMarket.id,\n        side: type,\n        volume: amount.toString(),\n        ord_type: orderType.toLowerCase()\n      };\n      var order = orderType === 'Limit' ? _objectSpread({}, resultData, {\n        price: price.toString()\n      }) : resultData;\n      var orderAllowed = true;\n\n      if (+resultData.volume < +currentMarket.min_amount) {\n        _this.props.pushAlert({\n          message: [_this.props.intl.formatMessage({\n            id: 'error.order.create.minAmount'\n          }, {\n            amount: currentMarket.min_amount,\n            currency: currentMarket.base_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (+price < +currentMarket.min_price) {\n        _this.props.pushAlert({\n          message: [_this.props.intl.formatMessage({\n            id: 'error.order.create.minPrice'\n          }, {\n            price: currentMarket.min_price,\n            currency: currentMarket.quote_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (+currentMarket.max_price && +price > +currentMarket.max_price) {\n        _this.props.pushAlert({\n          message: [_this.props.intl.formatMessage({\n            id: 'error.order.create.maxPrice'\n          }, {\n            price: currentMarket.max_price,\n            currency: currentMarket.quote_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (+available < +amount * +price && order.side === 'buy' || +available < +amount && order.side === 'sell') {\n        _this.props.pushAlert({\n          message: [_this.props.intl.formatMessage({\n            id: 'error.order.create.available'\n          }, {\n            available: available,\n            currency: order.side === 'buy' ? currentMarket.quote_unit.toUpperCase() : currentMarket.base_unit.toUpperCase()\n          })],\n          type: 'error'\n        });\n\n        orderAllowed = false;\n      }\n\n      if (orderAllowed) {\n        _this.props.orderExecute(order);\n      }\n    };\n\n    _this.getOrderType = function (index, label) {\n      _this.setState({\n        orderSide: label.toLowerCase()\n      });\n    };\n\n    _this.listenInputPrice = function () {\n      _this.setState({\n        priceLimit: undefined\n      });\n\n      _this.props.setCurrentPrice();\n    };\n\n    _this.state = {\n      orderSide: 'buy',\n      priceLimit: undefined,\n      width: 0\n    };\n    _this.orderRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(OrderInsert, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.orderRef.current && this.state.width !== this.orderRef.current.clientWidth) {\n        this.setState({\n          width: this.orderRef.current.clientWidth\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var _this$props = this.props,\n          userLoggedIn = _this$props.userLoggedIn,\n          accountWallets = _this$props.accountWallets;\n\n      if (userLoggedIn && (!next.wallets || next.wallets.length === 0)) {\n        accountWallets();\n      }\n\n      if (+next.currentPrice && next.currentPrice !== this.state.priceLimit) {\n        this.setState({\n          priceLimit: +next.currentPrice\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          executeLoading = _this$props2.executeLoading,\n          marketTickers = _this$props2.marketTickers,\n          currentMarket = _this$props2.currentMarket,\n          wallets = _this$props2.wallets,\n          asks = _this$props2.asks,\n          bids = _this$props2.bids;\n\n      if (!currentMarket) {\n        return null;\n      }\n\n      var priceLimit = this.state.priceLimit;\n      var walletBase = this.getWallet(currentMarket.base_unit, wallets);\n      var walletQuote = this.getWallet(currentMarket.quote_unit, wallets);\n      var to = currentMarket.base_unit;\n      var from = currentMarket.quote_unit;\n      var currentTicker = marketTickers[currentMarket.id];\n      var defaultCurrentTicker = {\n        last: '0'\n      };\n      var headerContent = React.createElement(\"div\", {\n        className: \"cr-table-header__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-title-component\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.trade.header.newOrder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })));\n      return React.createElement(\"div\", {\n        className: 'pg-order',\n        ref: this.orderRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, this.state.width > 448 ? headerContent : undefined, React.createElement(Order, {\n        asks: asks,\n        bids: bids,\n        disabled: executeLoading,\n        from: from,\n        availableBase: this.getAvailableValue(walletBase),\n        availableQuote: this.getAvailableValue(walletQuote),\n        onSubmit: this.handleSubmit,\n        priceMarketBuy: Number((currentTicker || defaultCurrentTicker).last),\n        priceMarketSell: Number((currentTicker || defaultCurrentTicker).last),\n        priceLimit: priceLimit,\n        to: to,\n        handleSendType: this.getOrderType,\n        orderTypes: this.getOrderTypes,\n        currentMarketAskPrecision: currentMarket.amount_precision,\n        currentMarketBidPrecision: currentMarket.price_precision,\n        amountText: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.amount'\n        }),\n        availableText: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.available'\n        }),\n        orderTypeText: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.orderType'\n        }),\n        priceText: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.price'\n        }),\n        totalText: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.total'\n        }),\n        labelFirst: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.tabs.buy'\n        }),\n        labelSecond: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.tabs.sell'\n        }),\n        submitBuyButtonText: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.tabs.buy'\n        }),\n        submitSellButtonText: this.props.intl.formatMessage({\n          id: 'page.body.trade.header.newOrder.content.tabs.sell'\n        }),\n        width: this.state.width,\n        listenInputPrice: this.listenInputPrice,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), executeLoading && React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"getWallet\",\n    value: function getWallet(currency, wallets) {\n      var currencyLower = currency.toLowerCase();\n      return wallets.find(function (w) {\n        return w.currency === currencyLower;\n      });\n    }\n  }, {\n    key: \"getAvailableValue\",\n    value: function getAvailableValue(wallet) {\n      return wallet ? wallet.balance : 0;\n    }\n  }]);\n\n  return OrderInsert;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    bids: selectDepthBids(state),\n    asks: selectDepthAsks(state),\n    currentMarket: selectCurrentMarket(state),\n    executeLoading: selectOrderExecuteLoading(state),\n    marketTickers: selectMarketTickers(state),\n    wallets: selectWallets(state),\n    currentPrice: selectCurrentPrice(state),\n    userLoggedIn: selectUserLoggedIn(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    accountWallets: function accountWallets() {\n      return dispatch(walletsFetch());\n    },\n    orderExecute: function orderExecute(payload) {\n      return dispatch(orderExecuteFetch(payload));\n    },\n    pushAlert: function pushAlert(payload) {\n      return dispatch(alertPush(payload));\n    },\n    setCurrentPrice: function setCurrentPrice(payload) {\n      return dispatch(_setCurrentPrice(payload));\n    }\n  };\n}; // tslint:disable-next-line no-any\n\n\nvar OrderComponent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OrderInsert));\nexport { OrderComponent };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/Order/index.tsx"],"names":["Loader","React","FormattedMessage","injectIntl","connect","Order","alertPush","selectCurrentPrice","selectDepthAsks","selectDepthBids","selectUserLoggedIn","selectWallets","setCurrentPrice","walletsFetch","selectCurrentMarket","selectMarketTickers","orderExecuteFetch","selectOrderExecuteLoading","OrderInsert","props","getOrderTypes","intl","formatMessage","id","orderRef","handleSubmit","value","currentMarket","amount","available","orderType","price","type","resultData","market","side","volume","toString","ord_type","toLowerCase","order","orderAllowed","min_amount","pushAlert","message","currency","base_unit","toUpperCase","min_price","quote_unit","max_price","orderExecute","getOrderType","index","label","setState","orderSide","listenInputPrice","priceLimit","undefined","state","width","createRef","current","clientWidth","next","userLoggedIn","accountWallets","wallets","length","currentPrice","executeLoading","marketTickers","asks","bids","walletBase","getWallet","walletQuote","to","from","currentTicker","defaultCurrentTicker","last","headerContent","getAvailableValue","Number","amount_precision","price_precision","currencyLower","find","w","wallet","balance","PureComponent","mapStateToProps","mapDispatchToProps","dispatch","payload","OrderComponent"],"mappings":"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","sourcesContent":["import { Loader } from '@openware/components';\nimport * as React from 'react';\nimport {\n    FormattedMessage,\n    InjectedIntlProps,\n    injectIntl,\n} from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Order, OrderProps, WalletItemProps } from '../../components';\nimport {\n    alertPush,\n    RootState,\n    selectCurrentPrice,\n    selectDepthAsks,\n    selectDepthBids,\n    selectUserLoggedIn,\n    selectWallets,\n    setCurrentPrice,\n    Wallet, walletsFetch,\n} from '../../modules';\nimport { Market, selectCurrentMarket, selectMarketTickers } from '../../modules/public/markets';\nimport {\n    orderExecuteFetch,\n    selectOrderExecuteLoading,\n} from '../../modules/user/orders';\n\ninterface ReduxProps {\n    currentMarket: Market | undefined;\n    executeLoading: boolean;\n    marketTickers: {\n        [key: string]: {\n            last: string;\n        },\n    };\n    bids: string[][];\n    asks: string[][];\n    wallets: WalletItemProps[];\n    currentPrice: number | undefined;\n}\n\ninterface StoreProps {\n    orderSide: string;\n    priceLimit: number | undefined;\n    width: number;\n}\n\ninterface DispatchProps {\n    accountWallets: typeof walletsFetch;\n    setCurrentPrice: typeof setCurrentPrice;\n    orderExecute: typeof orderExecuteFetch;\n    pushAlert: typeof alertPush;\n}\n\ntype Props = ReduxProps & DispatchProps & InjectedIntlProps;\n\nclass OrderInsert extends React.PureComponent<Props, StoreProps> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            orderSide: 'buy',\n            priceLimit: undefined,\n            width: 0,\n        };\n\n        this.orderRef = React.createRef();\n    }\n\n    private getOrderTypes = [\n        this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.orderType.limit' }),\n        this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.orderType.market' }),\n    ];\n\n    private orderRef;\n\n    public componentDidUpdate() {\n        if (this.orderRef.current && this.state.width !== this.orderRef.current.clientWidth) {\n            this.setState({\n                width: this.orderRef.current.clientWidth,\n            });\n        }\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        const {userLoggedIn, accountWallets} = this.props;\n        if (userLoggedIn && (!next.wallets || next.wallets.length === 0)) {\n            accountWallets();\n        }\n        if (+next.currentPrice && next.currentPrice !== this.state.priceLimit) {\n            this.setState({\n                priceLimit: +next.currentPrice,\n            });\n        }\n    }\n\n    public render() {\n        const { executeLoading, marketTickers, currentMarket, wallets, asks, bids } = this.props;\n        if (!currentMarket) {\n            return null;\n        }\n        const { priceLimit } = this.state;\n\n        const walletBase = this.getWallet(currentMarket.base_unit, wallets);\n        const walletQuote = this.getWallet(currentMarket.quote_unit, wallets);\n\n        const to = currentMarket.base_unit;\n        const from = currentMarket.quote_unit;\n\n        const currentTicker = marketTickers[currentMarket.id];\n        const defaultCurrentTicker = { last: '0' };\n        const headerContent = (\n            <div className=\"cr-table-header__content\">\n                <div className=\"cr-title-component\"><FormattedMessage id=\"page.body.trade.header.newOrder\" /></div>\n            </div>\n        );\n        return (\n\n            <div className={'pg-order'} ref={this.orderRef}>\n                {this.state.width > 448 ? headerContent : undefined}\n                <Order\n                    asks={asks}\n                    bids={bids}\n                    disabled={executeLoading}\n                    from={from}\n                    availableBase={this.getAvailableValue(walletBase)}\n                    availableQuote={this.getAvailableValue(walletQuote)}\n                    onSubmit={this.handleSubmit}\n                    priceMarketBuy={Number((currentTicker || defaultCurrentTicker).last)}\n                    priceMarketSell={Number((currentTicker || defaultCurrentTicker).last)}\n                    priceLimit={priceLimit}\n                    to={to}\n                    handleSendType={this.getOrderType}\n                    orderTypes={this.getOrderTypes}\n                    currentMarketAskPrecision={currentMarket.amount_precision}\n                    currentMarketBidPrecision={currentMarket.price_precision}\n                    amountText={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.amount' })}\n                    availableText={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.available' })}\n                    orderTypeText={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.orderType' })}\n                    priceText={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.price' })}\n                    totalText={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.total' })}\n                    labelFirst={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.tabs.buy' })}\n                    labelSecond={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.tabs.sell' })}\n                    submitBuyButtonText={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.tabs.buy' })}\n                    submitSellButtonText={this.props.intl.formatMessage({ id: 'page.body.trade.header.newOrder.content.tabs.sell' })}\n                    width={this.state.width}\n                    listenInputPrice={this.listenInputPrice}\n                />\n                {executeLoading && <Loader />}\n            </div>\n        );\n    }\n\n    private handleSubmit = (value: OrderProps) => {\n        const { currentMarket } = this.props;\n\n        if (!currentMarket) {\n            return;\n        }\n\n        const {\n            amount,\n            available,\n            orderType,\n            price,\n            type,\n        } = value;\n\n        this.props.setCurrentPrice();\n\n        const resultData = {\n            market: currentMarket.id,\n            side: type,\n            volume: amount.toString(),\n            ord_type: (orderType as string).toLowerCase(),\n        };\n\n        const order = orderType === 'Limit' ? { ...resultData, price: price.toString() } : resultData;\n        let orderAllowed = true;\n\n        if (+resultData.volume < +currentMarket.min_amount) {\n            this.props.pushAlert({\n                message: [this.props.intl.formatMessage(\n                    { id: 'error.order.create.minAmount' },\n                    { amount: currentMarket.min_amount, currency: currentMarket.base_unit.toUpperCase()},\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if (+price < +currentMarket.min_price) {\n            this.props.pushAlert({\n                message: [this.props.intl.formatMessage(\n                    { id: 'error.order.create.minPrice' },\n                    { price: currentMarket.min_price, currency: currentMarket.quote_unit.toUpperCase()},\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if (+currentMarket.max_price && +price > +currentMarket.max_price) {\n            this.props.pushAlert({\n                message: [this.props.intl.formatMessage(\n                    { id: 'error.order.create.maxPrice' },\n                    { price: currentMarket.max_price, currency: currentMarket.quote_unit.toUpperCase()},\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if ((+available < (+amount * +price) && order.side === 'buy') ||\n            (+available < +amount && order.side === 'sell')) {\n            this.props.pushAlert({\n                message: [this.props.intl.formatMessage(\n                    { id: 'error.order.create.available' },\n                    { available: available, currency: order.side === 'buy' ?\n                        currentMarket.quote_unit.toUpperCase() :\n                        currentMarket.base_unit.toUpperCase(),\n                    },\n                )],\n                type: 'error',\n            });\n\n            orderAllowed = false;\n        }\n\n        if (orderAllowed) {\n            this.props.orderExecute(order);\n        }\n    };\n\n    private getWallet(currency: string, wallets: WalletItemProps[]) {\n        const currencyLower = currency.toLowerCase();\n        return wallets.find(w => w.currency === currencyLower) as Wallet;\n    }\n\n    private getOrderType = (index: number, label: string) => {\n        this.setState({\n            orderSide: label.toLowerCase(),\n        });\n    }\n\n    private getAvailableValue(wallet: Wallet | undefined) {\n        return wallet ? wallet.balance : 0;\n    }\n\n    private listenInputPrice = () => {\n        this.setState({\n            priceLimit: undefined,\n        });\n        this.props.setCurrentPrice();\n    }\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    bids: selectDepthBids(state),\n    asks: selectDepthAsks(state),\n    currentMarket: selectCurrentMarket(state),\n    executeLoading: selectOrderExecuteLoading(state),\n    marketTickers: selectMarketTickers(state),\n    wallets: selectWallets(state),\n    currentPrice: selectCurrentPrice(state),\n    userLoggedIn: selectUserLoggedIn(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    accountWallets: () => dispatch(walletsFetch()),\n    orderExecute: payload => dispatch(orderExecuteFetch(payload)),\n    pushAlert: payload => dispatch(alertPush(payload)),\n    setCurrentPrice: payload => dispatch(setCurrentPrice(payload)),\n});\n\n// tslint:disable-next-line no-any\nconst OrderComponent = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OrderInsert as any)) as any;\n\nexport {\n    OrderComponent,\n};\n"]},"metadata":{},"sourceType":"module"}