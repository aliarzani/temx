{"ast":null,"code":"import _slicedToArray from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/OrderBook/index.tsx\";\nimport { CombinedOrderBook, Decimal, Loader } from '@openware/components';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { accumulateVolume, calcMaxVolume, sortAsks, sortBids } from '../../helpers';\nimport { selectCurrentMarket, selectCurrentPrice, selectDepthAsks, selectDepthBids, selectDepthLoading, selectMarketTickers, setCurrentPrice as _setCurrentPrice } from '../../modules';\n// render big/small breakpoint\nvar breakpoint = 448;\n\nvar OrderBookContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(OrderBookContainer, _React$Component);\n\n  function OrderBookContainer(props) {\n    var _this;\n\n    _classCallCheck(this, OrderBookContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrderBookContainer).call(this, props));\n    _this.orderRef = void 0;\n\n    _this.orderBook = function (bids, asks) {\n      var isLarge = _this.state.width > breakpoint;\n      var asksData = isLarge ? asks : asks.slice(0).reverse();\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: 'cr-table-header__content',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, _this.props.intl.formatMessage({\n        id: 'page.body.trade.orderbook'\n      })), React.createElement(CombinedOrderBook, {\n        maxVolume: calcMaxVolume(bids, asks),\n        orderBookEntryAsks: accumulateVolume(asks),\n        orderBookEntryBids: accumulateVolume(bids),\n        rowBackgroundColorAsks: 'rgba(232, 94, 89, 0.4)',\n        rowBackgroundColorBids: 'rgba(84, 180, 137, 0.4)',\n        dataAsks: _this.renderOrderBook(asksData, 'asks', _this.props.intl.formatMessage({\n          id: 'page.noDataToShow'\n        }), _this.props.currentMarket),\n        dataBids: _this.renderOrderBook(bids, 'bids', _this.props.intl.formatMessage({\n          id: 'page.noDataToShow'\n        }), _this.props.currentMarket),\n        headers: _this.renderHeaders(),\n        lastPrice: _this.lastPrice(),\n        onSelectAsks: _this.handleOnSelectAsks,\n        onSelectBids: _this.handleOnSelectBids,\n        isLarge: isLarge,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    };\n\n    _this.lastPrice = function () {\n      var _this$props = _this.props,\n          marketTickers = _this$props.marketTickers,\n          currentMarket = _this$props.currentMarket;\n      var defaultTicker = {\n        last: 0,\n        price_change_percent: '+0.00%'\n      };\n\n      if (currentMarket && marketTickers[currentMarket.id] && marketTickers[currentMarket.id].price_change_percent) {\n        var cn = classNames('', {\n          'cr-combined-order-book__market-negative': (marketTickers[currentMarket.id] || defaultTicker).price_change_percent.includes('-'),\n          'cr-combined-order-book__market-positive': (marketTickers[currentMarket.id] || defaultTicker).price_change_percent.includes('+')\n        });\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: cn,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, Decimal.format(Number((marketTickers[currentMarket.id] || defaultTicker).last), currentMarket.price_precision), \" \", currentMarket.quote_unit.toUpperCase()), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, _this.props.intl.formatMessage({\n          id: 'page.body.trade.orderbook.lastMarket'\n        })));\n      } else {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: 'cr-combined-order-book__market-negative',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"0\"), React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, _this.props.intl.formatMessage({\n          id: 'page.body.trade.orderbook.lastMarket'\n        })));\n      }\n    };\n\n    _this.renderHeaders = function () {\n      var _this$props2 = _this.props,\n          intl = _this$props2.intl,\n          currentMarket = _this$props2.currentMarket;\n      return [\"\".concat(intl.formatMessage({\n        id: 'page.body.trade.orderbook.header.price'\n      }), \"\\n(\").concat(currentMarket && currentMarket.quote_unit.toUpperCase(), \")\"), \"\".concat(intl.formatMessage({\n        id: 'page.body.trade.orderbook.header.amount'\n      }), \"\\n(\").concat(currentMarket && currentMarket.base_unit.toUpperCase(), \")\"), \"\".concat(intl.formatMessage({\n        id: 'page.body.trade.orderbook.header.volume'\n      }), \"\\n(\").concat(currentMarket && currentMarket.base_unit.toUpperCase(), \")\")];\n    };\n\n    _this.renderOrderBook = function (array, side, message, currentMarket) {\n      var total = accumulateVolume(array);\n      var isLarge = _this.state.width > breakpoint;\n      var priceFixed = currentMarket ? currentMarket.price_precision : 0;\n      var amountFixed = currentMarket ? currentMarket.amount_precision : 0;\n      return array.length > 0 ? array.map(function (item, i) {\n        var _item = _slicedToArray(item, 2),\n            price = _item[0],\n            volume = _item[1];\n\n        switch (side) {\n          case 'asks':\n            total = isLarge ? accumulateVolume(array) : accumulateVolume(array.slice(0).reverse()).slice(0).reverse();\n            return [React.createElement(\"span\", {\n              key: i,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151\n              },\n              __self: this\n            }, React.createElement(Decimal, {\n              fixed: priceFixed,\n              prevValue: array[i + 1] ? array[i + 1][0] : 0,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151\n              },\n              __self: this\n            }, price)), React.createElement(Decimal, {\n              key: i,\n              fixed: amountFixed,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 152\n              },\n              __self: this\n            }, volume), React.createElement(Decimal, {\n              key: i,\n              fixed: amountFixed,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153\n              },\n              __self: this\n            }, total[i])];\n\n          default:\n            if (isLarge) {\n              return [React.createElement(Decimal, {\n                key: i,\n                fixed: amountFixed,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 158\n                },\n                __self: this\n              }, total[i]), React.createElement(Decimal, {\n                key: i,\n                fixed: amountFixed,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 159\n                },\n                __self: this\n              }, volume), React.createElement(\"span\", {\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 160\n                },\n                __self: this\n              }, React.createElement(Decimal, {\n                fixed: priceFixed,\n                prevValue: array[i - 1] ? array[i - 1][0] : 0,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 160\n                },\n                __self: this\n              }, price))];\n            } else {\n              return [React.createElement(\"span\", {\n                key: i,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 164\n                },\n                __self: this\n              }, React.createElement(Decimal, {\n                fixed: priceFixed,\n                prevValue: array[i - 1] ? array[i - 1][0] : 0,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 164\n                },\n                __self: this\n              }, price)), React.createElement(Decimal, {\n                key: i,\n                fixed: amountFixed,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 165\n                },\n                __self: this\n              }, volume), React.createElement(Decimal, {\n                key: i,\n                fixed: amountFixed,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 166\n                },\n                __self: this\n              }, total[i])];\n            }\n\n        }\n      }) : [[[''], message]];\n    };\n\n    _this.handleOnSelectBids = function (index) {\n      var _this$props3 = _this.props,\n          currentPrice = _this$props3.currentPrice,\n          bids = _this$props3.bids;\n      var priceToSet = bids[Number(index)] && Number(bids[Number(index)][0]);\n\n      if (currentPrice !== priceToSet) {\n        _this.props.setCurrentPrice(priceToSet);\n      }\n    };\n\n    _this.handleOnSelectAsks = function (index) {\n      var _this$props4 = _this.props,\n          currentPrice = _this$props4.currentPrice,\n          asks = _this$props4.asks;\n      var isLarge = _this.state.width >= breakpoint;\n      var asksData = isLarge ? asks : asks.slice(0).reverse();\n      var priceToSet = asksData[Number(index)] && Number(asksData[Number(index)][0]);\n\n      if (currentPrice !== priceToSet) {\n        _this.props.setCurrentPrice(priceToSet);\n      }\n    };\n\n    _this.state = {\n      width: 0\n    };\n    _this.orderRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(OrderBookContainer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.orderRef.current && this.state.width !== this.orderRef.current.clientWidth) {\n        this.setState({\n          width: this.orderRef.current.clientWidth\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          asks = _this$props5.asks,\n          bids = _this$props5.bids,\n          orderBookLoading = _this$props5.orderBookLoading;\n      var isLarge = this.state.width > breakpoint;\n      var cn = classNames('pg-combined-order-book ', {\n        'cr-combined-order-book--loading': orderBookLoading,\n        'pg-combined-order-book--no-data-first': !asks.length && !isLarge || !bids.length && isLarge,\n        'pg-combined-order-book--no-data-second': !bids.length && !isLarge || !asks.length && isLarge\n      });\n      return React.createElement(\"div\", {\n        className: cn,\n        ref: this.orderRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, orderBookLoading ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })) : this.orderBook(sortBids(bids), sortAsks(asks)));\n    }\n  }]);\n\n  return OrderBookContainer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    bids: selectDepthBids(state),\n    asks: selectDepthAsks(state),\n    orderBookLoading: selectDepthLoading(state),\n    currentMarket: selectCurrentMarket(state),\n    currentPrice: selectCurrentPrice(state),\n    marketTickers: selectMarketTickers(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setCurrentPrice: function setCurrentPrice(payload) {\n      return dispatch(_setCurrentPrice(payload));\n    }\n  };\n};\n\nexport var OrderBook = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OrderBookContainer));","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/OrderBook/index.tsx"],"names":["CombinedOrderBook","Decimal","Loader","classNames","React","injectIntl","connect","accumulateVolume","calcMaxVolume","sortAsks","sortBids","selectCurrentMarket","selectCurrentPrice","selectDepthAsks","selectDepthBids","selectDepthLoading","selectMarketTickers","setCurrentPrice","breakpoint","OrderBookContainer","props","orderRef","orderBook","bids","asks","isLarge","state","width","asksData","slice","reverse","intl","formatMessage","id","renderOrderBook","currentMarket","renderHeaders","lastPrice","handleOnSelectAsks","handleOnSelectBids","marketTickers","defaultTicker","last","price_change_percent","cn","includes","format","Number","price_precision","quote_unit","toUpperCase","base_unit","array","side","message","total","priceFixed","amountFixed","amount_precision","length","map","item","i","price","volume","index","currentPrice","priceToSet","createRef","current","clientWidth","setState","orderBookLoading","Component","mapStateToProps","mapDispatchToProps","dispatch","payload","OrderBook"],"mappings":";;;;;;;AAAA,SAASA,iBAAT,EAA4BC,OAA5B,EAAqCC,MAArC,QAAmD,sBAAnD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAA4BC,UAA5B,QAA8C,YAA9C;AACA,SAASC,OAAT,QAAoD,aAApD;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,QAA1C,EAAoDC,QAApD,QAAoE,eAApE;AACA,SAGIC,mBAHJ,EAIIC,kBAJJ,EAKIC,eALJ,EAMIC,eANJ,EAOIC,kBAPJ,EAQIC,mBARJ,EASIC,eAAe,IAAfA,gBATJ,QAUO,eAVP;AA8BA;AACA,IAAMC,UAAU,GAAG,GAAnB;;IAEMC,kB;;;;;AACF,8BAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,4FAAMA,KAAN;AADsB,UAUlBC,QAVkB;;AAAA,UAwClBC,SAxCkB,GAwCN,UAACC,IAAD,EAAOC,IAAP,EAAgB;AAChC,UAAMC,OAAO,GAAG,MAAKC,KAAL,CAAWC,KAAX,GAAmBT,UAAnC;AACA,UAAMU,QAAQ,GAAGH,OAAO,GAAGD,IAAH,GAAUA,IAAI,CAACK,KAAL,CAAW,CAAX,EAAcC,OAAd,EAAlC;AACA,aACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAE,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,MAAKV,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,QAAAA,EAAE,EAAE;AAAL,OAA9B,CADL,CADJ,EAII,oBAAC,iBAAD;AACI,QAAA,SAAS,EAAEzB,aAAa,CAACe,IAAD,EAAOC,IAAP,CAD5B;AAEI,QAAA,kBAAkB,EAAEjB,gBAAgB,CAACiB,IAAD,CAFxC;AAGI,QAAA,kBAAkB,EAAEjB,gBAAgB,CAACgB,IAAD,CAHxC;AAII,QAAA,sBAAsB,EAAE,wBAJ5B;AAKI,QAAA,sBAAsB,EAAE,yBAL5B;AAMI,QAAA,QAAQ,EAAE,MAAKW,eAAL,CAAqBN,QAArB,EAA+B,MAA/B,EAAuC,MAAKR,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,UAAAA,EAAE,EAAE;AAAL,SAA9B,CAAvC,EAAiG,MAAKb,KAAL,CAAWe,aAA5G,CANd;AAOI,QAAA,QAAQ,EAAE,MAAKD,eAAL,CAAqBX,IAArB,EAA2B,MAA3B,EAAmC,MAAKH,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,UAAAA,EAAE,EAAE;AAAL,SAA9B,CAAnC,EAA6F,MAAKb,KAAL,CAAWe,aAAxG,CAPd;AAQI,QAAA,OAAO,EAAE,MAAKC,aAAL,EARb;AASI,QAAA,SAAS,EAAE,MAAKC,SAAL,EATf;AAUI,QAAA,YAAY,EAAE,MAAKC,kBAVvB;AAWI,QAAA,YAAY,EAAE,MAAKC,kBAXvB;AAYI,QAAA,OAAO,EAAEd,OAZb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ;AAqBH,KAhEyB;;AAAA,UAkElBY,SAlEkB,GAkEN,YAAM;AAAA,wBACmB,MAAKjB,KADxB;AAAA,UACdoB,aADc,eACdA,aADc;AAAA,UACCL,aADD,eACCA,aADD;AAEtB,UAAMM,aAAa,GAAG;AAClBC,QAAAA,IAAI,EAAE,CADY;AAElBC,QAAAA,oBAAoB,EAAE;AAFJ,OAAtB;;AAIA,UAAIR,aAAa,IAAIK,aAAa,CAACL,aAAa,CAACF,EAAf,CAA9B,IAAoDO,aAAa,CAACL,aAAa,CAACF,EAAf,CAAb,CAAgCU,oBAAxF,EAA8G;AAC5G,YAAMC,EAAE,GAAGzC,UAAU,CAAC,EAAD,EAAK;AACxB,qDAA2C,CAACqC,aAAa,CAACL,aAAa,CAACF,EAAf,CAAb,IAAmCQ,aAApC,EAAmDE,oBAAnD,CAAwEE,QAAxE,CAAiF,GAAjF,CADnB;AAExB,qDAA2C,CAACL,aAAa,CAACL,aAAa,CAACF,EAAf,CAAb,IAAmCQ,aAApC,EAAmDE,oBAAnD,CAAwEE,QAAxE,CAAiF,GAAjF;AAFnB,SAAL,CAArB;AAIA,eACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAM,UAAA,SAAS,EAAED,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK3C,OAAO,CAAC6C,MAAR,CAAeC,MAAM,CAAC,CAACP,aAAa,CAACL,aAAa,CAACF,EAAf,CAAb,IAAmCQ,aAApC,EAAmDC,IAApD,CAArB,EAAgFP,aAAa,CAACa,eAA9F,CADL,OACsHb,aAAa,CAACc,UAAd,CAAyBC,WAAzB,EADtH,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,MAAK9B,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,UAAAA,EAAE,EAAE;AAAL,SAA9B,CAAP,CAJJ,CADJ;AAQD,OAbD,MAaO;AACL,eAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgB;AAAM,UAAA,SAAS,EAAE,yCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAhB,EAAoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAO,MAAKb,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,UAAAA,EAAE,EAAE;AAAL,SAA9B,CAAP,CAApF,CAAP;AACD;AACJ,KAxFyB;;AAAA,UA0FlBG,aA1FkB,GA0FF,YAAM;AAAA,yBACM,MAAKhB,KADX;AAAA,UAClBW,IADkB,gBAClBA,IADkB;AAAA,UACZI,aADY,gBACZA,aADY;AAE1B,aAAO,WACAJ,IAAI,CAACC,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAnB,CADA,gBACwEE,aAAa,IAAIA,aAAa,CAACc,UAAd,CAAyBC,WAAzB,EADzF,kBAEAnB,IAAI,CAACC,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAnB,CAFA,gBAEyEE,aAAa,IAAIA,aAAa,CAACgB,SAAd,CAAwBD,WAAxB,EAF1F,kBAGAnB,IAAI,CAACC,aAAL,CAAmB;AAACC,QAAAA,EAAE,EAAE;AAAL,OAAnB,CAHA,gBAGyEE,aAAa,IAAIA,aAAa,CAACgB,SAAd,CAAwBD,WAAxB,EAH1F,OAAP;AAKH,KAjGyB;;AAAA,UAmGlBhB,eAnGkB,GAmGA,UAACkB,KAAD,EAAoBC,IAApB,EAAkCC,OAAlC,EAAmDnB,aAAnD,EAA8E;AACpG,UAAIoB,KAAK,GAAGhD,gBAAgB,CAAC6C,KAAD,CAA5B;AACA,UAAM3B,OAAO,GAAG,MAAKC,KAAL,CAAWC,KAAX,GAAmBT,UAAnC;AACA,UAAMsC,UAAU,GAAGrB,aAAa,GAAGA,aAAa,CAACa,eAAjB,GAAmC,CAAnE;AACA,UAAMS,WAAW,GAAGtB,aAAa,GAAGA,aAAa,CAACuB,gBAAjB,GAAoC,CAArE;AACA,aAAQN,KAAK,CAACO,MAAN,GAAe,CAAhB,GAAqBP,KAAK,CAACQ,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAA,mCACvBD,IADuB;AAAA,YACxCE,KADwC;AAAA,YACjCC,MADiC;;AAE/C,gBAAQX,IAAR;AACI,eAAK,MAAL;AACIE,YAAAA,KAAK,GAAG9B,OAAO,GAAGlB,gBAAgB,CAAC6C,KAAD,CAAnB,GAA6B7C,gBAAgB,CAAC6C,KAAK,CAACvB,KAAN,CAAY,CAAZ,EAAeC,OAAf,EAAD,CAAhB,CAA2CD,KAA3C,CAAiD,CAAjD,EAAoDC,OAApD,EAA5C;AACA,mBAAO,CACH;AAAM,cAAA,GAAG,EAAEgC,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAc,oBAAC,OAAD;AAAS,cAAA,KAAK,EAAEN,UAAhB;AAA4B,cAAA,SAAS,EAAEJ,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,GAAeV,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,CAAf,GAAiC,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA4EC,KAA5E,CAAd,CADG,EAEH,oBAAC,OAAD;AAAS,cAAA,GAAG,EAAED,CAAd;AAAiB,cAAA,KAAK,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsCO,MAAtC,CAFG,EAGH,oBAAC,OAAD;AAAS,cAAA,GAAG,EAAEF,CAAd;AAAiB,cAAA,KAAK,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsCF,KAAK,CAACO,CAAD,CAA3C,CAHG,CAAP;;AAKJ;AACI,gBAAIrC,OAAJ,EAAa;AACT,qBAAO,CACH,oBAAC,OAAD;AAAS,gBAAA,GAAG,EAAEqC,CAAd;AAAiB,gBAAA,KAAK,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsCF,KAAK,CAACO,CAAD,CAA3C,CADG,EAEH,oBAAC,OAAD;AAAS,gBAAA,GAAG,EAAEA,CAAd;AAAiB,gBAAA,KAAK,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsCO,MAAtC,CAFG,EAGH;AAAM,gBAAA,GAAG,EAAEF,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAc,oBAAC,OAAD;AAAS,gBAAA,KAAK,EAAEN,UAAhB;AAA4B,gBAAA,SAAS,EAAEJ,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,GAAeV,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,CAAf,GAAiC,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA4EC,KAA5E,CAAd,CAHG,CAAP;AAKH,aAND,MAMO;AACH,qBAAO,CACH;AAAM,gBAAA,GAAG,EAAED,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAc,oBAAC,OAAD;AAAS,gBAAA,KAAK,EAAEN,UAAhB;AAA4B,gBAAA,SAAS,EAAEJ,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,GAAeV,KAAK,CAACU,CAAC,GAAG,CAAL,CAAL,CAAa,CAAb,CAAf,GAAiC,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA4EC,KAA5E,CAAd,CADG,EAEH,oBAAC,OAAD;AAAS,gBAAA,GAAG,EAAED,CAAd;AAAiB,gBAAA,KAAK,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsCO,MAAtC,CAFG,EAGH,oBAAC,OAAD;AAAS,gBAAA,GAAG,EAAEF,CAAd;AAAiB,gBAAA,KAAK,EAAEL,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAsCF,KAAK,CAACO,CAAD,CAA3C,CAHG,CAAP;AAKH;;AArBT;AAuBH,OAzB2B,CAArB,GAyBF,CAAC,CAAC,CAAC,EAAD,CAAD,EAAOR,OAAP,CAAD,CAzBL;AA0BH,KAlIyB;;AAAA,UAoIlBf,kBApIkB,GAoIG,UAAC0B,KAAD,EAAmB;AAAA,yBACb,MAAK7C,KADQ;AAAA,UACpC8C,YADoC,gBACpCA,YADoC;AAAA,UACtB3C,IADsB,gBACtBA,IADsB;AAE5C,UAAM4C,UAAU,GAAG5C,IAAI,CAACwB,MAAM,CAACkB,KAAD,CAAP,CAAJ,IAAuBlB,MAAM,CAACxB,IAAI,CAACwB,MAAM,CAACkB,KAAD,CAAP,CAAJ,CAAoB,CAApB,CAAD,CAAhD;;AACA,UAAIC,YAAY,KAAKC,UAArB,EAAiC;AAC7B,cAAK/C,KAAL,CAAWH,eAAX,CAA2BkD,UAA3B;AACH;AACJ,KA1IyB;;AAAA,UA2IlB7B,kBA3IkB,GA2IG,UAAC2B,KAAD,EAAmB;AAAA,yBACb,MAAK7C,KADQ;AAAA,UACpC8C,YADoC,gBACpCA,YADoC;AAAA,UACtB1C,IADsB,gBACtBA,IADsB;AAE5C,UAAMC,OAAO,GAAG,MAAKC,KAAL,CAAWC,KAAX,IAAoBT,UAApC;AACA,UAAMU,QAAQ,GAAGH,OAAO,GAAGD,IAAH,GAAUA,IAAI,CAACK,KAAL,CAAW,CAAX,EAAcC,OAAd,EAAlC;AACA,UAAMqC,UAAU,GAAGvC,QAAQ,CAACmB,MAAM,CAACkB,KAAD,CAAP,CAAR,IAA2BlB,MAAM,CAACnB,QAAQ,CAACmB,MAAM,CAACkB,KAAD,CAAP,CAAR,CAAwB,CAAxB,CAAD,CAApD;;AACA,UAAIC,YAAY,KAAKC,UAArB,EAAiC;AAC7B,cAAK/C,KAAL,CAAWH,eAAX,CAA2BkD,UAA3B;AACH;AACJ,KAnJyB;;AAGtB,UAAKzC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE;AADE,KAAb;AAIA,UAAKN,QAAL,GAAgBjB,KAAK,CAACgE,SAAN,EAAhB;AAPsB;AAQzB;;;;yCAI2B;AACxB,UAAI,KAAK/C,QAAL,CAAcgD,OAAd,IAAyB,KAAK3C,KAAL,CAAWC,KAAX,KAAqB,KAAKN,QAAL,CAAcgD,OAAd,CAAsBC,WAAxE,EAAqF;AACjF,aAAKC,QAAL,CAAc;AACV5C,UAAAA,KAAK,EAAE,KAAKN,QAAL,CAAcgD,OAAd,CAAsBC;AADnB,SAAd;AAGH;AACJ;;;6BAEe;AAAA,yBAKR,KAAKlD,KALG;AAAA,UAERI,IAFQ,gBAERA,IAFQ;AAAA,UAGRD,IAHQ,gBAGRA,IAHQ;AAAA,UAIRiD,gBAJQ,gBAIRA,gBAJQ;AAMZ,UAAM/C,OAAO,GAAG,KAAKC,KAAL,CAAWC,KAAX,GAAmBT,UAAnC;AACA,UAAM0B,EAAE,GAAGzC,UAAU,CAAC,yBAAD,EAA4B;AAC7C,2CAAmCqE,gBADU;AAE7C,iDAA0C,CAAChD,IAAI,CAACmC,MAAN,IAAgB,CAAClC,OAAlB,IAA+B,CAACF,IAAI,CAACoC,MAAN,IAAgBlC,OAF3C;AAG7C,kDAA2C,CAACF,IAAI,CAACoC,MAAN,IAAgB,CAAClC,OAAlB,IAA+B,CAACD,IAAI,CAACmC,MAAN,IAAgBlC;AAH5C,OAA5B,CAArB;AAMA,aACI;AAAK,QAAA,SAAS,EAAEmB,EAAhB;AAAoB,QAAA,GAAG,EAAE,KAAKvB,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKmD,gBAAgB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAL,CAAH,GAA2B,KAAKlD,SAAL,CAAeZ,QAAQ,CAACa,IAAD,CAAvB,EAA+Bd,QAAQ,CAACe,IAAD,CAAvC,CADhD,CADJ;AAKH;;;;EAvC4BpB,KAAK,CAACqE,S;;AAuJvC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAChD,KAAD;AAAA,SAAuB;AAC3CH,IAAAA,IAAI,EAAET,eAAe,CAACY,KAAD,CADsB;AAE3CF,IAAAA,IAAI,EAAEX,eAAe,CAACa,KAAD,CAFsB;AAG3C8C,IAAAA,gBAAgB,EAAEzD,kBAAkB,CAACW,KAAD,CAHO;AAI3CS,IAAAA,aAAa,EAAExB,mBAAmB,CAACe,KAAD,CAJS;AAK3CwC,IAAAA,YAAY,EAAEtD,kBAAkB,CAACc,KAAD,CALW;AAM3Cc,IAAAA,aAAa,EAAExB,mBAAmB,CAACU,KAAD;AANS,GAAvB;AAAA,CAAxB;;AASA,IAAMiD,kBAAiE,GACnE,SADEA,kBACF,CAAAC,QAAQ;AAAA,SAAK;AACT3D,IAAAA,eAAe,EAAE,yBAAA4D,OAAO;AAAA,aAAID,QAAQ,CAAC3D,gBAAe,CAAC4D,OAAD,CAAhB,CAAZ;AAAA;AADf,GAAL;AAAA,CADZ;;AAKA,OAAO,IAAMC,SAAS,GAAGzE,UAAU,CAACC,OAAO,CAACoE,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CxD,kBAA7C,CAAD,CAA5B","sourcesContent":["import { CombinedOrderBook, Decimal, Loader } from '@openware/components';\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { accumulateVolume, calcMaxVolume, sortAsks, sortBids } from '../../helpers';\nimport {\n    Market,\n    RootState,\n    selectCurrentMarket,\n    selectCurrentPrice,\n    selectDepthAsks,\n    selectDepthBids,\n    selectDepthLoading,\n    selectMarketTickers,\n    setCurrentPrice,\n} from '../../modules';\n\ninterface ReduxProps {\n    asks: string[][];\n    bids: string[][];\n    currentMarket: Market | undefined;\n    currentPrice: number | undefined;\n    orderBookLoading: boolean;\n}\n\ninterface DispatchProps {\n    setCurrentPrice: typeof setCurrentPrice;\n}\n\ninterface State {\n    width: number;\n}\n\ntype Props = ReduxProps & DispatchProps & InjectedIntlProps;\n\n// render big/small breakpoint\nconst breakpoint = 448;\n\nclass OrderBookContainer extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            width: 0,\n        };\n\n        this.orderRef = React.createRef();\n    }\n\n    private orderRef;\n\n    public componentDidUpdate() {\n        if (this.orderRef.current && this.state.width !== this.orderRef.current.clientWidth) {\n            this.setState({\n                width: this.orderRef.current.clientWidth,\n            });\n        }\n    }\n\n    public render() {\n        const {\n            asks,\n            bids,\n            orderBookLoading,\n        } = this.props;\n        const isLarge = this.state.width > breakpoint;\n        const cn = classNames('pg-combined-order-book ', {\n            'cr-combined-order-book--loading': orderBookLoading,\n            'pg-combined-order-book--no-data-first': (!asks.length && !isLarge) || (!bids.length && isLarge),\n            'pg-combined-order-book--no-data-second': (!bids.length && !isLarge) || (!asks.length && isLarge),\n        });\n\n        return (\n            <div className={cn} ref={this.orderRef}>\n                {orderBookLoading ? <div><Loader /></div> : this.orderBook(sortBids(bids), sortAsks(asks))}\n            </div>\n        );\n    }\n\n    private orderBook = (bids, asks) => {\n        const isLarge = this.state.width > breakpoint;\n        const asksData = isLarge ? asks : asks.slice(0).reverse();\n        return (\n            <React.Fragment>\n                <div className={'cr-table-header__content'}>\n                    {this.props.intl.formatMessage({id: 'page.body.trade.orderbook'})}\n                </div>\n                <CombinedOrderBook\n                    maxVolume={calcMaxVolume(bids, asks)}\n                    orderBookEntryAsks={accumulateVolume(asks)}\n                    orderBookEntryBids={accumulateVolume(bids)}\n                    rowBackgroundColorAsks={'rgba(232, 94, 89, 0.4)'}\n                    rowBackgroundColorBids={'rgba(84, 180, 137, 0.4)'}\n                    dataAsks={this.renderOrderBook(asksData, 'asks', this.props.intl.formatMessage({id: 'page.noDataToShow'}), this.props.currentMarket)}\n                    dataBids={this.renderOrderBook(bids, 'bids', this.props.intl.formatMessage({id: 'page.noDataToShow'}), this.props.currentMarket)}\n                    headers={this.renderHeaders()}\n                    lastPrice={this.lastPrice()}\n                    onSelectAsks={this.handleOnSelectAsks}\n                    onSelectBids={this.handleOnSelectBids}\n                    isLarge={isLarge}\n                />\n            </React.Fragment>\n        );\n    };\n\n    private lastPrice = () => {\n        const { marketTickers, currentMarket } = this.props;\n        const defaultTicker = {\n            last: 0,\n            price_change_percent: '+0.00%',\n        };\n        if (currentMarket && marketTickers[currentMarket.id] && marketTickers[currentMarket.id].price_change_percent) {\n          const cn = classNames('', {\n            'cr-combined-order-book__market-negative': (marketTickers[currentMarket.id] || defaultTicker).price_change_percent.includes('-'),\n            'cr-combined-order-book__market-positive': (marketTickers[currentMarket.id] || defaultTicker).price_change_percent.includes('+'),\n          });\n          return (\n              <React.Fragment>\n                  <span className={cn}>\n                      {Decimal.format(Number((marketTickers[currentMarket.id] || defaultTicker).last), currentMarket.price_precision)} {currentMarket.quote_unit.toUpperCase()}\n                  </span>\n                  <span>{this.props.intl.formatMessage({id: 'page.body.trade.orderbook.lastMarket'})}</span>\n              </React.Fragment>\n            );\n        } else {\n          return <React.Fragment><span className={'cr-combined-order-book__market-negative'}>0</span><span>{this.props.intl.formatMessage({id: 'page.body.trade.orderbook.lastMarket'})}</span></React.Fragment>;\n        }\n    };\n\n    private renderHeaders = () => {\n        const { intl, currentMarket } = this.props;\n        return [\n            `${intl.formatMessage({id: 'page.body.trade.orderbook.header.price'})}\\n(${currentMarket && currentMarket.quote_unit.toUpperCase()})`,\n            `${intl.formatMessage({id: 'page.body.trade.orderbook.header.amount'})}\\n(${currentMarket && currentMarket.base_unit.toUpperCase()})`,\n            `${intl.formatMessage({id: 'page.body.trade.orderbook.header.volume'})}\\n(${currentMarket && currentMarket.base_unit.toUpperCase()})`,\n        ];\n    };\n\n    private renderOrderBook = (array: string[][], side: string, message: string, currentMarket?: Market) => {\n        let total = accumulateVolume(array);\n        const isLarge = this.state.width > breakpoint;\n        const priceFixed = currentMarket ? currentMarket.price_precision : 0;\n        const amountFixed = currentMarket ? currentMarket.amount_precision : 0;\n        return (array.length > 0) ? array.map((item, i) => {\n            const [price, volume] = item;\n            switch (side) {\n                case 'asks':\n                    total = isLarge ? accumulateVolume(array) : accumulateVolume(array.slice(0).reverse()).slice(0).reverse();\n                    return [\n                        <span key={i}><Decimal fixed={priceFixed} prevValue={array[i + 1] ? array[i + 1][0] : 0}>{price}</Decimal></span>,\n                        <Decimal key={i} fixed={amountFixed}>{volume}</Decimal>,\n                        <Decimal key={i} fixed={amountFixed}>{total[i]}</Decimal>,\n                    ];\n                default:\n                    if (isLarge) {\n                        return [\n                            <Decimal key={i} fixed={amountFixed}>{total[i]}</Decimal>,\n                            <Decimal key={i} fixed={amountFixed}>{volume}</Decimal>,\n                            <span key={i}><Decimal fixed={priceFixed} prevValue={array[i - 1] ? array[i - 1][0] : 0}>{price}</Decimal></span>,\n                            ];\n                    } else {\n                        return [\n                            <span key={i}><Decimal fixed={priceFixed} prevValue={array[i - 1] ? array[i - 1][0] : 0}>{price}</Decimal></span>,\n                            <Decimal key={i} fixed={amountFixed}>{volume}</Decimal>,\n                            <Decimal key={i} fixed={amountFixed}>{total[i]}</Decimal>,\n                            ];\n                    }\n            }\n        }) : [[[''], message]];\n    }\n\n    private handleOnSelectBids = (index: string) => {\n        const { currentPrice, bids } = this.props;\n        const priceToSet = bids[Number(index)] && Number(bids[Number(index)][0]);\n        if (currentPrice !== priceToSet) {\n            this.props.setCurrentPrice(priceToSet);\n        }\n    };\n    private handleOnSelectAsks = (index: string) => {\n        const { currentPrice, asks } = this.props;\n        const isLarge = this.state.width >= breakpoint;\n        const asksData = isLarge ? asks : asks.slice(0).reverse();\n        const priceToSet = asksData[Number(index)] && Number(asksData[Number(index)][0]);\n        if (currentPrice !== priceToSet) {\n            this.props.setCurrentPrice(priceToSet);\n        }\n    };\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    bids: selectDepthBids(state),\n    asks: selectDepthAsks(state),\n    orderBookLoading: selectDepthLoading(state),\n    currentMarket: selectCurrentMarket(state),\n    currentPrice: selectCurrentPrice(state),\n    marketTickers: selectMarketTickers(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        setCurrentPrice: payload => dispatch(setCurrentPrice(payload)),\n    });\n\nexport const OrderBook = injectIntl(connect(mapStateToProps, mapDispatchToProps)(OrderBookContainer));\nexport type OrderBookProps = ReduxProps;\n"]},"metadata":{},"sourceType":"module"}