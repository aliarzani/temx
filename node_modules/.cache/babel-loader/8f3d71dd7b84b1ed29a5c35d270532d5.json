{"ast":null,"code":"import _slicedToArray from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(writter),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(reader),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchDisconnect),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(bindSocket),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(dispatchCurrentMarketOrderUpdates),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(dispatchOrderHistoryUpdates),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getSubscriptions),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rangerSagas);\n\nimport { delay, eventChannel } from 'redux-saga'; // tslint:disable-next-line no-submodule-imports\n\nimport { all, call, cancel, fork, put, race, select, take, takeEvery } from 'redux-saga/effects';\nimport { rangerUrl } from '../../../../api';\nimport { store } from '../../../../store';\nimport { pushHistoryEmit } from '../../../user/history';\nimport { userOpenOrdersUpdate } from '../../../user/openOrders';\nimport { userOrdersHistoryRangerData } from '../../../user/ordersHistory';\nimport { klinePush } from '../../kline';\nimport { marketsTickersData, selectCurrentMarket } from '../../markets';\nimport { MARKETS_SET_CURRENT_MARKET, MARKETS_SET_CURRENT_MARKET_IFUNSET } from '../../markets/constants';\nimport { depthData, depthDataIncrement, depthDataSnapshot } from '../../orderBook';\nimport { recentTradesPush } from '../../recentTrades';\nimport { rangerDisconnectData, rangerDisconnectFetch, rangerSubscribeMarket, rangerUnsubscribeMarket, rangerUserOrderUpdate, subscriptionsUpdate } from '../actions';\nimport { RANGER_CONNECT_DATA, RANGER_CONNECT_FETCH, RANGER_DIRECT_WRITE, RANGER_DISCONNECT_DATA, RANGER_DISCONNECT_FETCH, RANGER_USER_ORDER_UPDATE } from '../constants';\nimport { formatTicker, generateSocketURI, streamsBuilder } from '../helpers';\nimport { selectSubscriptions } from '../selectors';\n\nvar initRanger = function initRanger(_ref, market, prevSubs, buffer) {\n  var withAuth = _ref.withAuth;\n  var baseUrl = \"\".concat(rangerUrl(), \"/\").concat(withAuth ? 'private' : 'public');\n  var streams = streamsBuilder(withAuth, prevSubs, market);\n  var ws = new WebSocket(generateSocketURI(baseUrl, streams));\n  var channel = eventChannel(function (emitter) {\n    ws.onopen = function () {\n      emitter({\n        type: RANGER_CONNECT_DATA\n      });\n\n      while (buffer.messages.length > 0) {\n        var message = buffer.messages.shift();\n        ws.send(JSON.stringify(message));\n      }\n    };\n\n    ws.onerror = function (error) {\n      window.console.log(\"WebSocket error \".concat(error));\n      window.console.dir(error);\n    };\n\n    ws.onclose = function (event) {\n      channel.close();\n    };\n\n    ws.onmessage = function (_ref2) {\n      var data = _ref2.data;\n      // tslint:disable-next-line no-any\n      var payload = {};\n\n      try {\n        payload = JSON.parse(data);\n      } catch (e) {\n        window.console.error(\"Error parsing : \".concat(e.data));\n      }\n\n      for (var routingKey in payload) {\n        if (payload.hasOwnProperty(routingKey)) {\n          var event = payload[routingKey];\n          var currentMarket = selectCurrentMarket(store.getState());\n          var orderBookMatch = routingKey.match(/([^.]*)\\.update/);\n          var orderBookMatchSnap = routingKey.match(/([^.]*)\\.ob-snap/);\n          var orderBookMatchInc = routingKey.match(/([^.]*)\\.ob-inc/); // public\n\n          if (orderBookMatch) {\n            if (currentMarket && orderBookMatch[1] === currentMarket.id) {\n              emitter(depthData(event));\n            }\n\n            return;\n          } // public\n\n\n          if (orderBookMatchSnap) {\n            if (currentMarket && orderBookMatchSnap[1] === currentMarket.id) {\n              emitter(depthDataSnapshot(event));\n            }\n\n            return;\n          } // public\n\n\n          if (orderBookMatchInc) {\n            if (currentMarket && orderBookMatchInc[1] === currentMarket.id) {\n              emitter(depthDataIncrement(event));\n            }\n\n            return;\n          } // public\n\n\n          var klineMatch = String(routingKey).match(/([^.]*)\\.kline-(.+)/);\n\n          if (klineMatch) {\n            emitter(klinePush({\n              marketId: klineMatch[1],\n              kline: event,\n              period: klineMatch[2]\n            }));\n            return;\n          } // public\n\n\n          var tradesMatch = String(routingKey).match(/([^.]*)\\.trades/);\n\n          if (tradesMatch) {\n            emitter(recentTradesPush({\n              trades: event.trades,\n              market: tradesMatch[1]\n            }));\n            return;\n          }\n\n          switch (routingKey) {\n            // public\n            case 'global.tickers':\n              emitter(marketsTickersData(formatTicker(event)));\n              return;\n            // public\n\n            case 'success':\n              switch (event.message) {\n                case 'subscribed':\n                case 'unsubscribed':\n                  emitter(subscriptionsUpdate({\n                    subscriptions: event.streams\n                  }));\n                  return;\n\n                default:\n              }\n\n              return;\n            // private\n\n            case 'order':\n              emitter(rangerUserOrderUpdate(event));\n              return;\n            // private\n\n            case 'trade':\n              emitter(pushHistoryEmit(event));\n              return;\n\n            default:\n          }\n\n          window.console.log(\"Unhandeled websocket channel: \".concat(routingKey));\n        }\n      }\n    }; // unsubscribe function\n\n\n    return function () {\n      emitter(rangerDisconnectData());\n    };\n  });\n  return [channel, ws];\n};\n\nfunction writter(socket, buffer) {\n  var data;\n  return _regeneratorRuntime.wrap(function writter$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 3;\n          return take(RANGER_DIRECT_WRITE);\n\n        case 3:\n          data = _context.sent;\n\n          if (socket.readyState === socket.OPEN) {\n            socket.send(JSON.stringify(data.payload));\n          } else {\n            buffer.messages.push(data.payload);\n          }\n\n          _context.next = 0;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction reader(channel) {\n  var action;\n  return _regeneratorRuntime.wrap(function reader$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 3;\n          return take(channel);\n\n        case 3:\n          action = _context2.sent;\n          _context2.next = 6;\n          return put(action);\n\n        case 6:\n          _context2.next = 0;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nvar previousMarket;\n\nvar switchMarket = function switchMarket(subscribeOnInitOnly) {\n  return (\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(action) {\n      return _regeneratorRuntime.wrap(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(subscribeOnInitOnly && previousMarket !== undefined)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              if (!(previousMarket && previousMarket.id !== action.payload.id)) {\n                _context3.next = 5;\n                break;\n              }\n\n              _context3.next = 5;\n              return put(rangerUnsubscribeMarket(previousMarket));\n\n            case 5:\n              previousMarket = action.payload;\n\n              if (!action.payload) {\n                _context3.next = 9;\n                break;\n              }\n\n              _context3.next = 9;\n              return put(rangerSubscribeMarket(action.payload));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee);\n    })\n  );\n};\n\nfunction watchDisconnect(socket, channel) {\n  return _regeneratorRuntime.wrap(function watchDisconnect$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take(RANGER_DISCONNECT_FETCH);\n\n        case 2:\n          socket.close();\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction bindSocket(channel, socket, buffer) {\n  return _regeneratorRuntime.wrap(function bindSocket$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([call(reader, channel), call(writter, socket, buffer), call(watchDisconnect, socket, channel)]);\n\n        case 2:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction dispatchCurrentMarketOrderUpdates(action) {\n  var market;\n  return _regeneratorRuntime.wrap(function dispatchCurrentMarketOrderUpdates$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return select(selectCurrentMarket);\n\n        case 3:\n          market = _context6.sent;\n          _context6.next = 9;\n          break;\n\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = _context6[\"catch\"](0);\n          market = undefined;\n\n        case 9:\n          if (!(market && action.payload.market === market.id)) {\n            _context6.next = 12;\n            break;\n          }\n\n          _context6.next = 12;\n          return put(userOpenOrdersUpdate(action.payload));\n\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked5, null, [[0, 6]]);\n}\n\nfunction dispatchOrderHistoryUpdates(action) {\n  return _regeneratorRuntime.wrap(function dispatchOrderHistoryUpdates$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return put(userOrdersHistoryRangerData(action.payload));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction getSubscriptions() {\n  return _regeneratorRuntime.wrap(function getSubscriptions$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return select(selectSubscriptions);\n\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 6:\n          _context8.prev = 6;\n          _context8.t0 = _context8[\"catch\"](0);\n          return _context8.abrupt(\"return\", []);\n\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked7, null, [[0, 6]]);\n}\n\nexport function rangerSagas() {\n  var initialized, connectFetchPayload, buffer, pipes, _ref3, connectFetch, disconnectData, market, prevSubs, _ref4, _ref5, channel, socket;\n\n  return _regeneratorRuntime.wrap(function rangerSagas$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          initialized = false;\n          buffer = {\n            messages: []\n          };\n          _context9.next = 4;\n          return takeEvery(MARKETS_SET_CURRENT_MARKET, switchMarket(false));\n\n        case 4:\n          _context9.next = 6;\n          return takeEvery(MARKETS_SET_CURRENT_MARKET_IFUNSET, switchMarket(true));\n\n        case 6:\n          _context9.next = 8;\n          return takeEvery(RANGER_USER_ORDER_UPDATE, dispatchCurrentMarketOrderUpdates);\n\n        case 8:\n          _context9.next = 10;\n          return takeEvery(RANGER_USER_ORDER_UPDATE, dispatchOrderHistoryUpdates);\n\n        case 10:\n          if (!true) {\n            _context9.next = 55;\n            break;\n          }\n\n          _context9.next = 13;\n          return race({\n            connectFetch: take(RANGER_CONNECT_FETCH),\n            disconnectData: take(RANGER_DISCONNECT_DATA)\n          });\n\n        case 13:\n          _ref3 = _context9.sent;\n          connectFetch = _ref3.connectFetch;\n          disconnectData = _ref3.disconnectData;\n          market = void 0;\n\n          if (!connectFetch) {\n            _context9.next = 24;\n            break;\n          }\n\n          if (!initialized) {\n            _context9.next = 23;\n            break;\n          }\n\n          _context9.next = 21;\n          return put(rangerDisconnectFetch());\n\n        case 21:\n          _context9.next = 23;\n          return take(RANGER_DISCONNECT_DATA);\n\n        case 23:\n          connectFetchPayload = connectFetch.payload;\n\n        case 24:\n          if (!disconnectData) {\n            _context9.next = 27;\n            break;\n          }\n\n          _context9.next = 27;\n          return call(delay, 1000);\n\n        case 27:\n          _context9.prev = 27;\n          _context9.next = 30;\n          return select(selectCurrentMarket);\n\n        case 30:\n          market = _context9.sent;\n          _context9.next = 36;\n          break;\n\n        case 33:\n          _context9.prev = 33;\n          _context9.t0 = _context9[\"catch\"](27);\n          market = undefined;\n\n        case 36:\n          if (!connectFetchPayload) {\n            _context9.next = 53;\n            break;\n          }\n\n          _context9.next = 39;\n          return getSubscriptions();\n\n        case 39:\n          prevSubs = _context9.sent;\n          _context9.next = 42;\n          return call(initRanger, connectFetchPayload, market, prevSubs, buffer);\n\n        case 42:\n          _ref4 = _context9.sent;\n          _ref5 = _slicedToArray(_ref4, 2);\n          channel = _ref5[0];\n          socket = _ref5[1];\n          initialized = true;\n\n          if (!pipes) {\n            _context9.next = 50;\n            break;\n          }\n\n          _context9.next = 50;\n          return cancel(pipes);\n\n        case 50:\n          _context9.next = 52;\n          return fork(bindSocket, channel, socket, buffer);\n\n        case 52:\n          pipes = _context9.sent;\n\n        case 53:\n          _context9.next = 10;\n          break;\n\n        case 55:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked8, null, [[27, 33]]);\n}","map":{"version":3,"sources":["/workspaces/temx/src/modules/public/ranger/sagas/rangerSaga.ts"],"names":["writter","reader","watchDisconnect","bindSocket","dispatchCurrentMarketOrderUpdates","dispatchOrderHistoryUpdates","getSubscriptions","rangerSagas","delay","eventChannel","all","call","cancel","fork","put","race","select","take","takeEvery","rangerUrl","store","pushHistoryEmit","userOpenOrdersUpdate","userOrdersHistoryRangerData","klinePush","marketsTickersData","selectCurrentMarket","MARKETS_SET_CURRENT_MARKET","MARKETS_SET_CURRENT_MARKET_IFUNSET","depthData","depthDataIncrement","depthDataSnapshot","recentTradesPush","rangerDisconnectData","rangerDisconnectFetch","rangerSubscribeMarket","rangerUnsubscribeMarket","rangerUserOrderUpdate","subscriptionsUpdate","RANGER_CONNECT_DATA","RANGER_CONNECT_FETCH","RANGER_DIRECT_WRITE","RANGER_DISCONNECT_DATA","RANGER_DISCONNECT_FETCH","RANGER_USER_ORDER_UPDATE","formatTicker","generateSocketURI","streamsBuilder","selectSubscriptions","initRanger","market","prevSubs","buffer","withAuth","baseUrl","streams","ws","WebSocket","channel","emitter","onopen","type","messages","length","message","shift","send","JSON","stringify","onerror","error","window","console","log","dir","onclose","event","close","onmessage","data","payload","parse","e","routingKey","hasOwnProperty","currentMarket","getState","orderBookMatch","match","orderBookMatchSnap","orderBookMatchInc","id","klineMatch","String","marketId","kline","period","tradesMatch","trades","subscriptions","socket","readyState","OPEN","push","action","previousMarket","switchMarket","subscribeOnInitOnly","undefined","initialized","connectFetch","disconnectData","connectFetchPayload","pipes"],"mappings":"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","sourcesContent":["import { Channel, delay, eventChannel } from 'redux-saga';\n// tslint:disable-next-line no-submodule-imports\nimport { all, call, cancel, fork, put, race, select, take, takeEvery } from 'redux-saga/effects';\nimport { rangerUrl } from '../../../../api';\nimport { store } from '../../../../store';\nimport { pushHistoryEmit } from '../../../user/history';\nimport { userOpenOrdersUpdate } from '../../../user/openOrders';\nimport { userOrdersHistoryRangerData} from '../../../user/ordersHistory';\nimport { klinePush } from '../../kline';\nimport { Market, marketsTickersData, selectCurrentMarket, SetCurrentMarket } from '../../markets';\nimport { MARKETS_SET_CURRENT_MARKET, MARKETS_SET_CURRENT_MARKET_IFUNSET } from '../../markets/constants';\nimport { depthData, depthDataIncrement, depthDataSnapshot } from '../../orderBook';\nimport { recentTradesPush } from '../../recentTrades';\nimport {\n    RangerConnectFetch,\n    rangerDisconnectData,\n    rangerDisconnectFetch,\n    rangerSubscribeMarket,\n    rangerUnsubscribeMarket,\n    rangerUserOrderUpdate,\n    subscriptionsUpdate,\n    UserOrderUpdate,\n} from '../actions';\nimport {\n    RANGER_CONNECT_DATA,\n    RANGER_CONNECT_FETCH,\n    RANGER_DIRECT_WRITE,\n    RANGER_DISCONNECT_DATA,\n    RANGER_DISCONNECT_FETCH,\n    RANGER_USER_ORDER_UPDATE,\n} from '../constants';\nimport { formatTicker, generateSocketURI, streamsBuilder } from '../helpers';\nimport { selectSubscriptions } from '../selectors';\n\ninterface RangerBuffer {\n    messages: object[];\n}\n\nconst initRanger = (\n    { withAuth }: RangerConnectFetch['payload'],\n    market: Market | undefined,\n    prevSubs: string[],\n    buffer: RangerBuffer,\n): [Channel<{}>, WebSocket] => {\n    const baseUrl = `${rangerUrl()}/${withAuth ? 'private' : 'public'}`;\n    const streams = streamsBuilder(withAuth, prevSubs, market);\n\n    const ws = new WebSocket(generateSocketURI(baseUrl, streams));\n    const channel = eventChannel(emitter => {\n        ws.onopen = () => {\n            emitter({ type: RANGER_CONNECT_DATA });\n            while (buffer.messages.length > 0) {\n                const message = buffer.messages.shift();\n                ws.send(JSON.stringify(message));\n            }\n        };\n        ws.onerror = error => {\n            window.console.log(`WebSocket error ${error}`);\n            window.console.dir(error);\n        };\n        ws.onclose = event => {\n            channel.close();\n        };\n        ws.onmessage = ({ data }) => {\n            // tslint:disable-next-line no-any\n            let payload: { [pair: string]: any } = {};\n\n            try {\n                payload = JSON.parse(data as string);\n            } catch (e) {\n                window.console.error(`Error parsing : ${e.data}`);\n            }\n\n            for (const routingKey in payload) {\n                if (payload.hasOwnProperty(routingKey)) {\n                    const event = payload[routingKey];\n\n                    const currentMarket = selectCurrentMarket(store.getState());\n                    const orderBookMatch = routingKey.match(/([^.]*)\\.update/);\n                    const orderBookMatchSnap = routingKey.match(/([^.]*)\\.ob-snap/);\n                    const orderBookMatchInc = routingKey.match(/([^.]*)\\.ob-inc/);\n\n                    // public\n                    if (orderBookMatch) {\n                        if (currentMarket && orderBookMatch[1] === currentMarket.id) {\n                            emitter(depthData(event));\n                        }\n                        return;\n                    }\n\n                    // public\n                    if (orderBookMatchSnap) {\n                        if (currentMarket && orderBookMatchSnap[1] === currentMarket.id) {\n                            emitter(depthDataSnapshot(event));\n                        }\n                        return;\n                    }\n\n                    // public\n                    if (orderBookMatchInc) {\n                        if (currentMarket && orderBookMatchInc[1] === currentMarket.id) {\n                            emitter(depthDataIncrement(event));\n                        }\n                        return;\n                    }\n\n                    // public\n                    const klineMatch = String(routingKey).match(/([^.]*)\\.kline-(.+)/);\n                    if (klineMatch) {\n                        emitter(\n                            klinePush({\n                                marketId: klineMatch[1],\n                                kline: event,\n                                period: klineMatch[2],\n                            }),\n                        );\n                        return;\n                    }\n\n                    // public\n                    const tradesMatch = String(routingKey).match(/([^.]*)\\.trades/);\n                    if (tradesMatch) {\n                        emitter(\n                            recentTradesPush({\n                                trades: event.trades,\n                                market: tradesMatch[1],\n                            }),\n                        );\n                        return;\n                    }\n\n                    switch (routingKey) {\n                        // public\n                        case 'global.tickers':\n                            emitter(marketsTickersData(formatTicker(event)));\n                            return;\n\n                        // public\n                        case 'success':\n                            switch (event.message) {\n                                case 'subscribed':\n                                case 'unsubscribed':\n                                    emitter(subscriptionsUpdate({ subscriptions: event.streams }));\n                                    return;\n                                default:\n                            }\n                            return;\n\n                        // private\n                        case 'order':\n                            emitter(rangerUserOrderUpdate(event));\n                            return;\n\n                        // private\n                        case 'trade':\n                            emitter(pushHistoryEmit(event));\n                            return;\n\n                        default:\n                    }\n                    window.console.log(`Unhandeled websocket channel: ${routingKey}`);\n                }\n            }\n        };\n        // unsubscribe function\n        return () => {\n            emitter(rangerDisconnectData());\n        };\n    });\n    return [channel, ws];\n};\n\nfunction* writter(socket: WebSocket, buffer: { messages: object[] }) {\n    while (true) {\n        const data = yield take(RANGER_DIRECT_WRITE);\n        if (socket.readyState === socket.OPEN) {\n            socket.send(JSON.stringify(data.payload));\n        } else {\n            buffer.messages.push(data.payload);\n        }\n    }\n}\n\nfunction* reader(channel) {\n    while (true) {\n        const action = yield take(channel);\n        yield put(action);\n    }\n}\n\nlet previousMarket: Market | undefined;\n\nconst switchMarket = (subscribeOnInitOnly: boolean) => {\n    return function*(action: SetCurrentMarket) {\n        if (subscribeOnInitOnly && previousMarket !== undefined) {\n            return;\n        }\n        if (previousMarket && previousMarket.id !== action.payload.id) {\n            yield put(rangerUnsubscribeMarket(previousMarket));\n        }\n        previousMarket = action.payload;\n        if (action.payload) {\n            yield put(rangerSubscribeMarket(action.payload));\n        }\n    };\n};\n\nfunction* watchDisconnect(socket: WebSocket, channel: Channel<{}>) {\n    yield take(RANGER_DISCONNECT_FETCH);\n    socket.close();\n}\n\nfunction* bindSocket(channel: Channel<{}>, socket: WebSocket, buffer: RangerBuffer) {\n    return yield all([call(reader, channel), call(writter, socket, buffer), call(watchDisconnect, socket, channel)]);\n}\n\nfunction* dispatchCurrentMarketOrderUpdates(action: UserOrderUpdate) {\n    let market;\n\n    try {\n        market = yield select(selectCurrentMarket);\n    } catch (error) {\n        market = undefined;\n    }\n\n    if (market && action.payload.market === market.id) {\n        yield put(userOpenOrdersUpdate(action.payload));\n    }\n}\n\nfunction* dispatchOrderHistoryUpdates(action: UserOrderUpdate) {\n    yield put(userOrdersHistoryRangerData(action.payload));\n}\n\nfunction* getSubscriptions() {\n    try {\n        return yield select(selectSubscriptions);\n    } catch (error) {\n        return [];\n    }\n}\n\nexport function* rangerSagas() {\n    let initialized = false;\n    let connectFetchPayload: RangerConnectFetch['payload'] | undefined;\n    const buffer: RangerBuffer = { messages: [] };\n    let pipes;\n    yield takeEvery(MARKETS_SET_CURRENT_MARKET, switchMarket(false));\n    yield takeEvery(MARKETS_SET_CURRENT_MARKET_IFUNSET, switchMarket(true));\n    yield takeEvery(RANGER_USER_ORDER_UPDATE, dispatchCurrentMarketOrderUpdates);\n    yield takeEvery(RANGER_USER_ORDER_UPDATE, dispatchOrderHistoryUpdates);\n\n    while (true) {\n        const { connectFetch, disconnectData } = yield race({\n            connectFetch: take(RANGER_CONNECT_FETCH),\n            disconnectData: take(RANGER_DISCONNECT_DATA),\n        });\n        let market: Market | undefined;\n\n        if (connectFetch) {\n            if (initialized) {\n                yield put(rangerDisconnectFetch());\n                yield take(RANGER_DISCONNECT_DATA);\n            }\n            connectFetchPayload = connectFetch.payload;\n        }\n\n        if (disconnectData) {\n            yield call(delay, 1000);\n        }\n\n        try {\n            market = yield select(selectCurrentMarket);\n        } catch (error) {\n            market = undefined;\n        }\n\n        if (connectFetchPayload) {\n            const prevSubs = yield getSubscriptions();\n            const [channel, socket] = yield call(initRanger, connectFetchPayload, market, prevSubs, buffer);\n            initialized = true;\n            if (pipes) {\n                yield cancel(pipes);\n            }\n            pipes = yield fork(bindSocket, channel, socket, buffer);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}