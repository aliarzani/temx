{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/components/CopyableTextField/index.tsx\";\nimport { Button } from '@openware/components';\nimport '@openware/cryptofont';\nimport classnames from 'classnames';\nimport * as React from 'react';\n\nvar copy = function copy(id) {\n  var copyText = document.querySelector(\"#\".concat(id));\n\n  if (copyText) {\n    copyText.select();\n    document.execCommand('copy');\n    window.getSelection().removeAllRanges(); // tslint:disable-line\n  }\n};\n/**\n * Text field component with ability to copy inner text.\n */\n\n\nvar CopyableTextField =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CopyableTextField, _React$Component);\n\n  function CopyableTextField() {\n    _classCallCheck(this, CopyableTextField);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CopyableTextField).apply(this, arguments));\n  }\n\n  _createClass(CopyableTextField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.fieldId) {\n        throw new Error('CopyableTextField must contain `fieldId` prop');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          className = _this$props.className,\n          disabled = _this$props.disabled,\n          fieldId = _this$props.fieldId,\n          copyButtonText = _this$props.copyButtonText;\n\n      var doCopy = function doCopy() {\n        return copy(fieldId);\n      };\n\n      var cx = classnames('cr-copyable-text-field', className);\n      return React.createElement(\"div\", {\n        className: cx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-copyable-text-field__input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: String(fieldId),\n        readOnly: true,\n        type: \"text\",\n        value: value,\n        onClick: doCopy,\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(Button, {\n        className: \"cr-copyable-text-field__button\",\n        label: copyButtonText ? copyButtonText : 'Copy',\n        type: 'text',\n        onClick: doCopy,\n        disabled: disabled,\n        noMargin: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CopyableTextField;\n}(React.Component);\n\nexport { CopyableTextField };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/components/CopyableTextField/index.tsx"],"names":["Button","classnames","React","copy","id","copyText","document","querySelector","select","execCommand","window","getSelection","removeAllRanges","CopyableTextField","props","fieldId","Error","value","className","disabled","copyButtonText","doCopy","cx","String","Component"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,sBAAvB;AACA,OAAO,sBAAP;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAgCA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,EAAD,EAAgB;AACzB,MAAMC,QAAmB,GAAGC,QAAQ,CAACC,aAAT,YAA2BH,EAA3B,EAA5B;;AAEA,MAAIC,QAAJ,EAAc;AACVA,IAAAA,QAAQ,CAACG,MAAT;AAEAF,IAAAA,QAAQ,CAACG,WAAT,CAAqB,MAArB;AACCC,IAAAA,MAAM,CAACC,YAAP,EAAD,CAA+BC,eAA/B,GAJU,CAIwC;AACrD;AACJ,CATD;AAWA;;;;;IAGMC,iB;;;;;;;;;;;;;wCACyB;AACvB,UAAI,CAAC,KAAKC,KAAL,CAAWC,OAAhB,EAAyB;AACrB,cAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;AACJ;;;6BAEe;AAAA,wBAOR,KAAKF,KAPG;AAAA,UAERG,KAFQ,eAERA,KAFQ;AAAA,UAGRC,SAHQ,eAGRA,SAHQ;AAAA,UAIRC,QAJQ,eAIRA,QAJQ;AAAA,UAKRJ,OALQ,eAKRA,OALQ;AAAA,UAMRK,cANQ,eAMRA,cANQ;;AAQZ,UAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,eAAMlB,IAAI,CAACY,OAAD,CAAV;AAAA,OAAf;;AACA,UAAMO,EAAE,GAAGrB,UAAU,CAAC,wBAAD,EAA2BiB,SAA3B,CAArB;AACA,aACI;AAAK,QAAA,SAAS,EAAEI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,EAAE,EAAEC,MAAM,CAACR,OAAD,CADd;AAEI,QAAA,QAAQ,EAAE,IAFd;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,KAAK,EAAEE,KAJX;AAKI,QAAA,OAAO,EAAEI,MALb;AAMI,QAAA,QAAQ,EAAEF,QANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EASI,oBAAC,MAAD;AACI,QAAA,SAAS,EAAC,gCADd;AAEI,QAAA,KAAK,EAAEC,cAAc,GAAGA,cAAH,GAAoB,MAF7C;AAGI,QAAA,IAAI,EAAE,MAHV;AAII,QAAA,OAAO,EAAEC,MAJb;AAKI,QAAA,QAAQ,EAAEF,QALd;AAMI,QAAA,QAAQ,EAAE,IANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,CADJ,CADJ;AAsBH;;;;EAvC2BjB,KAAK,CAACsB,S;;AA0CtC,SACIX,iBADJ","sourcesContent":["import { Button } from '@openware/components';\nimport '@openware/cryptofont';\nimport classnames from 'classnames';\nimport * as React from 'react';\n\n\nexport interface CopyableTextFieldProps {\n    /**\n     * Text value that will be copied to the clipboard\n     */\n    value: string;\n    /**\n     * Additional class name for styling. By default element receives `cr-button` class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * String value that makes copy field be unique\n     */\n    fieldId: string;\n    /**\n     * @default 'Copy'\n     *  Renders text of the label of copy button component\n     */\n    copyButtonText?: string;\n    /**\n     * @default 'false'\n     * If true, Button will be disabled.\n     */\n    disabled?: boolean;\n}\n\ntype CopyTypes = HTMLInputElement | null;\n\n\nconst copy = (id: string) => {\n    const copyText: CopyTypes = document.querySelector(`#${id}`);\n\n    if (copyText) {\n        copyText.select();\n\n        document.execCommand('copy');\n        (window.getSelection() as any).removeAllRanges(); // tslint:disable-line\n    }\n};\n\n/**\n * Text field component with ability to copy inner text.\n */\nclass CopyableTextField extends React.Component<CopyableTextFieldProps> {\n    public componentDidMount() {\n        if (!this.props.fieldId) {\n            throw new Error('CopyableTextField must contain `fieldId` prop');\n        }\n    }\n\n    public render() {\n        const {\n            value,\n            className,\n            disabled,\n            fieldId,\n            copyButtonText,\n        } = this.props;\n        const doCopy = () => copy(fieldId);\n        const cx = classnames('cr-copyable-text-field', className);\n        return (\n            <div className={cx}>\n                <div className=\"cr-copyable-text-field__input\">\n                    <input\n                        id={String(fieldId)}\n                        readOnly={true}\n                        type=\"text\"\n                        value={value}\n                        onClick={doCopy}\n                        disabled={disabled}\n                    />\n                    <Button\n                        className=\"cr-copyable-text-field__button\"\n                        label={copyButtonText ? copyButtonText : 'Copy'}\n                        type={'text'}\n                        onClick={doCopy}\n                        disabled={disabled}\n                        noMargin={true}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport {\n    CopyableTextField,\n};\n"]},"metadata":{},"sourceType":"module"}