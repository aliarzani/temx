{"ast":null,"code":"import _toConsumableArray from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/containers/RecentTrades/Yours.tsx\";\nimport { Decimal, Loader, Table } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { localeDate, setTradesType } from '../../helpers';\nimport { fetchHistory as _fetchHistory, selectCurrentMarket, selectCurrentPrice, selectFullHistory, selectHistory, selectHistoryLoading, selectMarkets, setCurrentPrice as _setCurrentPrice } from '../../modules';\nimport { handleHighlightValue } from './Market';\nvar timeFrom = Math.floor((Date.now() - 1000 * 60 * 60 * 24) / 1000);\n\nvar YoursComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(YoursComponent, _React$Component);\n\n  function YoursComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, YoursComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(YoursComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.renderContent = function () {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Table, {\n        header: _this.getHeaders(),\n        data: _this.retrieveData(),\n        onSelect: _this.handleOnSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }));\n    };\n\n    _this.getHeaders = function () {\n      return [_this.props.intl.formatMessage({\n        id: 'page.body.trade.header.recentTrades.content.time'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.trade.header.recentTrades.content.amount'\n      }), _this.props.intl.formatMessage({\n        id: 'page.body.trade.header.recentTrades.content.price'\n      })];\n    };\n\n    _this.retrieveData = function () {\n      var list = _this.props.list;\n      return _toConsumableArray(list).length > 0 ? _toConsumableArray(list).map(_this.renderRow) : [[[''], _this.props.intl.formatMessage({\n        id: 'page.noDataToShow'\n      })]];\n    };\n\n    _this.renderRow = function (item, i) {\n      var _this$props = _this.props,\n          currentMarket = _this$props.currentMarket,\n          list = _this$props.list;\n      var id = item.id,\n          created_at = item.created_at,\n          price = item.price,\n          amount = item.amount,\n          side = item.side;\n      var priceFixed = currentMarket ? currentMarket.price_precision : 0;\n      var amountFixed = currentMarket ? currentMarket.amount_precision : 0;\n      var orderSide = side === 'sell' ? 'sell' : 'buy';\n      var higlightedDate = handleHighlightValue(String(localeDate(_toConsumableArray(list)[i - 1] ? _toConsumableArray(list)[i - 1].created_at : '', 'time')), String(localeDate(created_at, 'time')));\n      return [React.createElement(\"span\", {\n        style: {\n          color: setTradesType(orderSide).color\n        },\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, higlightedDate), React.createElement(\"span\", {\n        style: {\n          color: setTradesType(orderSide).color\n        },\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Decimal, {\n        key: id,\n        fixed: amountFixed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, amount)), React.createElement(\"span\", {\n        style: {\n          color: setTradesType(orderSide).color\n        },\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Decimal, {\n        key: id,\n        fixed: priceFixed,\n        prevValue: _toConsumableArray(list)[i - 1] ? _toConsumableArray(list)[i - 1].price : 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, price))];\n    };\n\n    _this.handleOnSelect = function (index) {\n      var _this$props2 = _this.props,\n          list = _this$props2.list,\n          currentPrice = _this$props2.currentPrice;\n      var priceToSet = list[Number(index)] ? list[Number(index)].price : '';\n\n      if (currentPrice !== priceToSet) {\n        _this.props.setCurrentPrice(priceToSet);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(YoursComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var currentMarket = this.props.currentMarket;\n\n      if (currentMarket) {\n        this.props.fetchHistory({\n          type: 'trades',\n          page: 0,\n          time_from: timeFrom,\n          market: currentMarket.id\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.currentMarket && this.props.currentMarket !== next.currentMarket) {\n        this.props.fetchHistory({\n          type: 'trades',\n          page: 0,\n          time_from: timeFrom,\n          market: next.currentMarket.id\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var fetching = this.props.fetching;\n      var className = classnames({\n        'cr-tab-content__noData': this.retrieveData()[0][1] === this.props.intl.formatMessage({\n          id: 'page.noDataToShow'\n        })\n      });\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, fetching ? React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }) : this.renderContent());\n    }\n  }]);\n\n  return YoursComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    marketsData: selectMarkets(state),\n    list: selectHistory(state),\n    fetching: selectHistoryLoading(state),\n    fullHistory: selectFullHistory(state),\n    currentMarket: selectCurrentMarket(state),\n    currentPrice: selectCurrentPrice(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchHistory: function fetchHistory(params) {\n      return dispatch(_fetchHistory(params));\n    },\n    setCurrentPrice: function setCurrentPrice(payload) {\n      return dispatch(_setCurrentPrice(payload));\n    }\n  };\n};\n\nvar YoursTab = injectIntl(connect(mapStateToProps, mapDispatchToProps)(YoursComponent));\nexport { YoursTab };","map":{"version":3,"sources":["/workspaces/temx/src/containers/RecentTrades/Yours.tsx"],"names":["Decimal","Loader","Table","classnames","React","injectIntl","connect","localeDate","setTradesType","fetchHistory","selectCurrentMarket","selectCurrentPrice","selectFullHistory","selectHistory","selectHistoryLoading","selectMarkets","setCurrentPrice","handleHighlightValue","timeFrom","Math","floor","Date","now","YoursComponent","renderContent","getHeaders","retrieveData","handleOnSelect","props","intl","formatMessage","id","list","length","map","renderRow","item","i","currentMarket","created_at","price","amount","side","priceFixed","price_precision","amountFixed","amount_precision","orderSide","higlightedDate","String","color","index","currentPrice","priceToSet","Number","type","page","time_from","market","next","fetching","className","Component","mapStateToProps","state","marketsData","fullHistory","mapDispatchToProps","dispatch","params","payload","YoursTab"],"mappings":";;;;;;;AAAA,SAASA,OAAT,EAAkBC,MAAlB,EAA0BC,KAA1B,QAAuC,sBAAvC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAEIC,UAFJ,QAGO,YAHP;AAIA,SAASC,OAAT,QAAoD,aAApD;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,eAA1C;AACA,SACIC,YAAY,IAAZA,aADJ,EAIIC,mBAJJ,EAKIC,kBALJ,EAMIC,iBANJ,EAOIC,aAPJ,EAQIC,oBARJ,EASIC,aATJ,EAUIC,eAAe,IAAfA,gBAVJ,QAYO,eAZP;AAaA,SAASC,oBAAT,QAAqC,UAArC;AAkBA,IAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACC,IAAI,CAACC,GAAL,KAAa,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAA/B,IAAqC,IAAhD,CAAjB;;IAEMC,c;;;;;;;;;;;;;;;;;;UA4BKC,a,GAAgB,YAAM;AACzB,aACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,MAAM,EAAE,MAAKC,UAAL,EADZ;AAEI,QAAA,IAAI,EAAE,MAAKC,YAAL,EAFV;AAGI,QAAA,QAAQ,EAAE,MAAKC,cAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AASH,K;;UAEOF,U,GAAa,YAAM;AACvB,aAAO,CACH,MAAKG,KAAL,CAAWC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADG,EAEH,MAAKH,KAAL,CAAWC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFG,EAGH,MAAKH,KAAL,CAAWC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHG,CAAP;AAKH,K;;UAEOL,Y,GAAe,YAAM;AAAA,UACjBM,IADiB,GACR,MAAKJ,KADG,CACjBI,IADiB;AAEzB,aAAO,mBAAIA,IAAJ,EAAUC,MAAV,GAAmB,CAAnB,GACD,mBAAID,IAAJ,EAAUE,GAAV,CAAc,MAAKC,SAAnB,CADC,GAED,CAAC,CAAC,CAAC,EAAD,CAAD,EAAO,MAAKP,KAAL,CAAWC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAAP,CAAD,CAFN;AAGH,K;;UAEOI,S,GAAY,UAACC,IAAD,EAAOC,CAAP,EAAa;AAAA,wBACG,MAAKT,KADR;AAAA,UACrBU,aADqB,eACrBA,aADqB;AAAA,UACNN,IADM,eACNA,IADM;AAAA,UAErBD,EAFqB,GAEmBK,IAFnB,CAErBL,EAFqB;AAAA,UAEjBQ,UAFiB,GAEmBH,IAFnB,CAEjBG,UAFiB;AAAA,UAELC,KAFK,GAEmBJ,IAFnB,CAELI,KAFK;AAAA,UAEEC,MAFF,GAEmBL,IAFnB,CAEEK,MAFF;AAAA,UAEUC,IAFV,GAEmBN,IAFnB,CAEUM,IAFV;AAG7B,UAAMC,UAAU,GAAGL,aAAa,GAAGA,aAAa,CAACM,eAAjB,GAAmC,CAAnE;AACA,UAAMC,WAAW,GAAGP,aAAa,GAAGA,aAAa,CAACQ,gBAAjB,GAAoC,CAArE;AACA,UAAMC,SAAS,GAAGL,IAAI,KAAK,MAAT,GAAmB,MAAnB,GAA4B,KAA9C;AACA,UAAMM,cAAc,GAAG/B,oBAAoB,CAACgC,MAAM,CAAC1C,UAAU,CAAC,mBAAIyB,IAAJ,EAAUK,CAAC,GAAG,CAAd,IAAmB,mBAAIL,IAAJ,EAAUK,CAAC,GAAG,CAAd,EAAiBE,UAApC,GAAiD,EAAlD,EAAsD,MAAtD,CAAX,CAAP,EAAkFU,MAAM,CAAC1C,UAAU,CAACgC,UAAD,EAAa,MAAb,CAAX,CAAxF,CAA3C;AAEA,aAAO,CACH;AAAM,QAAA,KAAK,EAAE;AAAEW,UAAAA,KAAK,EAAE1C,aAAa,CAACuC,SAAD,CAAb,CAAyBG;AAAlC,SAAb;AAAwD,QAAA,GAAG,EAAEnB,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkEiB,cAAlE,CADG,EAEH;AAAM,QAAA,KAAK,EAAE;AAAEE,UAAAA,KAAK,EAAE1C,aAAa,CAACuC,SAAD,CAAb,CAAyBG;AAAlC,SAAb;AAAwD,QAAA,GAAG,EAAEnB,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiE,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,EAAd;AAAkB,QAAA,KAAK,EAAEc,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuCJ,MAAvC,CAAjE,CAFG,EAGH;AAAM,QAAA,KAAK,EAAE;AAAES,UAAAA,KAAK,EAAE1C,aAAa,CAACuC,SAAD,CAAb,CAAyBG;AAAlC,SAAb;AAAwD,QAAA,GAAG,EAAEnB,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiE,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,EAAd;AAAkB,QAAA,KAAK,EAAEY,UAAzB;AAAqC,QAAA,SAAS,EAAE,mBAAIX,IAAJ,EAAUK,CAAC,GAAG,CAAd,IAAmB,mBAAIL,IAAJ,EAAUK,CAAC,GAAG,CAAd,EAAiBG,KAApC,GAA4C,CAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgGA,KAAhG,CAAjE,CAHG,CAAP;AAKH,K;;UAEOb,c,GAAiB,UAACwB,KAAD,EAAmB;AAAA,yBACT,MAAKvB,KADI;AAAA,UAChCI,IADgC,gBAChCA,IADgC;AAAA,UAC1BoB,YAD0B,gBAC1BA,YAD0B;AAExC,UAAMC,UAAU,GAAGrB,IAAI,CAACsB,MAAM,CAACH,KAAD,CAAP,CAAJ,GAAsBnB,IAAI,CAACsB,MAAM,CAACH,KAAD,CAAP,CAAJ,CAAoBX,KAA1C,GAAkD,EAArE;;AAEA,UAAIY,YAAY,KAAKC,UAArB,EAAiC;AAC7B,cAAKzB,KAAL,CAAWZ,eAAX,CAA2BqC,UAA3B;AACH;AACJ,K;;;;;;;wCA3E0B;AAAA,UACff,aADe,GACG,KAAKV,KADR,CACfU,aADe;;AAEvB,UAAIA,aAAJ,EAAmB;AACf,aAAKV,KAAL,CAAWnB,YAAX,CAAwB;AAAE8C,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,IAAI,EAAE,CAAxB;AAA2BC,UAAAA,SAAS,EAAEvC,QAAtC;AAAgDwC,UAAAA,MAAM,EAAEpB,aAAa,CAACP;AAAtE,SAAxB;AACH;AACJ;;;8CAEgC4B,I,EAAa;AAC1C,UAAIA,IAAI,CAACrB,aAAL,IAAsB,KAAKV,KAAL,CAAWU,aAAX,KAA6BqB,IAAI,CAACrB,aAA5D,EAA2E;AACvE,aAAKV,KAAL,CAAWnB,YAAX,CAAwB;AAAE8C,UAAAA,IAAI,EAAE,QAAR;AAAkBC,UAAAA,IAAI,EAAE,CAAxB;AAA2BC,UAAAA,SAAS,EAAEvC,QAAtC;AAAgDwC,UAAAA,MAAM,EAAEC,IAAI,CAACrB,aAAL,CAAmBP;AAA3E,SAAxB;AACH;AACJ;;;6BAEe;AAAA,UACJ6B,QADI,GACS,KAAKhC,KADd,CACJgC,QADI;AAEZ,UAAMC,SAAS,GAAG1D,UAAU,CAAC;AACzB,kCAA0B,KAAKuB,YAAL,GAAoB,CAApB,EAAuB,CAAvB,MAA8B,KAAKE,KAAL,CAAWC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B;AAD/B,OAAD,CAA5B;AAIA,aACI;AAAK,QAAA,SAAS,EAAE8B,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,QAAQ,GAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAgB,KAAKpC,aAAL,EAD7B,CADJ;AAKH;;;;EA1BwBpB,KAAK,CAAC0D,S;;AAgFnC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAmC;AACvDC,IAAAA,WAAW,EAAElD,aAAa,CAACiD,KAAD,CAD6B;AAEvDhC,IAAAA,IAAI,EAAEnB,aAAa,CAACmD,KAAD,CAFoC;AAGvDJ,IAAAA,QAAQ,EAAE9C,oBAAoB,CAACkD,KAAD,CAHyB;AAIvDE,IAAAA,WAAW,EAAEtD,iBAAiB,CAACoD,KAAD,CAJyB;AAKvD1B,IAAAA,aAAa,EAAE5B,mBAAmB,CAACsD,KAAD,CALqB;AAMvDZ,IAAAA,YAAY,EAAEzC,kBAAkB,CAACqD,KAAD;AANuB,GAAnC;AAAA,CAAxB;;AASA,IAAMG,kBAAiE,GACnE,SADEA,kBACF,CAAAC,QAAQ;AAAA,SAAK;AACT3D,IAAAA,YAAY,EAAE,sBAAA4D,MAAM;AAAA,aAAID,QAAQ,CAAC3D,aAAY,CAAC4D,MAAD,CAAb,CAAZ;AAAA,KADX;AAETrD,IAAAA,eAAe,EAAE,yBAAAsD,OAAO;AAAA,aAAIF,QAAQ,CAACpD,gBAAe,CAACsD,OAAD,CAAhB,CAAZ;AAAA;AAFf,GAAL;AAAA,CADZ;;AAMA,IAAMC,QAAQ,GAAGlE,UAAU,CAACC,OAAO,CAACyD,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C5C,cAA7C,CAAD,CAA3B;AAEA,SACIgD,QADJ","sourcesContent":["import { Decimal, Loader, Table } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport {\n    InjectedIntlProps,\n    injectIntl,\n} from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { localeDate, setTradesType } from '../../helpers';\nimport {\n    fetchHistory,\n    Market,\n    RootState,\n    selectCurrentMarket,\n    selectCurrentPrice,\n    selectFullHistory,\n    selectHistory,\n    selectHistoryLoading,\n    selectMarkets,\n    setCurrentPrice,\n    WalletHistoryList,\n} from '../../modules';\nimport { handleHighlightValue } from './Market';\n\ninterface ReduxProps {\n    marketsData: Market[];\n    list: WalletHistoryList;\n    fetching: boolean;\n    fullHistory: number;\n    currentMarket: Market | undefined;\n    currentPrice: number | undefined;\n}\n\ninterface DispatchProps {\n    fetchHistory: typeof fetchHistory;\n    setCurrentPrice: typeof setCurrentPrice;\n}\n\ntype Props = ReduxProps & DispatchProps & InjectedIntlProps;\n\nconst timeFrom = Math.floor((Date.now() - 1000 * 60 * 60 * 24) / 1000);\n\nclass YoursComponent extends React.Component<Props> {\n\n    public componentDidMount() {\n        const { currentMarket } = this.props;\n        if (currentMarket) {\n            this.props.fetchHistory({ type: 'trades', page: 0, time_from: timeFrom, market: currentMarket.id});\n        }\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.currentMarket && this.props.currentMarket !== next.currentMarket) {\n            this.props.fetchHistory({ type: 'trades', page: 0, time_from: timeFrom, market: next.currentMarket.id });\n        }\n    }\n\n    public render() {\n        const { fetching } = this.props;\n        const className = classnames({\n            'cr-tab-content__noData': this.retrieveData()[0][1] === this.props.intl.formatMessage({ id: 'page.noDataToShow' }),\n        });\n\n        return (\n            <div className={className}>\n                {fetching ? <Loader /> : this.renderContent()}\n            </div>\n        );\n    }\n\n    public renderContent = () => {\n        return (\n            <React.Fragment>\n                <Table\n                    header={this.getHeaders()}\n                    data={this.retrieveData()}\n                    onSelect={this.handleOnSelect}\n                />\n            </React.Fragment>\n        );\n    };\n\n    private getHeaders = () => {\n        return [\n            this.props.intl.formatMessage({ id: 'page.body.trade.header.recentTrades.content.time' }),\n            this.props.intl.formatMessage({ id: 'page.body.trade.header.recentTrades.content.amount' }),\n            this.props.intl.formatMessage({ id: 'page.body.trade.header.recentTrades.content.price' }),\n        ];\n    };\n\n    private retrieveData = () => {\n        const { list } = this.props;\n        return [...list].length > 0\n            ? [...list].map(this.renderRow)\n            : [[[''], this.props.intl.formatMessage({ id: 'page.noDataToShow' })]];\n    };\n\n    private renderRow = (item, i) => {\n        const { currentMarket, list } = this.props;\n        const { id, created_at, price, amount, side } = item;\n        const priceFixed = currentMarket ? currentMarket.price_precision : 0;\n        const amountFixed = currentMarket ? currentMarket.amount_precision : 0;\n        const orderSide = side === 'sell' ?  'sell' : 'buy';\n        const higlightedDate = handleHighlightValue(String(localeDate([...list][i - 1] ? [...list][i - 1].created_at : '', 'time')), String(localeDate(created_at, 'time')));\n\n        return [\n            <span style={{ color: setTradesType(orderSide).color }} key={id}>{higlightedDate}</span>,\n            <span style={{ color: setTradesType(orderSide).color }} key={id}><Decimal key={id} fixed={amountFixed}>{amount}</Decimal></span>,\n            <span style={{ color: setTradesType(orderSide).color }} key={id}><Decimal key={id} fixed={priceFixed} prevValue={[...list][i - 1] ? [...list][i - 1].price : 0}>{price}</Decimal></span>,\n        ];\n    };\n\n    private handleOnSelect = (index: string) => {\n        const { list, currentPrice } = this.props;\n        const priceToSet = list[Number(index)] ? list[Number(index)].price : '';\n\n        if (currentPrice !== priceToSet) {\n            this.props.setCurrentPrice(priceToSet);\n        }\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    marketsData: selectMarkets(state),\n    list: selectHistory(state),\n    fetching: selectHistoryLoading(state),\n    fullHistory: selectFullHistory(state),\n    currentMarket: selectCurrentMarket(state),\n    currentPrice: selectCurrentPrice(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        fetchHistory: params => dispatch(fetchHistory(params)),\n        setCurrentPrice: payload => dispatch(setCurrentPrice(payload)),\n    });\n\nconst YoursTab = injectIntl(connect(mapStateToProps, mapDispatchToProps)(YoursComponent));\n\nexport {\n    YoursTab,\n};\n"]},"metadata":{},"sourceType":"module"}