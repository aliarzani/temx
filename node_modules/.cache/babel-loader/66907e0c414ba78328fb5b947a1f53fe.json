{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(ordersExecuteSaga);\n\n// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { userOpenOrdersAppend } from '../../openOrders';\nimport { orderExecuteData, orderExecuteError } from '../actions';\nvar executeOptions = {\n  apiVersion: 'peatio'\n};\nexport function ordersExecuteSaga(action) {\n  var order;\n  return _regeneratorRuntime.wrap(function ordersExecuteSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(executeOptions), '/market/orders', action.payload);\n\n        case 3:\n          order = _context.sent;\n          _context.next = 6;\n          return put(orderExecuteData());\n\n        case 6:\n          if (!(order.ord_type !== 'market')) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 9;\n          return put(userOpenOrdersAppend(order));\n\n        case 9:\n          _context.next = 11;\n          return put(alertPush({\n            message: ['success.order.created'],\n            type: 'success'\n          }));\n\n        case 11:\n          _context.next = 19;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put(orderExecuteError(_context.t0));\n\n        case 17:\n          _context.next = 19;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/user/orders/sagas/ordersExecuteSaga.ts"],"names":["ordersExecuteSaga","call","put","API","alertPush","userOpenOrdersAppend","orderExecuteData","orderExecuteError","executeOptions","apiVersion","action","post","payload","order","ord_type","message","type","code"],"mappings":";;;;yBAeiBA,iB;;AAfjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SACIC,gBADJ,EAEIC,iBAFJ,QAIO,YAJP;AAMA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUT,iBAAV,CAA4BU,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEe,iBAAMT,IAAI,CAACE,GAAG,CAACQ,IAAJ,CAASH,cAAT,CAAD,EAA2B,gBAA3B,EAA6CE,MAAM,CAACE,OAApD,CAAV;;AAFf;AAEOC,UAAAA,KAFP;AAAA;AAGC,iBAAMX,GAAG,CAACI,gBAAgB,EAAjB,CAAT;;AAHD;AAAA,gBAIKO,KAAK,CAACC,QAAN,KAAmB,QAJxB;AAAA;AAAA;AAAA;;AAAA;AAKK,iBAAMZ,GAAG,CAACG,oBAAoB,CAACQ,KAAD,CAArB,CAAT;;AALL;AAAA;AAOC,iBAAMX,GAAG,CAACE,SAAS,CAAC;AAAEW,YAAAA,OAAO,EAAE,CAAC,uBAAD,CAAX;AAAsCC,YAAAA,IAAI,EAAE;AAA5C,WAAD,CAAV,CAAT;;AAPD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASC,iBAAMd,GAAG,CAACK,iBAAiB,aAAlB,CAAT;;AATD;AAAA;AAUC,iBAAML,GAAG,CAACE,SAAS,CAAC;AAACW,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBE,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CD,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { userOpenOrdersAppend } from '../../openOrders';\nimport {\n    orderExecuteData,\n    orderExecuteError,\n    OrderExecuteFetch,\n} from '../actions';\n\nconst executeOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* ordersExecuteSaga(action: OrderExecuteFetch) {\n    try {\n        const order = yield call(API.post(executeOptions), '/market/orders', action.payload);\n        yield put(orderExecuteData());\n        if (order.ord_type !== 'market') {\n            yield put(userOpenOrdersAppend(order));\n        }\n        yield put(alertPush({ message: ['success.order.created'], type: 'success'}));\n    } catch (error) {\n        yield put(orderExecuteError(error));\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}