{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootMarketsSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(marketsFetchSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(tickersSaga);\n\n// tslint:disable-next-line\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../alert';\nimport { marketsData, marketsError, marketsTickersData, marketsTickersError, setCurrentMarketIfUnset } from '../actions';\nimport { MARKETS_FETCH, MARKETS_TICKERS_FETCH } from '../constants';\nvar marketsRequestOptions = {\n  apiVersion: 'peatio'\n};\nvar tickersOptions = {\n  apiVersion: 'arke'\n};\nexport function rootMarketsSaga() {\n  return _regeneratorRuntime.wrap(function rootMarketsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(MARKETS_FETCH, marketsFetchSaga);\n\n        case 2:\n          _context.next = 4;\n          return takeLatest(MARKETS_TICKERS_FETCH, tickersSaga);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function marketsFetchSaga() {\n  var markets;\n  return _regeneratorRuntime.wrap(function marketsFetchSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(API.get(marketsRequestOptions), '/public/markets');\n\n        case 3:\n          markets = _context2.sent;\n          _context2.next = 6;\n          return put(marketsData(markets));\n\n        case 6:\n          _context2.next = 8;\n          return put(setCurrentMarketIfUnset(markets[0]));\n\n        case 8:\n          _context2.next = 16;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put(marketsError());\n\n        case 14:\n          _context2.next = 16;\n          return put(alertPush({\n            message: _context2.t0.message,\n            code: _context2.t0.code,\n            type: 'error'\n          }));\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\nexport function tickersSaga(action) {\n  var tickers, pairs, convertedTickers;\n  return _regeneratorRuntime.wrap(function tickersSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(API.get(tickersOptions), \"/public/markets/tickers\");\n\n        case 3:\n          tickers = _context3.sent;\n\n          if (!tickers) {\n            _context3.next = 9;\n            break;\n          }\n\n          pairs = Object.keys(tickers);\n          convertedTickers = pairs.reduce(function (result, pair) {\n            result[pair] = tickers[pair].ticker;\n            return result;\n          }, {});\n          _context3.next = 9;\n          return put(marketsTickersData(convertedTickers));\n\n        case 9:\n          _context3.next = 17;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 15;\n          return put(marketsTickersError());\n\n        case 15:\n          _context3.next = 17;\n          return put(alertPush({\n            message: _context3.t0.message,\n            code: _context3.t0.code,\n            type: 'error'\n          }));\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 11]]);\n}","map":{"version":3,"sources":["/workspaces/temx/src/modules/public/markets/sagas/marketsFetchSaga.ts"],"names":["rootMarketsSaga","marketsFetchSaga","tickersSaga","call","put","takeLatest","API","alertPush","marketsData","marketsError","marketsTickersData","marketsTickersError","setCurrentMarketIfUnset","MARKETS_FETCH","MARKETS_TICKERS_FETCH","marketsRequestOptions","apiVersion","tickersOptions","get","markets","message","code","type","action","tickers","pairs","Object","keys","convertedTickers","reduce","result","pair","ticker"],"mappings":";;;;yBAsBiBA,e;;;yBAKAC,gB;;;yBAWAC,W;;AAtCjB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,kBAHJ,EAIIC,mBAJJ,EAMIC,uBANJ,QAOO,YAPP;AAQA,SAASC,aAAT,EAAwBC,qBAAxB,QAAqD,cAArD;AAEA,IAAMC,qBAAqC,GAAG;AAC1CC,EAAAA,UAAU,EAAE;AAD8B,CAA9C;AAIA,IAAMC,cAA8B,GAAG;AACnCD,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUhB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMK,UAAU,CAACQ,aAAD,EAAgBZ,gBAAhB,CAAhB;;AADG;AAAA;AAEH,iBAAMI,UAAU,CAACS,qBAAD,EAAwBZ,WAAxB,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKP,OAAO,SAAUD,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAME,IAAI,CAACG,GAAG,CAACY,GAAJ,CAAQH,qBAAR,CAAD,EAAiC,iBAAjC,CAAV;;AAFjB;AAEOI,UAAAA,OAFP;AAAA;AAGC,iBAAMf,GAAG,CAACI,WAAW,CAACW,OAAD,CAAZ,CAAT;;AAHD;AAAA;AAIC,iBAAMf,GAAG,CAACQ,uBAAuB,CAACO,OAAO,CAAC,CAAD,CAAR,CAAxB,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMC,iBAAMf,GAAG,CAACK,YAAY,EAAb,CAAT;;AAND;AAAA;AAOC,iBAAML,GAAG,CAACG,SAAS,CAAC;AAACa,YAAAA,OAAO,EAAE,aAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,aAAMA,IAArC;AAA2CC,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,OAAO,SAAUpB,WAAV,CAAsBqB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMpB,IAAI,CAACG,GAAG,CAACY,GAAJ,CAAQD,cAAR,CAAD,4BAAV;;AAFjB;AAEOO,UAAAA,OAFP;;AAAA,eAIKA,OAJL;AAAA;AAAA;AAAA;;AAKWC,UAAAA,KALX,GAKmBC,MAAM,CAACC,IAAP,CAAYH,OAAZ,CALnB;AAOWI,UAAAA,gBAPX,GAO8BH,KAAK,CAACI,MAAN,CAAa,UAACC,MAAD,EAASC,IAAT,EAAkB;AACpDD,YAAAA,MAAM,CAACC,IAAD,CAAN,GAAeP,OAAO,CAACO,IAAD,CAAP,CAAcC,MAA7B;AACA,mBAAOF,MAAP;AACH,WAHwB,EAGtB,EAHsB,CAP9B;AAAA;AAWK,iBAAM1B,GAAG,CAACM,kBAAkB,CAACkB,gBAAD,CAAnB,CAAT;;AAXL;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcC,iBAAMxB,GAAG,CAACO,mBAAmB,EAApB,CAAT;;AAdD;AAAA;AAeC,iBAAMP,GAAG,CAACG,SAAS,CAAC;AAACa,YAAAA,OAAO,EAAE,aAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,aAAMA,IAArC;AAA2CC,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../alert';\nimport {\n    marketsData,\n    marketsError,\n    marketsTickersData,\n    marketsTickersError,\n    MarketsTickersFetch,\n    setCurrentMarketIfUnset,\n} from '../actions';\nimport { MARKETS_FETCH, MARKETS_TICKERS_FETCH } from '../constants';\n\nconst marketsRequestOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nconst tickersOptions: RequestOptions = {\n    apiVersion: 'arke',\n};\n\nexport function* rootMarketsSaga() {\n    yield takeLatest(MARKETS_FETCH, marketsFetchSaga);\n    yield takeLatest(MARKETS_TICKERS_FETCH, tickersSaga);\n}\n\nexport function* marketsFetchSaga() {\n    try {\n        const markets = yield call(API.get(marketsRequestOptions), '/public/markets');\n        yield put(marketsData(markets));\n        yield put(setCurrentMarketIfUnset(markets[0]));\n    } catch (error) {\n        yield put(marketsError());\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n\nexport function* tickersSaga(action: MarketsTickersFetch) {\n    try {\n        const tickers = yield call(API.get(tickersOptions), `/public/markets/tickers`);\n\n        if (tickers) {\n            const pairs = Object.keys(tickers);\n\n            const convertedTickers = pairs.reduce((result, pair) => {\n                result[pair] = tickers[pair].ticker;\n                return result;\n            }, {});\n            yield put(marketsTickersData(convertedTickers));\n        }\n    } catch (error) {\n        yield put(marketsTickersError());\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}