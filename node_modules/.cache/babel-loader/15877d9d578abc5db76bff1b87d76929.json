{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/HeaderToolbar/index.tsx\";\nimport { Decimal } from '@openware/components';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { selectCurrentMarket, selectMarkets, selectMarketTickers } from '../../modules';\n\n// tslint:disable no-any jsx-no-multiline-js\nvar HeaderToolbarContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(HeaderToolbarContainer, _React$Component);\n\n  function HeaderToolbarContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HeaderToolbarContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HeaderToolbarContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getTickerValue = function (value) {\n      var _this$props = _this.props,\n          marketTickers = _this$props.marketTickers,\n          currentMarket = _this$props.currentMarket;\n      var defaultTicker = {\n        low: 0,\n        last: 0,\n        high: 0,\n        vol: 0,\n        price_change_percent: '+0.00%'\n      };\n      return currentMarket && (marketTickers[currentMarket.id] || defaultTicker)[value];\n    };\n\n    _this.translate = function (id) {\n      return id ? _this.props.intl.formatMessage({\n        id: id\n      }) : '';\n    };\n\n    return _this;\n  }\n\n  _createClass(HeaderToolbarContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          marketTickers = _this$props2.marketTickers,\n          currentMarket = _this$props2.currentMarket;\n      var defaultTicker = {\n        low: 0,\n        last: 0,\n        high: 0,\n        vol: 0,\n        price_change_percent: '+0.00%'\n      };\n      var isPositive = currentMarket && /\\+/.test(this.getTickerValue('price_change_percent'));\n      var cls = isPositive ? 'positive' : 'negative';\n      var bidUnit = currentMarket && currentMarket.quote_unit.toUpperCase(); // const askUnit = currentMarket && currentMarket.base_unit.toUpperCase();\n\n      return React.createElement(\"div\", {\n        className: \"pg-header__toolbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-header__toolbar-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-value pg-header__toolbar-item-value-positive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, currentMarket && Decimal.format(Number(this.getTickerValue('low')), currentMarket.price_precision), \" \", bidUnit), React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.translate('page.body.trade.toolBar.lowest'))), React.createElement(\"div\", {\n        className: \"pg-header__toolbar-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-value pg-header__toolbar-item-value-negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, currentMarket && Decimal.format(Number(this.getTickerValue('last')), currentMarket.price_precision), \" \", bidUnit), React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.translate('page.body.trade.toolBar.lastPrice'))), React.createElement(\"div\", {\n        className: \"pg-header__toolbar-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-value pg-header__toolbar-item-value-negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, currentMarket && Decimal.format(Number(this.getTickerValue('high')), currentMarket.price_precision), \" \", bidUnit), React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.translate('page.body.trade.toolBar.highest'))), React.createElement(\"div\", {\n        className: \"pg-header__toolbar-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-value pg-header__toolbar-item-value-positive\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, currentMarket && Decimal.format(Number(this.getTickerValue('vol')), currentMarket.amount_precision), \" \", bidUnit), React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.translate('page.body.trade.toolBar.volume'))), React.createElement(\"div\", {\n        className: \"pg-header__toolbar-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-value pg-header__toolbar-item-value-\".concat(cls),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, currentMarket && (marketTickers[currentMarket.id] || defaultTicker).price_change_percent), React.createElement(\"p\", {\n        className: \"pg-header__toolbar-item-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.translate('page.body.trade.toolBar.change'))));\n    }\n  }]);\n\n  return HeaderToolbarContainer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentMarket: selectCurrentMarket(state),\n    markets: selectMarkets(state),\n    marketTickers: selectMarketTickers(state)\n  };\n};\n\nvar HeaderToolbar = injectIntl(withRouter(connect(mapStateToProps, {})(HeaderToolbarContainer)));\nexport { HeaderToolbar };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/HeaderToolbar/index.tsx"],"names":["Decimal","React","injectIntl","connect","withRouter","selectCurrentMarket","selectMarkets","selectMarketTickers","HeaderToolbarContainer","getTickerValue","value","props","marketTickers","currentMarket","defaultTicker","low","last","high","vol","price_change_percent","id","translate","intl","formatMessage","isPositive","test","cls","bidUnit","quote_unit","toUpperCase","format","Number","price_precision","amount_precision","Component","mapStateToProps","state","markets","HeaderToolbar"],"mappings":"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","sourcesContent":["import { Decimal } from '@openware/components';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {\n    Market,\n    RootState,\n    selectCurrentMarket,\n    selectMarkets,\n    selectMarketTickers, Ticker,\n} from '../../modules';\n\n\ninterface ReduxProps {\n    currentMarket?: Market;\n    markets: Market[];\n    marketTickers: {\n        [key: string]: Ticker,\n    };\n}\n\ntype Props = InjectedIntlProps & ReduxProps;\n\n// tslint:disable no-any jsx-no-multiline-js\nclass HeaderToolbarContainer extends React.Component<Props> {\n    public render() {\n        const { marketTickers, currentMarket } = this.props;\n        const defaultTicker = { low: 0, last: 0, high: 0, vol: 0, price_change_percent: '+0.00%' };\n\n        const isPositive = currentMarket && /\\+/.test(this.getTickerValue('price_change_percent'));\n        const cls = isPositive ? 'positive' : 'negative';\n\n        const bidUnit = currentMarket && currentMarket.quote_unit.toUpperCase();\n        // const askUnit = currentMarket && currentMarket.base_unit.toUpperCase();\n\n        return (\n            <div className=\"pg-header__toolbar\">\n                <div className=\"pg-header__toolbar-item\">\n                    <p className=\"pg-header__toolbar-item-value pg-header__toolbar-item-value-positive\">\n                        {currentMarket && Decimal.format(Number(this.getTickerValue('low')), currentMarket.price_precision)} {bidUnit}\n                    </p>\n                    <p className=\"pg-header__toolbar-item-text\">\n                        {this.translate('page.body.trade.toolBar.lowest')}\n                    </p>\n                </div>\n                <div className=\"pg-header__toolbar-item\">\n                    <p className=\"pg-header__toolbar-item-value pg-header__toolbar-item-value-negative\">\n                        {currentMarket && Decimal.format(Number(this.getTickerValue('last')), currentMarket.price_precision)} {bidUnit}\n                    </p>\n                    <p className=\"pg-header__toolbar-item-text\">\n                        {this.translate('page.body.trade.toolBar.lastPrice')}\n                    </p>\n                </div>\n                <div className=\"pg-header__toolbar-item\">\n                    <p className=\"pg-header__toolbar-item-value pg-header__toolbar-item-value-negative\">\n                        {currentMarket && Decimal.format(Number(this.getTickerValue('high')), currentMarket.price_precision)} {bidUnit}\n                    </p>\n                    <p className=\"pg-header__toolbar-item-text\">\n                        {this.translate('page.body.trade.toolBar.highest')}\n                    </p>\n                </div>\n                <div className=\"pg-header__toolbar-item\">\n                    <p className=\"pg-header__toolbar-item-value pg-header__toolbar-item-value-positive\">\n                        {currentMarket && Decimal.format(Number(this.getTickerValue('vol')), currentMarket.amount_precision)} {bidUnit}\n                    </p>\n                    <p className=\"pg-header__toolbar-item-text\">\n                        {this.translate('page.body.trade.toolBar.volume')}\n                    </p>\n                </div>\n                <div className=\"pg-header__toolbar-item\">\n                    <p className={`pg-header__toolbar-item-value pg-header__toolbar-item-value-${cls}`}>\n                        {currentMarket && (marketTickers[currentMarket.id] || defaultTicker).price_change_percent}\n                    </p>\n                    <p className=\"pg-header__toolbar-item-text\">\n                        {this.translate('page.body.trade.toolBar.change')}\n                    </p>\n                </div>\n            </div>\n        );\n    }\n\n    private getTickerValue = (value: string) => {\n        const { marketTickers, currentMarket } = this.props;\n        const defaultTicker = {low: 0, last: 0, high: 0, vol: 0, price_change_percent: '+0.00%'};\n\n        return currentMarket && (marketTickers[currentMarket.id] || defaultTicker)[value];\n    };\n\n    private translate = (id: string) => {\n        return id ? this.props.intl.formatMessage({ id }) : '';\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    currentMarket: selectCurrentMarket(state),\n    markets: selectMarkets(state),\n    marketTickers: selectMarketTickers(state),\n});\n\n\nconst HeaderToolbar = injectIntl(withRouter(connect(mapStateToProps, {})(HeaderToolbarContainer) as any) as any);\n\nexport {\n    HeaderToolbar,\n};\n"]},"metadata":{},"sourceType":"module"}