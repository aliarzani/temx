{"ast":null,"code":"import _defineProperty from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/containers/Confirm/Identity/index.tsx\";\nimport { Button, Dropdown } from '@openware/components';\nimport cr from 'classnames';\nimport * as moment from 'moment';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport MaskInput from 'react-maskinput';\nimport { connect } from 'react-redux';\nimport { formatDate, isDateInFuture } from '../../../helpers';\nimport { editIdentity as _editIdentity, labelFetch as _labelFetch, selectCurrentLanguage, selectEditIdentitySuccess, selectLabelData, selectSendIdentitySuccess, selectUserInfo, sendIdentity as _sendIdentity } from '../../../modules';\nimport { nationalities } from '../../../translations/nationalities';\nimport * as countries from 'i18n-iso-countries';\n\nvar IdentityComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(IdentityComponent, _React$Component);\n\n  function IdentityComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, IdentityComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(IdentityComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      city: '',\n      countryOfBirth: '',\n      dateOfBirth: '',\n      firstName: '',\n      lastName: '',\n      metadata: {\n        nationality: ''\n      },\n      postcode: '',\n      residentialAddress: '',\n      cityFocused: false,\n      dateOfBirthFocused: false,\n      firstNameFocused: false,\n      lastNameFocused: false,\n      postcodeFocused: false,\n      residentialAddressFocused: false\n    };\n\n    _this.translate = function (e) {\n      return _this.props.intl.formatMessage({\n        id: e\n      });\n    };\n\n    _this.scrollToElement = function (displayedElem) {\n      var element = document.getElementsByClassName('pg-confirm__content-identity-col-row')[displayedElem];\n      element && element.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'nearest'\n      });\n    };\n\n    _this.handleFieldFocus = function (field) {\n      return function () {\n        switch (field) {\n          case 'city':\n            _this.setState({\n              cityFocused: !_this.state.cityFocused\n            });\n\n            _this.scrollToElement(6);\n\n            break;\n\n          case 'dateOfBirth':\n            _this.setState({\n              dateOfBirthFocused: !_this.state.dateOfBirthFocused\n            });\n\n            _this.scrollToElement(2);\n\n            break;\n\n          case 'firstName':\n            _this.setState({\n              firstNameFocused: !_this.state.firstNameFocused\n            });\n\n            _this.scrollToElement(0);\n\n            break;\n\n          case 'lastName':\n            _this.setState({\n              lastNameFocused: !_this.state.lastNameFocused\n            });\n\n            _this.scrollToElement(1);\n\n            break;\n\n          case 'postcode':\n            _this.setState({\n              postcodeFocused: !_this.state.postcodeFocused\n            });\n\n            _this.scrollToElement(7);\n\n            break;\n\n          case 'residentialAddress':\n            _this.setState({\n              residentialAddressFocused: !_this.state.residentialAddressFocused\n            });\n\n            _this.scrollToElement(4);\n\n            break;\n\n          default:\n            break;\n        }\n      };\n    };\n\n    _this.handleChange = function (key) {\n      return function (e) {\n        // @ts-ignore\n        _this.setState(_defineProperty({}, key, e.target.value));\n      };\n    };\n\n    _this.handleConfirmEnterPress = function (event) {\n      if (event.key === 'Enter' && !_this.handleCheckButtonDisabled()) {\n        event.preventDefault();\n\n        _this.sendData();\n      }\n    };\n\n    _this.handleChangeDate = function (e) {\n      _this.setState({\n        dateOfBirth: formatDate(e.target.value)\n      });\n    };\n\n    _this.selectNationality = function (value) {\n      _this.setState({\n        metadata: {\n          nationality: value\n        }\n      });\n    };\n\n    _this.selectCountry = function (value) {\n      _this.setState({\n        countryOfBirth: countries.getAlpha2Code(value, _this.props.lang)\n      });\n    };\n\n    _this.handleValidateInput = function (field, value) {\n      switch (field) {\n        case 'firstName':\n          var firstNameRegex = new RegExp(\"^[a-zA-Z]{1,100}$\");\n          return value.match(firstNameRegex) ? true : false;\n\n        case 'lastName':\n          var lastNameRegex = new RegExp(\"^[a-zA-Z]{1,100}$\");\n          return value.match(lastNameRegex) ? true : false;\n\n        case 'residentialAddress':\n          var residentialAddressRegex = new RegExp(\"^[a-zA-Z0-9,.;/\\\\s]+$\");\n          return value.match(residentialAddressRegex) ? true : false;\n\n        case 'city':\n          var cityRegex = new RegExp(\"^[a-zA-Z]+$\");\n          return value.match(cityRegex) ? true : false;\n\n        case 'postcode':\n          var postcodeRegex = new RegExp(\"^[0-9]{1,12}$\");\n          return value.match(postcodeRegex) ? true : false;\n\n        case 'dateOfBirth':\n          if (value.length === 10) {\n            return moment(value, 'DD/MM/YYYY').unix() < Date.now() / 1000;\n          }\n\n          return false;\n\n        default:\n          return true;\n      }\n    };\n\n    _this.handleCheckButtonDisabled = function () {\n      var _this$state = _this.state,\n          city = _this$state.city,\n          dateOfBirth = _this$state.dateOfBirth,\n          firstName = _this$state.firstName,\n          lastName = _this$state.lastName,\n          postcode = _this$state.postcode,\n          residentialAddress = _this$state.residentialAddress,\n          countryOfBirth = _this$state.countryOfBirth,\n          metadata = _this$state.metadata;\n\n      var firstNameValid = _this.handleValidateInput('firstName', firstName);\n\n      var lastNameValid = _this.handleValidateInput('lastName', lastName);\n\n      var residentialAddressValid = _this.handleValidateInput('residentialAddress', residentialAddress);\n\n      var cityValid = _this.handleValidateInput('city', city);\n\n      var postcodeValid = _this.handleValidateInput('postcode', postcode);\n\n      var dateOfBirthValid = _this.handleValidateInput('dateOfBirth', dateOfBirth);\n\n      return !firstNameValid || !lastNameValid || !metadata.nationality || !residentialAddressValid || !countryOfBirth || !cityValid || !postcodeValid || !dateOfBirthValid;\n    };\n\n    _this.sendData = function () {\n      var _this$props = _this.props,\n          labels = _this$props.labels,\n          user = _this$props.user;\n      var dob = !isDateInFuture(_this.state.dateOfBirth) ? _this.state.dateOfBirth : '';\n      var profileInfo = {\n        first_name: _this.state.firstName,\n        last_name: _this.state.lastName,\n        dob: dob,\n        address: _this.state.residentialAddress,\n        postcode: _this.state.postcode,\n        city: _this.state.city,\n        country: _this.state.countryOfBirth,\n        metadata: JSON.stringify({\n          nationality: _this.state.metadata.nationality\n        }),\n        confirm: true\n      };\n      var isIdentity = labels.length && labels.find(function (w) {\n        return w.key === 'profile' && w.value === 'verified' && w.scope === 'private';\n      });\n\n      if (!isIdentity && user.profile && user.profile.address) {\n        _this.props.editIdentity(profileInfo);\n      } else {\n        _this.props.sendIdentity(profileInfo);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(IdentityComponent, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prev) {\n      var _this$props2 = this.props,\n          editSuccess = _this$props2.editSuccess,\n          sendSuccess = _this$props2.sendSuccess;\n\n      if (!prev.editSuccess && editSuccess || !prev.sendSuccess && sendSuccess) {\n        this.props.labelFetch();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          editSuccess = _this$props3.editSuccess,\n          sendSuccess = _this$props3.sendSuccess,\n          lang = _this$props3.lang;\n      var _this$state2 = this.state,\n          city = _this$state2.city,\n          dateOfBirth = _this$state2.dateOfBirth,\n          firstName = _this$state2.firstName,\n          lastName = _this$state2.lastName,\n          postcode = _this$state2.postcode,\n          residentialAddress = _this$state2.residentialAddress,\n          cityFocused = _this$state2.cityFocused,\n          dateOfBirthFocused = _this$state2.dateOfBirthFocused,\n          firstNameFocused = _this$state2.firstNameFocused,\n          lastNameFocused = _this$state2.lastNameFocused,\n          postcodeFocused = _this$state2.postcodeFocused,\n          residentialAddressFocused = _this$state2.residentialAddressFocused,\n          countryOfBirth = _this$state2.countryOfBirth,\n          metadata = _this$state2.metadata;\n      var cityGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n        'pg-confirm__content-identity-col-row-content--focused': cityFocused,\n        'pg-confirm__content-identity-col-row-content--wrong': city && !this.handleValidateInput('city', city)\n      });\n      var dateOfBirthGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n        'pg-confirm__content-identity-col-row-content--focused': dateOfBirthFocused,\n        'pg-confirm__content-identity-col-row-content--wrong': dateOfBirth && !this.handleValidateInput('dateOfBirth', dateOfBirth)\n      });\n      var firstNameGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n        'pg-confirm__content-identity-col-row-content--focused': firstNameFocused,\n        'pg-confirm__content-identity-col-row-content--wrong': firstName && !this.handleValidateInput('firstName', firstName)\n      });\n      var lastNameGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n        'pg-confirm__content-identity-col-row-content--focused': lastNameFocused,\n        'pg-confirm__content-identity-col-row-content--wrong': lastName && !this.handleValidateInput('lastName', lastName)\n      });\n      var postcodeGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n        'pg-confirm__content-identity-col-row-content--focused': postcodeFocused,\n        'pg-confirm__content-identity-col-row-content--wrong': postcode && !this.handleValidateInput('postcode', postcode)\n      });\n      var residentialAddressGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n        'pg-confirm__content-identity-col-row-content--focused': residentialAddressFocused,\n        'pg-confirm__content-identity-col-row-content--wrong': residentialAddress && !this.handleValidateInput('residentialAddress', residentialAddress)\n      });\n      var dataNationalities = nationalities.map(function (value) {\n        return _this2.translate(value);\n      });\n\n      var onSelectNationality = function onSelectNationality(value) {\n        return _this2.selectNationality(dataNationalities[value]);\n      };\n      /* tslint:disable */\n\n\n      countries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n      countries.registerLocale(require(\"i18n-iso-countries/langs/ru.json\"));\n      countries.registerLocale(require(\"i18n-iso-countries/langs/zh.json\"));\n      /* tslint:enable */\n\n      var dataCountries = Object.values(countries.getNames(lang));\n\n      var onSelectCountry = function onSelectCountry(value) {\n        return _this2.selectCountry(dataCountries[value]);\n      };\n\n      return React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-forms\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: firstNameGroupClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, firstName && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.translate('page.body.kyc.identity.firstName')), React.createElement(\"input\", {\n        className: \"pg-confirm__content-identity-col-row-content-number\",\n        type: \"string\",\n        placeholder: this.translate('page.body.kyc.identity.firstName'),\n        value: firstName,\n        onChange: this.handleChange('firstName'),\n        onFocus: this.handleFieldFocus('firstName'),\n        onBlur: this.handleFieldFocus('firstName'),\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: lastNameGroupClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, lastName && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, this.translate('page.body.kyc.identity.lastName')), React.createElement(\"input\", {\n        className: \"pg-confirm__content-identity-col-row-content-number\",\n        type: \"string\",\n        placeholder: this.translate('page.body.kyc.identity.lastName'),\n        value: lastName,\n        onChange: this.handleChange('lastName'),\n        onFocus: this.handleFieldFocus('lastName'),\n        onBlur: this.handleFieldFocus('lastName'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: dateOfBirthGroupClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, dateOfBirth && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, this.translate('page.body.kyc.identity.dateOfBirth')), React.createElement(MaskInput, {\n        className: \"pg-confirm__content-identity-col-row-content-number\",\n        maskString: \"00/00/0000\",\n        mask: \"00/00/0000\",\n        onChange: this.handleChangeDate,\n        onFocus: this.handleFieldFocus('dateOfBirth'),\n        onBlur: this.handleFieldFocus('dateOfBirth'),\n        value: dateOfBirth,\n        placeholder: this.translate('page.body.kyc.identity.dateOfBirth'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row-content-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, metadata.nationality && this.translate('page.body.kyc.identity.nationality')), React.createElement(Dropdown, {\n        className: \"pg-confirm__content-documents-col-row-content-number\",\n        list: dataNationalities,\n        onSelect: onSelectNationality,\n        placeholder: this.translate('page.body.kyc.identity.nationality'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col pg-confirm__content-identity-col-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: residentialAddressGroupClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, residentialAddress && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, this.translate('page.body.kyc.identity.residentialAddress')), React.createElement(\"input\", {\n        className: \"pg-confirm__content-identity-col-row-content-number\",\n        type: \"string\",\n        placeholder: this.translate('page.body.kyc.identity.residentialAddress'),\n        value: residentialAddress,\n        onChange: this.handleChange('residentialAddress'),\n        onFocus: this.handleFieldFocus('residentialAddress'),\n        onBlur: this.handleFieldFocus('residentialAddress'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row-content-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, countryOfBirth && this.translate('page.body.kyc.identity.CoR')), React.createElement(Dropdown, {\n        className: \"pg-confirm__content-documents-col-row-content-number\",\n        list: dataCountries,\n        onSelect: onSelectCountry,\n        placeholder: this.translate('page.body.kyc.identity.CoR'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: cityGroupClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, city && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, this.translate('page.body.kyc.identity.city')), React.createElement(\"input\", {\n        className: \"pg-confirm__content-identity-col-row-content-number\",\n        type: \"string\",\n        placeholder: this.translate('page.body.kyc.identity.city'),\n        value: city,\n        onChange: this.handleChange('city'),\n        onFocus: this.handleFieldFocus('city'),\n        onBlur: this.handleFieldFocus('city'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-identity-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: postcodeGroupClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, postcode && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, this.translate('page.body.kyc.identity.postcode')), React.createElement(\"input\", {\n        className: \"pg-confirm__content-identity-col-row-content-number\",\n        type: \"string\",\n        placeholder: this.translate('page.body.kyc.identity.postcode'),\n        value: postcode,\n        onChange: this.handleChange('postcode'),\n        onFocus: this.handleFieldFocus('postcode'),\n        onBlur: this.handleFieldFocus('postcode'),\n        onKeyPress: this.handleConfirmEnterPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }))))), sendSuccess && !editSuccess && React.createElement(\"p\", {\n        className: \"pg-confirm__success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, this.translate(sendSuccess)), editSuccess && !sendSuccess && React.createElement(\"p\", {\n        className: \"pg-confirm__success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, this.translate(editSuccess)), React.createElement(\"div\", {\n        className: \"pg-confirm__content-deep\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"pg-confirm__content-phone-deep-button\",\n        label: this.translate('page.body.kyc.next'),\n        onClick: this.sendData,\n        disabled: this.handleCheckButtonDisabled(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return IdentityComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    editSuccess: selectEditIdentitySuccess(state),\n    sendSuccess: selectSendIdentitySuccess(state),\n    lang: selectCurrentLanguage(state),\n    labels: selectLabelData(state),\n    user: selectUserInfo(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    editIdentity: function editIdentity(payload) {\n      return dispatch(_editIdentity(payload));\n    },\n    sendIdentity: function sendIdentity(payload) {\n      return dispatch(_sendIdentity(payload));\n    },\n    labelFetch: function labelFetch() {\n      return dispatch(_labelFetch());\n    }\n  };\n}; // tslint:disable-next-line\n\n\nexport var Identity = injectIntl(connect(mapStateToProps, mapDispatchProps)(IdentityComponent));","map":{"version":3,"sources":["/workspaces/temx/src/containers/Confirm/Identity/index.tsx"],"names":["Button","Dropdown","cr","moment","React","injectIntl","MaskInput","connect","formatDate","isDateInFuture","editIdentity","labelFetch","selectCurrentLanguage","selectEditIdentitySuccess","selectLabelData","selectSendIdentitySuccess","selectUserInfo","sendIdentity","nationalities","countries","IdentityComponent","state","city","countryOfBirth","dateOfBirth","firstName","lastName","metadata","nationality","postcode","residentialAddress","cityFocused","dateOfBirthFocused","firstNameFocused","lastNameFocused","postcodeFocused","residentialAddressFocused","translate","e","props","intl","formatMessage","id","scrollToElement","displayedElem","element","document","getElementsByClassName","scrollIntoView","behavior","block","inline","handleFieldFocus","field","setState","handleChange","key","target","value","handleConfirmEnterPress","event","handleCheckButtonDisabled","preventDefault","sendData","handleChangeDate","selectNationality","selectCountry","getAlpha2Code","lang","handleValidateInput","firstNameRegex","RegExp","match","lastNameRegex","residentialAddressRegex","cityRegex","postcodeRegex","length","unix","Date","now","firstNameValid","lastNameValid","residentialAddressValid","cityValid","postcodeValid","dateOfBirthValid","labels","user","dob","profileInfo","first_name","last_name","address","country","JSON","stringify","confirm","isIdentity","find","w","scope","profile","prev","editSuccess","sendSuccess","cityGroupClass","dateOfBirthGroupClass","firstNameGroupClass","lastNameGroupClass","postcodeGroupClass","residentialAddressGroupClass","dataNationalities","map","onSelectNationality","registerLocale","require","dataCountries","Object","values","getNames","onSelectCountry","Component","mapStateToProps","mapDispatchProps","dispatch","payload","Identity"],"mappings":"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","sourcesContent":["import { Button, Dropdown } from '@openware/components';\nimport cr from 'classnames';\nimport * as moment from 'moment';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport MaskInput from 'react-maskinput';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { formatDate, isDateInFuture } from '../../../helpers';\nimport {\n    editIdentity,\n    Label,\n    labelFetch,\n    RootState,\n    selectCurrentLanguage,\n    selectEditIdentitySuccess,\n    selectLabelData,\n    selectSendIdentitySuccess,\n    selectUserInfo,\n    sendIdentity,\n    User,\n} from '../../../modules';\nimport { nationalities } from '../../../translations/nationalities';\n\nimport * as countries from 'i18n-iso-countries';\n\ninterface ReduxProps {\n    editSuccess?: string;\n    sendSuccess?: string;\n    lang: string;\n    labels: Label[];\n    user: User;\n}\n\ninterface DispatchProps {\n    editIdentity: typeof editIdentity;\n    sendIdentity: typeof sendIdentity;\n    labelFetch: typeof labelFetch;\n}\n\ninterface OnChangeEvent {\n    target: {\n        value: string;\n    };\n}\n\ninterface IdentityState {\n    city: string;\n    countryOfBirth: string;\n    dateOfBirth: string;\n    firstName: string;\n    lastName: string;\n    metadata: {\n        nationality: string,\n    };\n    postcode: string;\n    residentialAddress: string;\n    cityFocused: boolean;\n    dateOfBirthFocused: boolean;\n    firstNameFocused: boolean;\n    lastNameFocused: boolean;\n    postcodeFocused: boolean;\n    residentialAddressFocused: boolean;\n}\n\ntype Props = ReduxProps & DispatchProps & InjectedIntlProps;\n\nclass IdentityComponent extends React.Component<Props, IdentityState> {\n    public state = {\n        city: '',\n        countryOfBirth: '',\n        dateOfBirth: '',\n        firstName: '',\n        lastName: '',\n        metadata: {\n            nationality: '',\n        },\n        postcode: '',\n        residentialAddress: '',\n        cityFocused: false,\n        dateOfBirthFocused: false,\n        firstNameFocused: false,\n        lastNameFocused: false,\n        postcodeFocused: false,\n        residentialAddressFocused: false,\n    };\n\n    public translate = (e: string) => {\n        return this.props.intl.formatMessage({id: e});\n    };\n\n    public componentDidUpdate(prev: Props) {\n        const {\n            editSuccess,\n            sendSuccess,\n        } = this.props;\n\n        if ((!prev.editSuccess && editSuccess) || (!prev.sendSuccess && sendSuccess)) {\n            this.props.labelFetch();\n        }\n    }\n\n    public render() {\n        const {\n            editSuccess,\n            sendSuccess,\n            lang,\n        } = this.props;\n        const {\n            city,\n            dateOfBirth,\n            firstName,\n            lastName,\n            postcode,\n            residentialAddress,\n            cityFocused,\n            dateOfBirthFocused,\n            firstNameFocused,\n            lastNameFocused,\n            postcodeFocused,\n            residentialAddressFocused,\n            countryOfBirth,\n            metadata,\n        } = this.state;\n\n        const cityGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n            'pg-confirm__content-identity-col-row-content--focused': cityFocused,\n            'pg-confirm__content-identity-col-row-content--wrong': city && !this.handleValidateInput('city', city),\n        });\n\n        const dateOfBirthGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n            'pg-confirm__content-identity-col-row-content--focused': dateOfBirthFocused,\n            'pg-confirm__content-identity-col-row-content--wrong': dateOfBirth && !this.handleValidateInput('dateOfBirth', dateOfBirth),\n        });\n\n        const firstNameGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n            'pg-confirm__content-identity-col-row-content--focused': firstNameFocused,\n            'pg-confirm__content-identity-col-row-content--wrong': firstName && !this.handleValidateInput('firstName', firstName),\n        });\n\n        const lastNameGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n            'pg-confirm__content-identity-col-row-content--focused': lastNameFocused,\n            'pg-confirm__content-identity-col-row-content--wrong': lastName && !this.handleValidateInput('lastName', lastName),\n        });\n\n        const postcodeGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n            'pg-confirm__content-identity-col-row-content--focused': postcodeFocused,\n            'pg-confirm__content-identity-col-row-content--wrong': postcode && !this.handleValidateInput('postcode', postcode),\n        });\n\n        const residentialAddressGroupClass = cr('pg-confirm__content-identity-col-row-content', {\n            'pg-confirm__content-identity-col-row-content--focused': residentialAddressFocused,\n            'pg-confirm__content-identity-col-row-content--wrong': residentialAddress && !this.handleValidateInput('residentialAddress', residentialAddress),\n        });\n\n        const dataNationalities = nationalities.map(value => {\n            return this.translate(value);\n        });\n        const onSelectNationality = value => this.selectNationality(dataNationalities[value]);\n\n        /* tslint:disable */\n        countries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n        countries.registerLocale(require(\"i18n-iso-countries/langs/ru.json\"));\n        countries.registerLocale(require(\"i18n-iso-countries/langs/zh.json\"));\n        /* tslint:enable */\n\n        const dataCountries = Object.values(countries.getNames(lang));\n        const onSelectCountry = value => this.selectCountry(dataCountries[value]);\n\n        return (\n          <div className=\"pg-confirm__content-identity\">\n            <div className=\"pg-confirm__content-identity-forms\">\n                <div className=\"pg-confirm__content-identity-col\">\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                      <fieldset className={firstNameGroupClass}>\n                          {firstName && <legend>{this.translate('page.body.kyc.identity.firstName')}</legend>}\n                              <input\n                                  className=\"pg-confirm__content-identity-col-row-content-number\"\n                                  type=\"string\"\n                                  placeholder={this.translate('page.body.kyc.identity.firstName')}\n                                  value={firstName}\n                                  onChange={this.handleChange('firstName')}\n                                  onFocus={this.handleFieldFocus('firstName')}\n                                  onBlur={this.handleFieldFocus('firstName')}\n                                  autoFocus={true}\n                              />\n                      </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                        <fieldset className={lastNameGroupClass}>\n                            {lastName && <legend>{this.translate('page.body.kyc.identity.lastName')}</legend>}\n                                <input\n                                    className=\"pg-confirm__content-identity-col-row-content-number\"\n                                    type=\"string\"\n                                    placeholder={this.translate('page.body.kyc.identity.lastName')}\n                                    value={lastName}\n                                    onChange={this.handleChange('lastName')}\n                                    onFocus={this.handleFieldFocus('lastName')}\n                                    onBlur={this.handleFieldFocus('lastName')}\n                                />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                        <fieldset className={dateOfBirthGroupClass}>\n                            {dateOfBirth && <legend>{this.translate('page.body.kyc.identity.dateOfBirth')}</legend>}\n                            <MaskInput\n                                className=\"pg-confirm__content-identity-col-row-content-number\"\n                                maskString=\"00/00/0000\"\n                                mask=\"00/00/0000\"\n                                onChange={this.handleChangeDate}\n                                onFocus={this.handleFieldFocus('dateOfBirth')}\n                                onBlur={this.handleFieldFocus('dateOfBirth')}\n                                value={dateOfBirth}\n                                placeholder={this.translate('page.body.kyc.identity.dateOfBirth')}\n                            />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                        <div className=\"pg-confirm__content-identity-col-row-content\">\n                            <div className=\"pg-confirm__content-identity-col-row-content-label\">\n                                {metadata.nationality && this.translate('page.body.kyc.identity.nationality')}\n                            </div>\n                            <Dropdown\n                                className=\"pg-confirm__content-documents-col-row-content-number\"\n                                list={dataNationalities}\n                                onSelect={onSelectNationality}\n                                placeholder={this.translate('page.body.kyc.identity.nationality')}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"pg-confirm__content-identity-col pg-confirm__content-identity-col-right\">\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                        <fieldset className={residentialAddressGroupClass}>\n                            {residentialAddress && <legend>{this.translate('page.body.kyc.identity.residentialAddress')}</legend>}\n                            <input\n                                className=\"pg-confirm__content-identity-col-row-content-number\"\n                                type=\"string\"\n                                placeholder={this.translate('page.body.kyc.identity.residentialAddress')}\n                                value={residentialAddress}\n                                onChange={this.handleChange('residentialAddress')}\n                                onFocus={this.handleFieldFocus('residentialAddress')}\n                                onBlur={this.handleFieldFocus('residentialAddress')}\n                            />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                        <div className=\"pg-confirm__content-identity-col-row-content\">\n                            <div className=\"pg-confirm__content-identity-col-row-content-label\">\n                                {countryOfBirth && this.translate('page.body.kyc.identity.CoR')}\n                            </div>\n                            <Dropdown\n                                className=\"pg-confirm__content-documents-col-row-content-number\"\n                                list={dataCountries}\n                                onSelect={onSelectCountry}\n                                placeholder={this.translate('page.body.kyc.identity.CoR')}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                        <fieldset className={cityGroupClass}>\n                            {city && <legend>{this.translate('page.body.kyc.identity.city')}</legend>}\n                            <input\n                                className=\"pg-confirm__content-identity-col-row-content-number\"\n                                type=\"string\"\n                                placeholder={this.translate('page.body.kyc.identity.city')}\n                                value={city}\n                                onChange={this.handleChange('city')}\n                                onFocus={this.handleFieldFocus('city')}\n                                onBlur={this.handleFieldFocus('city')}\n                            />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-identity-col-row\">\n                        <fieldset className={postcodeGroupClass}>\n                            {postcode && <legend>{this.translate('page.body.kyc.identity.postcode')}</legend>}\n                            <input\n                                className=\"pg-confirm__content-identity-col-row-content-number\"\n                                type=\"string\"\n                                placeholder={this.translate('page.body.kyc.identity.postcode')}\n                                value={postcode}\n                                onChange={this.handleChange('postcode')}\n                                onFocus={this.handleFieldFocus('postcode')}\n                                onBlur={this.handleFieldFocus('postcode')}\n                                onKeyPress={this.handleConfirmEnterPress}\n                            />\n                        </fieldset>\n                    </div>\n                </div>\n              </div>\n              {sendSuccess && !editSuccess && <p className=\"pg-confirm__success\">{this.translate(sendSuccess)}</p>}\n              {editSuccess && !sendSuccess && <p className=\"pg-confirm__success\">{this.translate(editSuccess)}</p>}\n              <div className=\"pg-confirm__content-deep\">\n                  <Button\n                      className=\"pg-confirm__content-phone-deep-button\"\n                      label={this.translate('page.body.kyc.next')}\n                      onClick={this.sendData}\n                      disabled={this.handleCheckButtonDisabled()}\n                  />\n              </div>\n          </div>\n        );\n    }\n\n    private scrollToElement = (displayedElem: number) => {\n            const element: HTMLElement = document.getElementsByClassName('pg-confirm__content-identity-col-row')[displayedElem] as HTMLElement;\n            element && element.scrollIntoView({behavior: 'smooth', block: 'center', inline: 'nearest'});\n    }\n\n    private handleFieldFocus = (field: string) => {\n        return () => {\n            switch (field) {\n                case 'city':\n                    this.setState({\n                        cityFocused: !this.state.cityFocused,\n                    });\n                    this.scrollToElement(6);\n                    break;\n                case 'dateOfBirth':\n                    this.setState({\n                        dateOfBirthFocused: !this.state.dateOfBirthFocused,\n                    });\n                    this.scrollToElement(2);\n                    break;\n                case 'firstName':\n                    this.setState({\n                        firstNameFocused: !this.state.firstNameFocused,\n                    });\n                    this.scrollToElement(0);\n                    break;\n                case 'lastName':\n                    this.setState({\n                        lastNameFocused: !this.state.lastNameFocused,\n                    });\n                    this.scrollToElement(1);\n                    break;\n                case 'postcode':\n                    this.setState({\n                        postcodeFocused: !this.state.postcodeFocused,\n                    });\n                    this.scrollToElement(7);\n                    break;\n                case 'residentialAddress':\n                    this.setState({\n                        residentialAddressFocused: !this.state.residentialAddressFocused,\n                    });\n                    this.scrollToElement(4);\n                    break;\n                default:\n                    break;\n            }\n\n        };\n    }\n\n    private handleChange = (key: string) => {\n        return (e: OnChangeEvent) => {\n            // @ts-ignore\n            this.setState({\n                [key]: e.target.value,\n            });\n        };\n    };\n\n    private handleConfirmEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter' && !this.handleCheckButtonDisabled()) {\n            event.preventDefault();\n            this.sendData();\n        }\n    };\n\n    private handleChangeDate = (e: OnChangeEvent) => {\n        this.setState({\n            dateOfBirth: formatDate(e.target.value),\n        });\n    };\n\n    private selectNationality = (value: string) => {\n        this.setState({\n            metadata: { nationality: value },\n        });\n    };\n\n    private selectCountry = (value: string) => {\n        this.setState({\n            countryOfBirth: countries.getAlpha2Code(value, this.props.lang),\n        });\n    };\n\n    private handleValidateInput = (field: string, value: string): boolean => {\n        switch (field) {\n            case 'firstName':\n                const firstNameRegex = new RegExp(`^[a-zA-Z]{1,100}$`);\n                return value.match(firstNameRegex) ? true : false;\n            case 'lastName':\n                const lastNameRegex = new RegExp(`^[a-zA-Z]{1,100}$`);\n                return value.match(lastNameRegex) ? true : false;\n            case 'residentialAddress':\n                const residentialAddressRegex = new RegExp(`^[a-zA-Z0-9,.;/\\\\s]+$`);\n                return value.match(residentialAddressRegex) ? true : false;\n            case 'city':\n                const cityRegex = new RegExp(`^[a-zA-Z]+$`);\n                return value.match(cityRegex) ? true : false;\n            case 'postcode':\n                const postcodeRegex = new RegExp(`^[0-9]{1,12}$`);\n                return value.match(postcodeRegex) ? true : false;\n            case 'dateOfBirth':\n                if (value.length === 10) {\n                    return moment(value, 'DD/MM/YYYY').unix() < (Date.now() / 1000);\n                }\n\n                return false;\n            default:\n                return true;\n        }\n    }\n\n    private handleCheckButtonDisabled = () => {\n        const {\n            city,\n            dateOfBirth,\n            firstName,\n            lastName,\n            postcode,\n            residentialAddress,\n            countryOfBirth,\n            metadata,\n        } = this.state;\n\n        const firstNameValid = this.handleValidateInput('firstName', firstName);\n        const lastNameValid = this.handleValidateInput('lastName', lastName);\n        const residentialAddressValid = this.handleValidateInput('residentialAddress', residentialAddress);\n        const cityValid = this.handleValidateInput('city', city);\n        const postcodeValid = this.handleValidateInput('postcode', postcode);\n        const dateOfBirthValid = this.handleValidateInput('dateOfBirth', dateOfBirth);\n\n        return (\n            !firstNameValid\n            || !lastNameValid\n            || !metadata.nationality\n            || !residentialAddressValid\n            || !countryOfBirth\n            || !cityValid\n            || !postcodeValid\n            || !dateOfBirthValid\n        );\n    }\n\n    private sendData = () => {\n        const { labels, user } = this.props;\n        const dob = !isDateInFuture(this.state.dateOfBirth) ? this.state.dateOfBirth : '';\n        const profileInfo = {\n            first_name: this.state.firstName,\n            last_name: this.state.lastName,\n            dob,\n            address: this.state.residentialAddress,\n            postcode: this.state.postcode,\n            city: this.state.city,\n            country: this.state.countryOfBirth,\n            metadata: JSON.stringify({\n                nationality: this.state.metadata.nationality,\n            }),\n            confirm: true,\n        };\n        const isIdentity = labels.length && labels.find(w => w.key === 'profile' && w.value === 'verified' && w.scope === 'private');\n\n        if (!isIdentity && user.profile && user.profile.address) {\n            this.props.editIdentity(profileInfo);\n        } else {\n            this.props.sendIdentity(profileInfo);\n        }\n    }\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    editSuccess: selectEditIdentitySuccess(state),\n    sendSuccess: selectSendIdentitySuccess(state),\n    lang: selectCurrentLanguage(state),\n    labels: selectLabelData(state),\n    user: selectUserInfo(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        editIdentity: payload => dispatch(editIdentity(payload)),\n        sendIdentity: payload => dispatch(sendIdentity(payload)),\n        labelFetch: () => dispatch(labelFetch()),\n    });\n\n// tslint:disable-next-line\nexport const Identity = injectIntl(connect(mapStateToProps, mapDispatchProps)(IdentityComponent) as any);\n"]},"metadata":{},"sourceType":"module"}