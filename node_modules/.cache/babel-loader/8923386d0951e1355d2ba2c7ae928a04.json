{"ast":null,"code":"import _toConsumableArray from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nexport var handleIncrementalUpdate = function handleIncrementalUpdate(depthOld, newLevel, type) {\n  if (newLevel.length !== 2) {\n    return depthOld;\n  }\n\n  var newLevelPrice = +newLevel[0];\n  var newLevelVolume = +newLevel[1];\n\n  var depthNew = _toConsumableArray(depthOld);\n\n  if (depthOld.length === 0) {\n    return [newLevel];\n  }\n\n  for (var index = 0; index < depthOld.length; index++) {\n    var levelPrice = +depthOld[index][0];\n\n    if (type === 'asks' && newLevelVolume > 0) {\n      if (newLevelPrice < levelPrice) {\n        depthNew.splice(index, 0, newLevel);\n        break;\n      }\n\n      if (newLevelPrice > levelPrice && index === depthOld.length - 1) {\n        depthNew.push(newLevel);\n        break;\n      }\n    }\n\n    if (type === 'bids' && newLevelVolume > 0) {\n      if (newLevelPrice > levelPrice) {\n        depthNew.splice(index, 0, newLevel);\n        break;\n      }\n\n      if (newLevelPrice < levelPrice && index === depthOld.length - 1) {\n        depthNew.push(newLevel);\n        break;\n      }\n    }\n\n    if (newLevelPrice === levelPrice) {\n      if (newLevelVolume === 0) {\n        depthNew.splice(index, 1);\n      } else {\n        depthNew.splice(index, 1, newLevel);\n      }\n\n      break;\n    }\n  }\n\n  return depthNew;\n};","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/helpers/handleIncrementalUpdate.ts"],"names":["handleIncrementalUpdate","depthOld","newLevel","type","length","newLevelPrice","newLevelVolume","depthNew","index","levelPrice","splice","push"],"mappings":";AAAA,OAAO,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,QAAD,EAAuBC,QAAvB,EAA2CC,IAA3C,EAAwE;AAC3G,MAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACvB,WAAOH,QAAP;AACH;;AACD,MAAMI,aAAa,GAAG,CAACH,QAAQ,CAAC,CAAD,CAA/B;AACA,MAAMI,cAAc,GAAG,CAACJ,QAAQ,CAAC,CAAD,CAAhC;;AACA,MAAMK,QAAQ,sBAAON,QAAP,CAAd;;AAEA,MAAIA,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,CAACF,QAAD,CAAP;AACD;;AAED,OAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,QAAQ,CAACG,MAArC,EAA6CI,KAAK,EAAlD,EAAsD;AAClD,QAAMC,UAAU,GAAG,CAACR,QAAQ,CAACO,KAAD,CAAR,CAAgB,CAAhB,CAApB;;AACA,QAAIL,IAAI,KAAK,MAAT,IAAmBG,cAAc,GAAG,CAAxC,EAA2C;AACvC,UAAID,aAAa,GAAGI,UAApB,EAAgC;AAC5BF,QAAAA,QAAQ,CAACG,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB,EAA0BN,QAA1B;AACA;AACH;;AAED,UAAIG,aAAa,GAAGI,UAAhB,IAA8BD,KAAK,KAAMP,QAAQ,CAACG,MAAT,GAAkB,CAA/D,EAAmE;AAC/DG,QAAAA,QAAQ,CAACI,IAAT,CAAcT,QAAd;AACA;AACH;AACJ;;AAED,QAAIC,IAAI,KAAK,MAAT,IAAmBG,cAAc,GAAG,CAAxC,EAA2C;AACvC,UAAID,aAAa,GAAGI,UAApB,EAAgC;AAC5BF,QAAAA,QAAQ,CAACG,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB,EAA0BN,QAA1B;AACA;AACH;;AAED,UAAIG,aAAa,GAAGI,UAAhB,IAA8BD,KAAK,KAAMP,QAAQ,CAACG,MAAT,GAAkB,CAA/D,EAAmE;AAC/DG,QAAAA,QAAQ,CAACI,IAAT,CAAcT,QAAd;AACA;AACH;AACJ;;AAED,QAAIG,aAAa,KAAKI,UAAtB,EAAkC;AAC9B,UAAIH,cAAc,KAAK,CAAvB,EAA0B;AACtBC,QAAAA,QAAQ,CAACG,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB;AACH,OAFD,MAEO;AACHD,QAAAA,QAAQ,CAACG,MAAT,CAAgBF,KAAhB,EAAuB,CAAvB,EAA0BN,QAA1B;AACH;;AACD;AACH;AACJ;;AAED,SAAOK,QAAP;AACH,CAjDM","sourcesContent":["export const handleIncrementalUpdate = (depthOld: string[][], newLevel: string[], type: string): string[][] => {\n    if (newLevel.length !== 2) {\n        return depthOld;\n    }\n    const newLevelPrice = +newLevel[0];\n    const newLevelVolume = +newLevel[1];\n    const depthNew = [...depthOld];\n\n    if (depthOld.length === 0) {\n      return [newLevel];\n    }\n\n    for (let index = 0; index < depthOld.length; index++) {\n        const levelPrice = +depthOld[index][0];\n        if (type === 'asks' && newLevelVolume > 0) {\n            if (newLevelPrice < levelPrice) {\n                depthNew.splice(index, 0, newLevel);\n                break;\n            }\n\n            if (newLevelPrice > levelPrice && index === (depthOld.length - 1)) {\n                depthNew.push(newLevel);\n                break;\n            }\n        }\n\n        if (type === 'bids' && newLevelVolume > 0) {\n            if (newLevelPrice > levelPrice) {\n                depthNew.splice(index, 0, newLevel);\n                break;\n            }\n\n            if (newLevelPrice < levelPrice && index === (depthOld.length - 1)) {\n                depthNew.push(newLevel);\n                break;\n            }\n        }\n\n        if (newLevelPrice === levelPrice) {\n            if (newLevelVolume === 0) {\n                depthNew.splice(index, 1);\n            } else {\n                depthNew.splice(index, 1, newLevel);\n            }\n            break;\n        }\n    }\n\n    return depthNew;\n};\n"]},"metadata":{},"sourceType":"module"}