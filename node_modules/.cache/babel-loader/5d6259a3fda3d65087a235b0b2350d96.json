{"ast":null,"code":"import _toConsumableArray from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { kindToMakerType } from '../../helpers';\nexport var convertOrderAPI = function convertOrderAPI(order) {\n  var id = order.id,\n      side = order.side,\n      price = order.price,\n      state = order.state,\n      created_at = order.created_at,\n      remaining_volume = order.remaining_volume,\n      origin_volume = order.origin_volume,\n      executed_volume = order.executed_volume,\n      market = order.market,\n      ord_type = order.ord_type,\n      avg_price = order.avg_price,\n      updated_at = order.updated_at;\n  return {\n    id: id,\n    side: side,\n    price: Number(price),\n    state: state,\n    created_at: created_at,\n    origin_volume: Number(origin_volume),\n    remaining_volume: Number(remaining_volume),\n    executed_volume: Number(executed_volume),\n    market: market,\n    ord_type: ord_type,\n    avg_price: Number(avg_price),\n    updated_at: updated_at\n  };\n};\nexport var convertOrderEvent = function convertOrderEvent(orderEvent) {\n  var id = orderEvent.id,\n      at = orderEvent.at,\n      kind = orderEvent.kind,\n      price = orderEvent.price,\n      state = orderEvent.state,\n      remaining_volume = orderEvent.remaining_volume,\n      origin_volume = orderEvent.origin_volume,\n      market = orderEvent.market,\n      ord_type = orderEvent.ord_type,\n      updated_at = orderEvent.updated_at;\n  return {\n    id: id,\n    side: kindToMakerType(kind),\n    price: Number(price),\n    state: state,\n    remaining_volume: Number(remaining_volume),\n    executed_volume: Number(origin_volume) - Number(remaining_volume),\n    origin_volume: Number(origin_volume),\n    created_at: new Date(Number(at) * 1000).toISOString(),\n    market: market,\n    ord_type: ord_type,\n    updated_at: updated_at\n  };\n};\nexport var insertOrUpdate = function insertOrUpdate(list, order) {\n  var state = order.state,\n      id = order.id;\n\n  switch (state) {\n    case 'wait':\n      var index = list.findIndex(function (value) {\n        return value.id === id;\n      });\n\n      if (index === -1) {\n        return list.concat(_objectSpread({}, order));\n      }\n\n      return list.map(function (item) {\n        if (item.id === order.id) {\n          return _objectSpread({}, order);\n        }\n\n        return item;\n      });\n\n    default:\n      return list.reduce(function (memo, item) {\n        if (id !== item.id) {\n          memo.push(item);\n        }\n\n        return memo;\n      }, []);\n  }\n};\nexport var insertIfNotExisted = function insertIfNotExisted(list, order) {\n  var index = list.findIndex(function (value) {\n    return value.id === order.id;\n  });\n  return index === -1 ? list.concat(_objectSpread({}, order)) : _toConsumableArray(list);\n};","map":{"version":3,"sources":["/workspaces/temx/src/modules/user/openOrders/helpers.ts"],"names":["kindToMakerType","convertOrderAPI","order","id","side","price","state","created_at","remaining_volume","origin_volume","executed_volume","market","ord_type","avg_price","updated_at","Number","convertOrderEvent","orderEvent","at","kind","Date","toISOString","insertOrUpdate","list","index","findIndex","value","concat","map","item","reduce","memo","push","insertIfNotExisted"],"mappings":"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","sourcesContent":["import { kindToMakerType } from '../../helpers';\nimport { OrderAPI, OrderCommon, OrderEvent } from '../../types';\n\nexport const convertOrderAPI = (order: OrderAPI): OrderCommon => {\n    const {\n        id,\n        side,\n        price,\n        state,\n        created_at,\n        remaining_volume,\n        origin_volume,\n        executed_volume,\n        market,\n        ord_type,\n        avg_price,\n        updated_at,\n    } = order;\n    return {\n        id,\n        side,\n        price: Number(price),\n        state,\n        created_at,\n        origin_volume: Number(origin_volume),\n        remaining_volume: Number(remaining_volume),\n        executed_volume: Number(executed_volume),\n        market,\n        ord_type,\n        avg_price: Number(avg_price),\n        updated_at,\n    };\n};\n\nexport const convertOrderEvent = (orderEvent: OrderEvent): OrderCommon => {\n    const {\n        id,\n        at,\n        kind,\n        price,\n        state,\n        remaining_volume,\n        origin_volume,\n        market, ord_type,\n        updated_at,\n    } = orderEvent;\n    return {\n        id,\n        side: kindToMakerType(kind),\n        price: Number(price),\n        state,\n        remaining_volume: Number(remaining_volume),\n        executed_volume: Number(origin_volume) - Number(remaining_volume),\n        origin_volume: Number(origin_volume),\n        created_at: new Date(Number(at) * 1000).toISOString(),\n        market,\n        ord_type,\n        updated_at,\n    };\n};\n\nexport const insertOrUpdate = (list: OrderCommon[], order: OrderCommon): OrderCommon[] => {\n    const { state, id } = order;\n    switch (state) {\n        case 'wait':\n            const index = list.findIndex((value: OrderCommon) => value.id === id);\n            if (index === -1) {\n                return list.concat({...order});\n            }\n            return list.map(item => {\n                if (item.id === order.id) {\n                    return {...order};\n                }\n                return item;\n            });\n        default:\n            return list.reduce((memo: OrderCommon[], item: OrderCommon): OrderCommon[] => {\n                if (id !== item.id) {\n                    memo.push(item);\n                }\n                return memo;\n            }, []);\n    }\n};\n\nexport const insertIfNotExisted = (list: OrderCommon[], order: OrderCommon): OrderCommon[] => {\n    const index = list.findIndex((value: OrderCommon) => value.id === order.id);\n    return (index === -1) ? list.concat({...order}) : [...list];\n};\n"]},"metadata":{},"sourceType":"module"}