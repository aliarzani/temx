{"ast":null,"code":"import _defineProperty from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/TradingChart/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// tslint:disable\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { widget } from '../../charting_library/charting_library.min';\nimport { stdTimezoneOffset } from '../../helpers';\nimport { klineUpdatePeriod as _klineUpdatePeriod, klineUpdateTimeRange as _klineUpdateTimeRange, selectCurrentColorTheme, selectCurrentLanguage, selectCurrentMarket, selectKline, selectMarkets, selectMarketTickers } from '../../modules';\nimport { rangerSubscribeKlineMarket, rangerUnsubscribeKlineMarket } from '../../modules/public/ranger';\nimport { dataFeedObject, print } from './api';\nimport { widgetOptions, widgetParams } from './config';\nimport { getTradingChartTimezone } from './timezones';\nexport var TradingChartComponent =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TradingChartComponent, _React$PureComponent);\n\n  function TradingChartComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TradingChartComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TradingChartComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.currentKlineSubscription = {};\n    _this.tvWidget = null;\n    _this.datafeed = dataFeedObject(_assertThisInitialized(_this), _this.props.markets);\n\n    _this.setChart = function (markets, currentMarket, colorTheme) {\n      var kline = _this.props.kline;\n      _this.datafeed = dataFeedObject(_assertThisInitialized(_this), markets);\n      var currentTimeOffset = new Date().getTimezoneOffset();\n      var clockPeriod = currentTimeOffset === stdTimezoneOffset(new Date()) ? 'STD' : 'DST';\n\n      if (_this.props.kline.period) {\n        widgetParams.interval = _this.props.kline.period;\n      }\n\n      var defaultWidgetOptions = {\n        symbol: currentMarket.id,\n        datafeed: _this.datafeed,\n        interval: widgetParams.interval,\n        container_id: widgetParams.containerId,\n        locale: _this.props.lang,\n        timezone: getTradingChartTimezone(currentTimeOffset, clockPeriod)\n      };\n      _this.tvWidget = new widget(_objectSpread({}, defaultWidgetOptions, {}, widgetOptions(colorTheme)));\n      var previousRange = {\n        from: 0,\n        to: 0\n      };\n\n      if (kline.range.from !== 0 && kline.range.to !== 0) {\n        previousRange = _this.props.kline.range;\n      }\n\n      var previousResolution = '';\n\n      if (kline.period) {\n        previousResolution = kline.period;\n      }\n\n      _this.tvWidget.onChartReady(function () {\n        _this.tvWidget.activeChart().setSymbol(currentMarket.id, function () {\n          print('Symbol set', currentMarket.id);\n        });\n\n        if (previousRange.from !== 0 && previousRange.to !== 0) {\n          _this.tvWidget.activeChart().setVisibleRange(previousRange, function () {\n            print('Range set', previousRange);\n          });\n        }\n\n        if (previousResolution) {\n          _this.tvWidget.activeChart().setResolution(previousResolution.toUpperCase(), function () {\n            print('Resolution set', previousResolution);\n          });\n        }\n      });\n    };\n\n    _this.updateChart = function (currentMarket) {\n      if (_this.tvWidget) {\n        _this.tvWidget.onChartReady(function () {\n          _this.tvWidget.activeChart().setSymbol(currentMarket.id, function () {\n            print('Symbol set', currentMarket.id);\n          });\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(TradingChartComponent, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.currentMarket && next.colorTheme && next.colorTheme !== this.props.colorTheme) {\n        this.setChart(next.markets, next.currentMarket, next.colorTheme);\n      }\n\n      if (next.currentMarket && (!this.props.currentMarket || next.currentMarket.id !== this.props.currentMarket.id)) {\n        if (this.props.currentMarket && this.props.currentMarket.id && this.tvWidget) {\n          this.updateChart(next.currentMarket);\n        } else {\n          this.setChart(next.markets, next.currentMarket, next.colorTheme);\n        }\n      }\n\n      if (next.kline && next.kline !== this.props.kline) {\n        this.datafeed.onRealtimeCallback(next.kline);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          colorTheme = _this$props.colorTheme,\n          currentMarket = _this$props.currentMarket,\n          markets = _this$props.markets;\n\n      if (currentMarket) {\n        this.setChart(markets, currentMarket, colorTheme);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.tvWidget) {\n        try {\n          this.tvWidget.remove();\n        } catch (error) {\n          window.console.log(\"TradingChart unmount failed: \".concat(error));\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-table-header__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.props.currentMarket ? this.props.currentMarket.name : ''), React.createElement(\"div\", {\n        id: widgetParams.containerId,\n        className: \"pg-trading-chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TradingChartComponent;\n}(React.PureComponent);\n\nvar reduxProps = function reduxProps(state) {\n  return {\n    markets: selectMarkets(state),\n    colorTheme: selectCurrentColorTheme(state),\n    currentMarket: selectCurrentMarket(state),\n    tickers: selectMarketTickers(state),\n    kline: selectKline(state),\n    lang: selectCurrentLanguage(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    klineUpdateTimeRange: function klineUpdateTimeRange(payload) {\n      return dispatch(_klineUpdateTimeRange(payload));\n    },\n    subscribeKline: function subscribeKline(marketId, periodString) {\n      return dispatch(rangerSubscribeKlineMarket(marketId, periodString));\n    },\n    unSubscribeKline: function unSubscribeKline(marketId, periodString) {\n      return dispatch(rangerUnsubscribeKlineMarket(marketId, periodString));\n    },\n    klineUpdatePeriod: function klineUpdatePeriod(payload) {\n      return dispatch(_klineUpdatePeriod(payload));\n    }\n  };\n};\n\nexport var TradingChart = connect(reduxProps, mapDispatchProps)(TradingChartComponent);","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/TradingChart/index.tsx"],"names":["React","connect","widget","stdTimezoneOffset","klineUpdatePeriod","klineUpdateTimeRange","selectCurrentColorTheme","selectCurrentLanguage","selectCurrentMarket","selectKline","selectMarkets","selectMarketTickers","rangerSubscribeKlineMarket","rangerUnsubscribeKlineMarket","dataFeedObject","print","widgetOptions","widgetParams","getTradingChartTimezone","TradingChartComponent","currentKlineSubscription","tvWidget","datafeed","props","markets","setChart","currentMarket","colorTheme","kline","currentTimeOffset","Date","getTimezoneOffset","clockPeriod","period","interval","defaultWidgetOptions","symbol","id","container_id","containerId","locale","lang","timezone","previousRange","from","to","range","previousResolution","onChartReady","activeChart","setSymbol","setVisibleRange","setResolution","toUpperCase","updateChart","next","onRealtimeCallback","remove","error","window","console","log","name","PureComponent","reduxProps","state","tickers","mapDispatchProps","dispatch","payload","subscribeKline","marketId","periodString","unSubscribeKline","TradingChart"],"mappings":";;;;;;;;;;;;;AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACIC,OADJ,QAIO,aAJP;AAKA,SAGIC,MAHJ,QAIO,6CAJP;AAKA,SAASC,iBAAT,QAAkC,eAAlC;AACA,SAEIC,iBAAiB,IAAjBA,kBAFJ,EAGIC,oBAAoB,IAApBA,qBAHJ,EAOIC,uBAPJ,EAQIC,qBARJ,EASIC,mBATJ,EAUIC,WAVJ,EAWIC,aAXJ,EAYIC,mBAZJ,QAaO,eAbP;AAcA,SACIC,0BADJ,EAEIC,4BAFJ,QAGO,6BAHP;AAIA,SAEIC,cAFJ,EAGIC,KAHJ,QAIO,OAJP;AAKA,SACIC,aADJ,EAEIC,YAFJ,QAGO,UAHP;AAIA,SAASC,uBAAT,QAAwC,aAAxC;AAoBA,WAAaC,qBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UACWC,wBADX,GACgE,EADhE;AAAA,UAEWC,QAFX,GAEqD,IAFrD;AAAA,UAIYC,QAJZ,GAIuBR,cAAc,gCAAO,MAAKS,KAAL,CAAWC,OAAlB,CAJrC;;AAAA,UAyDYC,QAzDZ,GAyDuB,UAACD,OAAD,EAAoBE,aAApB,EAA2CC,UAA3C,EAAkE;AAAA,UACzEC,KADyE,GAC/D,MAAKL,KAD0D,CACzEK,KADyE;AAEjF,YAAKN,QAAL,GAAgBR,cAAc,gCAAOU,OAAP,CAA9B;AACA,UAAMK,iBAAiB,GAAG,IAAIC,IAAJ,GAAWC,iBAAX,EAA1B;AACA,UAAMC,WAAW,GAAGH,iBAAiB,KAAK1B,iBAAiB,CAAC,IAAI2B,IAAJ,EAAD,CAAvC,GAAsD,KAAtD,GAA8D,KAAlF;;AAEA,UAAI,MAAKP,KAAL,CAAWK,KAAX,CAAiBK,MAArB,EAA6B;AACzBhB,QAAAA,YAAY,CAACiB,QAAb,GAAwB,MAAKX,KAAL,CAAWK,KAAX,CAAiBK,MAAzC;AACH;;AACD,UAAME,oBAAoB,GAAG;AACzBC,QAAAA,MAAM,EAAEV,aAAa,CAACW,EADG;AAEzBf,QAAAA,QAAQ,EAAE,MAAKA,QAFU;AAGzBY,QAAAA,QAAQ,EAAEjB,YAAY,CAACiB,QAHE;AAIzBI,QAAAA,YAAY,EAAErB,YAAY,CAACsB,WAJF;AAKzBC,QAAAA,MAAM,EAAE,MAAKjB,KAAL,CAAWkB,IALM;AAMzBC,QAAAA,QAAQ,EAAExB,uBAAuB,CAACW,iBAAD,EAAoBG,WAApB;AANR,OAA7B;AASA,YAAKX,QAAL,GAAgB,IAAInB,MAAJ,mBAAeiC,oBAAf,MAAwCnB,aAAa,CAACW,UAAD,CAArD,EAAhB;AAEA,UAAIgB,aAAa,GAAG;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,EAAE,EAAE;AAAf,OAApB;;AACA,UAAIjB,KAAK,CAACkB,KAAN,CAAYF,IAAZ,KAAqB,CAArB,IAA0BhB,KAAK,CAACkB,KAAN,CAAYD,EAAZ,KAAmB,CAAjD,EAAoD;AAChDF,QAAAA,aAAa,GAAG,MAAKpB,KAAL,CAAWK,KAAX,CAAiBkB,KAAjC;AACH;;AAED,UAAIC,kBAAkB,GAAG,EAAzB;;AACA,UAAInB,KAAK,CAACK,MAAV,EAAkB;AACdc,QAAAA,kBAAkB,GAAGnB,KAAK,CAACK,MAA3B;AACH;;AAED,YAAKZ,QAAL,CAAc2B,YAAd,CAA2B,YAAM;AAC7B,cAAK3B,QAAL,CAAe4B,WAAf,GAA6BC,SAA7B,CAAuCxB,aAAa,CAACW,EAArD,EAAyD,YAAM;AAC3DtB,UAAAA,KAAK,CAAC,YAAD,EAAeW,aAAa,CAACW,EAA7B,CAAL;AACH,SAFD;;AAIA,YAAIM,aAAa,CAACC,IAAd,KAAuB,CAAvB,IAA4BD,aAAa,CAACE,EAAd,KAAqB,CAArD,EAAwD;AACpD,gBAAKxB,QAAL,CAAe4B,WAAf,GAA6BE,eAA7B,CAA6CR,aAA7C,EAA4D,YAAM;AAC9D5B,YAAAA,KAAK,CAAC,WAAD,EAAc4B,aAAd,CAAL;AACH,WAFD;AAGH;;AAED,YAAII,kBAAJ,EAAwB;AACpB,gBAAK1B,QAAL,CAAe4B,WAAf,GAA6BG,aAA7B,CAA2CL,kBAAkB,CAACM,WAAnB,EAA3C,EAA6E,YAAM;AAC/EtC,YAAAA,KAAK,CAAC,gBAAD,EAAmBgC,kBAAnB,CAAL;AACH,WAFD;AAGH;AACJ,OAhBD;AAiBH,KAxGL;;AAAA,UA0GYO,WA1GZ,GA0G0B,UAAC5B,aAAD,EAA2B;AAC7C,UAAI,MAAKL,QAAT,EAAmB;AACf,cAAKA,QAAL,CAAc2B,YAAd,CAA2B,YAAM;AAC7B,gBAAK3B,QAAL,CAAe4B,WAAf,GAA6BC,SAA7B,CAAuCxB,aAAa,CAACW,EAArD,EAAyD,YAAM;AAC3DtB,YAAAA,KAAK,CAAC,YAAD,EAAeW,aAAa,CAACW,EAA7B,CAAL;AACH,WAFD;AAGH,SAJD;AAKH;AACJ,KAlHL;;AAAA;AAAA;;AAAA;AAAA;AAAA,8CAMqCkB,IANrC,EAMkD;AAC1C,UAAIA,IAAI,CAAC7B,aAAL,IAAsB6B,IAAI,CAAC5B,UAA3B,IAAyC4B,IAAI,CAAC5B,UAAL,KAAoB,KAAKJ,KAAL,CAAWI,UAA5E,EAAwF;AACpF,aAAKF,QAAL,CAAc8B,IAAI,CAAC/B,OAAnB,EAA4B+B,IAAI,CAAC7B,aAAjC,EAAgD6B,IAAI,CAAC5B,UAArD;AACH;;AAED,UAAI4B,IAAI,CAAC7B,aAAL,KAAuB,CAAC,KAAKH,KAAL,CAAWG,aAAZ,IAA6B6B,IAAI,CAAC7B,aAAL,CAAmBW,EAAnB,KAA0B,KAAKd,KAAL,CAAWG,aAAX,CAAyBW,EAAvG,CAAJ,EAAgH;AAC5G,YAAI,KAAKd,KAAL,CAAWG,aAAX,IAA6B,KAAKH,KAAL,CAAWG,aAAX,CAAyBW,EAAzB,IAA+B,KAAKhB,QAArE,EAAgF;AAC5E,eAAKiC,WAAL,CAAiBC,IAAI,CAAC7B,aAAtB;AACH,SAFD,MAEO;AACH,eAAKD,QAAL,CAAc8B,IAAI,CAAC/B,OAAnB,EAA4B+B,IAAI,CAAC7B,aAAjC,EAAgD6B,IAAI,CAAC5B,UAArD;AACH;AACJ;;AAED,UAAI4B,IAAI,CAAC3B,KAAL,IAAc2B,IAAI,CAAC3B,KAAL,KAAe,KAAKL,KAAL,CAAWK,KAA5C,EAAmD;AAC/C,aAAKN,QAAL,CAAckC,kBAAd,CAAiCD,IAAI,CAAC3B,KAAtC;AACH;AACJ;AAtBL;AAAA;AAAA,wCAwB+B;AAAA,wBAKnB,KAAKL,KALc;AAAA,UAEnBI,UAFmB,eAEnBA,UAFmB;AAAA,UAGnBD,aAHmB,eAGnBA,aAHmB;AAAA,UAInBF,OAJmB,eAInBA,OAJmB;;AAOvB,UAAIE,aAAJ,EAAmB;AACf,aAAKD,QAAL,CAAcD,OAAd,EAAuBE,aAAvB,EAAsCC,UAAtC;AACH;AACJ;AAlCL;AAAA;AAAA,2CAoCkC;AAC1B,UAAI,KAAKN,QAAT,EAAmB;AACf,YAAI;AACA,eAAKA,QAAL,CAAcoC,MAAd;AACH,SAFD,CAEE,OAAOC,KAAP,EAAc;AACZC,UAAAA,MAAM,CAACC,OAAP,CAAeC,GAAf,wCAAmDH,KAAnD;AACH;AACJ;AACJ;AA5CL;AAAA;AAAA,6BA8CoB;AACZ,aACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKnC,KAAL,CAAWG,aAAX,GAA2B,KAAKH,KAAL,CAAWG,aAAX,CAAyBoC,IAApD,GAA2D,EADhE,CADJ,EAII;AAAK,QAAA,EAAE,EAAE7C,YAAY,CAACsB,WAAtB;AAAmC,QAAA,SAAS,EAAC,kBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ;AAQH;AAvDL;;AAAA;AAAA,EAA2CvC,KAAK,CAAC+D,aAAjD;;AAqHA,IAAMC,UAAsD,GAAG,SAAzDA,UAAyD,CAAAC,KAAK;AAAA,SAAK;AACrEzC,IAAAA,OAAO,EAAEd,aAAa,CAACuD,KAAD,CAD+C;AAErEtC,IAAAA,UAAU,EAAErB,uBAAuB,CAAC2D,KAAD,CAFkC;AAGrEvC,IAAAA,aAAa,EAAElB,mBAAmB,CAACyD,KAAD,CAHmC;AAIrEC,IAAAA,OAAO,EAAEvD,mBAAmB,CAACsD,KAAD,CAJyC;AAKrErC,IAAAA,KAAK,EAAEnB,WAAW,CAACwD,KAAD,CALmD;AAMrExB,IAAAA,IAAI,EAAElC,qBAAqB,CAAC0D,KAAD;AAN0C,GAAL;AAAA,CAApE;;AASA,IAAME,gBAA+D,GAAG,SAAlEA,gBAAkE,CAAAC,QAAQ;AAAA,SAAK;AACjF/D,IAAAA,oBAAoB,EAAE,8BAAAgE,OAAO;AAAA,aAAID,QAAQ,CAAC/D,qBAAoB,CAACgE,OAAD,CAArB,CAAZ;AAAA,KADoD;AAEjFC,IAAAA,cAAc,EAAE,wBAACC,QAAD,EAAmBC,YAAnB;AAAA,aAA4CJ,QAAQ,CAACxD,0BAA0B,CAAC2D,QAAD,EAAWC,YAAX,CAA3B,CAApD;AAAA,KAFiE;AAGjFC,IAAAA,gBAAgB,EAAE,0BAACF,QAAD,EAAmBC,YAAnB;AAAA,aAA4CJ,QAAQ,CAACvD,4BAA4B,CAAC0D,QAAD,EAAWC,YAAX,CAA7B,CAApD;AAAA,KAH+D;AAIjFpE,IAAAA,iBAAiB,EAAE,2BAAAiE,OAAO;AAAA,aAAID,QAAQ,CAAChE,kBAAiB,CAACiE,OAAD,CAAlB,CAAZ;AAAA;AAJuD,GAAL;AAAA,CAAhF;;AAOA,OAAO,IAAMK,YAAY,GAAGzE,OAAO,CAA2C+D,UAA3C,EAAuDG,gBAAvD,CAAP,CAAgFhD,qBAAhF,CAArB","sourcesContent":["// tslint:disable\nimport * as React from 'react';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport {\n    IChartingLibraryWidget,\n    LanguageCode,\n    widget,\n} from '../../charting_library/charting_library.min';\nimport { stdTimezoneOffset } from '../../helpers';\nimport {\n    KlineState,\n    klineUpdatePeriod,\n    klineUpdateTimeRange,\n    Market,\n    MarketsState,\n    RootState,\n    selectCurrentColorTheme,\n    selectCurrentLanguage,\n    selectCurrentMarket,\n    selectKline,\n    selectMarkets,\n    selectMarketTickers,\n} from '../../modules';\nimport {\n    rangerSubscribeKlineMarket,\n    rangerUnsubscribeKlineMarket,\n} from '../../modules/public/ranger';\nimport {\n    CurrentKlineSubscription,\n    dataFeedObject,\n    print,\n} from './api';\nimport {\n    widgetOptions,\n    widgetParams,\n} from './config';\nimport { getTradingChartTimezone } from './timezones';\n\ninterface ReduxProps {\n    markets: Market[];\n    colorTheme: string;\n    currentMarket?: Market;\n    tickers: MarketsState['tickers'];\n    kline: KlineState;\n    lang: string;\n}\n\ninterface DispatchProps {\n    subscribeKline: typeof rangerSubscribeKlineMarket;\n    unSubscribeKline: typeof rangerUnsubscribeKlineMarket;\n    klineUpdateTimeRange: typeof klineUpdateTimeRange;\n    klineUpdatePeriod: typeof klineUpdatePeriod;\n}\n\ntype Props = ReduxProps & DispatchProps;\n\nexport class TradingChartComponent extends React.PureComponent<Props> {\n    public currentKlineSubscription: CurrentKlineSubscription = {};\n    public tvWidget: IChartingLibraryWidget | null = null;\n\n    private datafeed = dataFeedObject(this, this.props.markets);\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.currentMarket && next.colorTheme && next.colorTheme !== this.props.colorTheme) {\n            this.setChart(next.markets, next.currentMarket, next.colorTheme);\n        }\n\n        if (next.currentMarket && (!this.props.currentMarket || next.currentMarket.id !== this.props.currentMarket.id)) {\n            if (this.props.currentMarket && (this.props.currentMarket.id && this.tvWidget)) {\n                this.updateChart(next.currentMarket);\n            } else {\n                this.setChart(next.markets, next.currentMarket, next.colorTheme);\n            }\n        }\n\n        if (next.kline && next.kline !== this.props.kline) {\n            this.datafeed.onRealtimeCallback(next.kline);\n        }\n    }\n\n    public componentDidMount() {\n        const {\n            colorTheme,\n            currentMarket,\n            markets,\n        } = this.props;\n\n        if (currentMarket) {\n            this.setChart(markets, currentMarket, colorTheme);\n        }\n    }\n\n    public componentWillUnmount() {\n        if (this.tvWidget) {\n            try {\n                this.tvWidget.remove();\n            } catch (error) {\n                window.console.log(`TradingChart unmount failed: ${error}`);\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <React.Fragment>\n                <div className=\"cr-table-header__content\">\n                    {this.props.currentMarket ? this.props.currentMarket.name : ''}\n                </div>\n                <div id={widgetParams.containerId} className=\"pg-trading-chart\" />\n            </React.Fragment>\n        );\n    }\n\n    private setChart = (markets: Market[], currentMarket: Market, colorTheme: string) => {\n        const { kline } = this.props;\n        this.datafeed = dataFeedObject(this, markets);\n        const currentTimeOffset = new Date().getTimezoneOffset();\n        const clockPeriod = currentTimeOffset === stdTimezoneOffset(new Date()) ? 'STD' : 'DST';\n\n        if (this.props.kline.period) {\n            widgetParams.interval = this.props.kline.period;\n        }\n        const defaultWidgetOptions = {\n            symbol: currentMarket.id,\n            datafeed: this.datafeed,\n            interval: widgetParams.interval,\n            container_id: widgetParams.containerId,\n            locale: this.props.lang as LanguageCode,\n            timezone: getTradingChartTimezone(currentTimeOffset, clockPeriod),\n        };\n\n        this.tvWidget = new widget({...defaultWidgetOptions, ...widgetOptions(colorTheme)});\n\n        let previousRange = { from: 0, to: 0 };\n        if (kline.range.from !== 0 && kline.range.to !== 0) {\n            previousRange = this.props.kline.range;\n        }\n\n        let previousResolution = '';\n        if (kline.period) {\n            previousResolution = kline.period;\n        }\n\n        this.tvWidget.onChartReady(() => {\n            this.tvWidget!.activeChart().setSymbol(currentMarket.id, () => {\n                print('Symbol set', currentMarket.id);\n            });\n\n            if (previousRange.from !== 0 && previousRange.to !== 0) {\n                this.tvWidget!.activeChart().setVisibleRange(previousRange, () => {\n                    print('Range set', previousRange);\n                });\n            }\n\n            if (previousResolution) {\n                this.tvWidget!.activeChart().setResolution(previousResolution.toUpperCase(), () => {\n                    print('Resolution set', previousResolution);\n                });\n            }\n        });\n    };\n\n    private updateChart = (currentMarket: Market) => {\n        if (this.tvWidget) {\n            this.tvWidget.onChartReady(() => {\n                this.tvWidget!.activeChart().setSymbol(currentMarket.id, () => {\n                    print('Symbol set', currentMarket.id);\n                });\n            });\n        }\n    }\n}\n\nconst reduxProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    markets: selectMarkets(state),\n    colorTheme: selectCurrentColorTheme(state),\n    currentMarket: selectCurrentMarket(state),\n    tickers: selectMarketTickers(state),\n    kline: selectKline(state),\n    lang: selectCurrentLanguage(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    klineUpdateTimeRange: payload => dispatch(klineUpdateTimeRange(payload)),\n    subscribeKline: (marketId: string, periodString: string) => dispatch(rangerSubscribeKlineMarket(marketId, periodString)),\n    unSubscribeKline: (marketId: string, periodString: string) => dispatch(rangerUnsubscribeKlineMarket(marketId, periodString)),\n    klineUpdatePeriod: payload => dispatch(klineUpdatePeriod(payload)),\n});\n\nexport const TradingChart = connect<ReduxProps, DispatchProps, {}, RootState>(reduxProps, mapDispatchProps)(TradingChartComponent);\n"]},"metadata":{},"sourceType":"module"}