{"ast":null,"code":"import _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/screens/ForgotPassword/index.tsx\";\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { EmailForm } from '../../components';\nimport { EMAIL_REGEX, ERROR_INVALID_EMAIL, setDocumentTitle } from '../../helpers';\nimport { forgotPassword as _forgotPassword, selectCurrentLanguage, selectForgotPasswordSuccess } from '../../modules';\n\nvar ForgotPasswordComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ForgotPasswordComponent, _React$Component);\n\n  function ForgotPasswordComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ForgotPasswordComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ForgotPasswordComponent).call(this, props));\n\n    _this.handleChangeEmail = function () {\n      var email = _this.state.email;\n      var i18n = _this.props.i18n;\n\n      _this.props.forgotPassword({\n        email: email,\n        lang: i18n.toLowerCase()\n      });\n    };\n\n    _this.handleFocusEmail = function () {\n      _this.setState({\n        emailFocused: !_this.state.emailFocused\n      });\n    };\n\n    _this.handleInputEmail = function (value) {\n      _this.setState({\n        email: value\n      });\n    };\n\n    _this.validateForm = function () {\n      var email = _this.state.email;\n      var isEmailValid = email ? email.match(EMAIL_REGEX) : true;\n\n      if (!isEmailValid) {\n        _this.setState({\n          emailError: ERROR_INVALID_EMAIL\n        });\n\n        return;\n      }\n    };\n\n    _this.handleComeBack = function () {\n      _this.props.history.goBack();\n    };\n\n    _this.state = {\n      email: '',\n      emailError: '',\n      emailFocused: false\n    };\n    return _this;\n  }\n\n  _createClass(ForgotPasswordComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Forgot password');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          email = _this$state.email,\n          emailFocused = _this$state.emailFocused,\n          emailError = _this$state.emailError;\n      return React.createElement(\"div\", {\n        className: \"pg-forgot-password-screen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-forgot-password-screen__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-forgot-password___form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(EmailForm, {\n        OnSubmit: this.handleChangeEmail,\n        title: this.props.intl.formatMessage({\n          id: 'page.forgotPassword'\n        }),\n        emailLabel: this.props.intl.formatMessage({\n          id: 'page.forgotPassword.email'\n        }),\n        buttonLabel: this.props.intl.formatMessage({\n          id: 'page.forgotPassword.send'\n        }),\n        email: email,\n        emailFocused: emailFocused,\n        emailError: emailError,\n        message: this.props.intl.formatMessage({\n          id: 'page.forgotPassword.message'\n        }),\n        validateForm: this.validateForm,\n        handleInputEmail: this.handleInputEmail,\n        handleFieldFocus: this.handleFocusEmail,\n        handleReturnBack: this.handleComeBack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return ForgotPasswordComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    success: selectForgotPasswordSuccess(state),\n    i18n: selectCurrentLanguage(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    forgotPassword: function forgotPassword(credentials) {\n      return dispatch(_forgotPassword(credentials));\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nexport var ForgotPasswordScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(ForgotPasswordComponent)));","map":{"version":3,"sources":["/workspaces/temx/src/screens/ForgotPassword/index.tsx"],"names":["React","injectIntl","connect","withRouter","EmailForm","EMAIL_REGEX","ERROR_INVALID_EMAIL","setDocumentTitle","forgotPassword","selectCurrentLanguage","selectForgotPasswordSuccess","ForgotPasswordComponent","props","handleChangeEmail","email","state","i18n","lang","toLowerCase","handleFocusEmail","setState","emailFocused","handleInputEmail","value","validateForm","isEmailValid","match","emailError","handleComeBack","history","goBack","intl","formatMessage","id","Component","mapStateToProps","success","mapDispatchProps","dispatch","credentials","ForgotPasswordScreen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n    InjectedIntlProps,\n    injectIntl,\n} from 'react-intl';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { EmailForm } from '../../components';\nimport {\n    EMAIL_REGEX,\n    ERROR_INVALID_EMAIL,\n    setDocumentTitle,\n} from '../../helpers';\nimport {\n    forgotPassword,\n    RootState,\n    selectCurrentLanguage,\n    selectForgotPasswordSuccess,\n} from '../../modules';\n\ninterface ReduxProps {\n    success: boolean;\n}\n\ninterface DispatchProps {\n    forgotPassword: typeof forgotPassword;\n}\n\ninterface ForgotPasswordState {\n    email: string;\n    emailError: string;\n    emailFocused: boolean;\n}\n\ntype Props = RouterProps & ReduxProps & DispatchProps & InjectedIntlProps;\n\nclass ForgotPasswordComponent extends React.Component<Props, ForgotPasswordState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            emailError: '',\n            emailFocused: false,\n        };\n    }\n\n    public componentDidMount() {\n        setDocumentTitle('Forgot password');\n    }\n\n    public render() {\n        const {\n            email,\n            emailFocused,\n            emailError,\n        } = this.state;\n\n        return (\n            <div className=\"pg-forgot-password-screen\">\n                <div className=\"pg-forgot-password-screen__container\">\n                    <div className=\"pg-forgot-password___form\">\n                        <EmailForm\n                            OnSubmit={this.handleChangeEmail}\n                            title={this.props.intl.formatMessage({id: 'page.forgotPassword'})}\n                            emailLabel={this.props.intl.formatMessage({id: 'page.forgotPassword.email'})}\n                            buttonLabel={this.props.intl.formatMessage({id: 'page.forgotPassword.send'})}\n                            email={email}\n                            emailFocused={emailFocused}\n                            emailError={emailError}\n                            message={this.props.intl.formatMessage({id: 'page.forgotPassword.message'})}\n                            validateForm={this.validateForm}\n                            handleInputEmail={this.handleInputEmail}\n                            handleFieldFocus={this.handleFocusEmail}\n                            handleReturnBack={this.handleComeBack}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private handleChangeEmail = () => {\n        const { email } = this.state;\n        const { i18n } = this.props;\n        this.props.forgotPassword({\n            email,\n            lang: i18n.toLowerCase(),\n        });\n    };\n\n    private handleFocusEmail = () => {\n        this.setState({\n            emailFocused: !this.state.emailFocused,\n        });\n    };\n\n    private handleInputEmail = (value: string) => {\n        this.setState({\n            email: value,\n        });\n    };\n\n    private validateForm = () => {\n        const { email } = this.state;\n\n        const isEmailValid = email ? email.match(EMAIL_REGEX) : true;\n\n        if (!isEmailValid) {\n            this.setState({\n                emailError: ERROR_INVALID_EMAIL,\n            });\n            return;\n        }\n    };\n\n    private handleComeBack = () => {\n        this.props.history.goBack();\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    success: selectForgotPasswordSuccess(state),\n    i18n: selectCurrentLanguage(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        forgotPassword: credentials => dispatch(forgotPassword(credentials)),\n    });\n\n// tslint:disable-next-line:no-any\nexport const ForgotPasswordScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(ForgotPasswordComponent) as any));\n"]},"metadata":{},"sourceType":"module"}