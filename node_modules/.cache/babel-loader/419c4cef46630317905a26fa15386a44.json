{"ast":null,"code":"import _toConsumableArray from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/screens/TradingScreen/index.tsx\";\nimport { Decimal } from '@openware/components';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { incrementalOrderBook } from '../../api';\nimport { Grid } from '../../components/Grid';\nimport { MarketsComponent, MarketDepthsComponent, OpenOrdersComponent, OrderBook, OrderComponent, RecentTrades, ToolBar, TradingChart } from '../../containers';\nimport { getUrlPart, setDocumentTitle } from '../../helpers';\nimport { selectCurrentMarket, selectMarketTickers, selectUserInfo, selectUserLoggedIn, setCurrentMarket as _setCurrentMarket, setCurrentPrice as _setCurrentPrice } from '../../modules';\nimport { saveLayouts as _saveLayouts, selectGridLayoutState } from '../../modules/public/gridLayout';\nimport { marketsFetch as _marketsFetch, selectMarkets } from '../../modules/public/markets';\nimport { depthFetch as _depthFetch } from '../../modules/public/orderBook';\nimport { rangerConnectFetch } from '../../modules/public/ranger';\nimport { selectRanger } from '../../modules/public/ranger/selectors';\nimport { selectWallets, walletsFetch } from '../../modules/user/wallets';\nvar breakpoints = {\n  lg: 1200,\n  md: 996,\n  sm: 768,\n  xs: 480,\n  xxs: 0\n};\nvar cols = {\n  lg: 24,\n  md: 24,\n  sm: 12,\n  xs: 12,\n  xxs: 12\n};\n\nvar Trading =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Trading, _React$Component);\n\n  function Trading() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Trading);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Trading)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderComponentResized: 5,\n      orderBookComponentResized: 5\n    };\n    _this.gridItems = [{\n      i: 1,\n      render: function render() {\n        return React.createElement(OrderComponent, {\n          size: _this.state.orderComponentResized,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      }\n    }, {\n      i: 2,\n      render: function render() {\n        return React.createElement(TradingChart, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        });\n      }\n    }, {\n      i: 3,\n      render: function render() {\n        return React.createElement(OrderBook, {\n          size: _this.state.orderBookComponentResized,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      }\n    }, {\n      i: 4,\n      render: function render() {\n        return React.createElement(MarketDepthsComponent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      }\n    }, {\n      i: 5,\n      render: function render() {\n        return React.createElement(OpenOrdersComponent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      }\n    }, {\n      i: 6,\n      render: function render() {\n        return React.createElement(RecentTrades, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n      }\n    }, {\n      i: 7,\n      render: function render() {\n        return React.createElement(MarketsComponent, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        });\n      }\n    }];\n\n    _this.setMarketFromUrlIfExists = function (markets) {\n      var urlMarket = getUrlPart(2, window.location.pathname);\n      var market = markets.find(function (item) {\n        return item.id === urlMarket;\n      });\n\n      if (market) {\n        _this.props.setCurrentMarket(market);\n      }\n    };\n\n    _this.setTradingTitle = function (market, tickers) {\n      var tickerPrice = tickers[market.id] ? tickers[market.id].last : '0.0';\n      document.title = \"\".concat(Decimal.format(tickerPrice, market.price_precision), \" \").concat(market.name);\n    };\n\n    _this.handleResize = function (layout, oldItem, newItem) {\n      switch (oldItem.i) {\n        case '1':\n          _this.setState({\n            orderComponentResized: newItem.w\n          });\n\n          break;\n\n        case '3':\n          _this.setState({\n            orderBookComponentResized: newItem.w\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Trading, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Trading');\n      var _this$props = this.props,\n          wallets = _this$props.wallets,\n          markets = _this$props.markets,\n          currentMarket = _this$props.currentMarket,\n          userLoggedIn = _this$props.userLoggedIn,\n          _this$props$rangerSta = _this$props.rangerState,\n          connected = _this$props$rangerSta.connected,\n          withAuth = _this$props$rangerSta.withAuth;\n\n      if (markets.length < 1) {\n        this.props.marketsFetch();\n      }\n\n      if (!wallets || wallets.length === 0) {\n        this.props.accountWallets();\n      }\n\n      if (currentMarket && !incrementalOrderBook()) {\n        this.props.depthFetch(currentMarket);\n      }\n\n      if (!connected) {\n        this.props.rangerConnect({\n          withAuth: userLoggedIn\n        });\n      }\n\n      if (userLoggedIn && !withAuth) {\n        this.props.rangerConnect({\n          withAuth: userLoggedIn\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.setCurrentPrice(undefined);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$props2 = this.props,\n          history = _this$props2.history,\n          markets = _this$props2.markets,\n          userLoggedIn = _this$props2.userLoggedIn;\n\n      if (userLoggedIn !== nextProps.userLoggedIn) {\n        this.props.rangerConnect({\n          withAuth: nextProps.userLoggedIn\n        });\n      }\n\n      if (markets.length !== nextProps.markets.length) {\n        this.setMarketFromUrlIfExists(nextProps.markets);\n      }\n\n      if (nextProps.currentMarket) {\n        var marketFromUrl = history.location.pathname.split('/');\n        var marketNotMatched = nextProps.currentMarket.id !== marketFromUrl[marketFromUrl.length - 1];\n\n        if (marketNotMatched) {\n          history.replace(\"/trading/\".concat(nextProps.currentMarket.id));\n\n          if (!incrementalOrderBook()) {\n            this.props.depthFetch(nextProps.currentMarket);\n          }\n        }\n      }\n\n      if (nextProps.currentMarket && nextProps.tickers) {\n        this.setTradingTitle(nextProps.currentMarket, nextProps.tickers);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var rowHeight = 14;\n\n      var allGridItems = _toConsumableArray(this.gridItems);\n\n      var rgl = this.props.rgl;\n      return React.createElement(\"div\", {\n        className: 'pg-trading-screen',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: 'pg-trading-wrap',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(ToolBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        breakpoints: breakpoints,\n        className: \"layout\",\n        children: allGridItems,\n        cols: cols,\n        draggableHandle: \".cr-table-header__content, .pg-trading-screen__tab-panel, .draggable-container\",\n        layouts: rgl.layouts,\n        rowHeight: rowHeight,\n        onLayoutChange: function onLayoutChange() {\n          return;\n        },\n        handleResize: this.handleResize,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Trading;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currentMarket: selectCurrentMarket(state),\n    markets: selectMarkets(state),\n    wallets: selectWallets(state),\n    user: selectUserInfo(state),\n    rangerState: selectRanger(state),\n    userLoggedIn: selectUserLoggedIn(state),\n    rgl: selectGridLayoutState(state),\n    tickers: selectMarketTickers(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    marketsFetch: function marketsFetch() {\n      return dispatch(_marketsFetch());\n    },\n    depthFetch: function depthFetch(payload) {\n      return dispatch(_depthFetch(payload));\n    },\n    accountWallets: function accountWallets() {\n      return dispatch(walletsFetch());\n    },\n    rangerConnect: function rangerConnect(payload) {\n      return dispatch(rangerConnectFetch(payload));\n    },\n    setCurrentPrice: function setCurrentPrice(payload) {\n      return dispatch(_setCurrentPrice(payload));\n    },\n    setCurrentMarket: function setCurrentMarket(payload) {\n      return dispatch(_setCurrentMarket(payload));\n    },\n    saveLayouts: function saveLayouts(payload) {\n      return dispatch(_saveLayouts(payload));\n    }\n  };\n}; // tslint:disable-next-line no-any\n\n\nvar TradingScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(Trading)));\nexport { TradingScreen };","map":{"version":3,"sources":["/workspaces/temx/src/screens/TradingScreen/index.tsx"],"names":["Decimal","React","injectIntl","connect","withRouter","incrementalOrderBook","Grid","MarketsComponent","MarketDepthsComponent","OpenOrdersComponent","OrderBook","OrderComponent","RecentTrades","ToolBar","TradingChart","getUrlPart","setDocumentTitle","selectCurrentMarket","selectMarketTickers","selectUserInfo","selectUserLoggedIn","setCurrentMarket","setCurrentPrice","saveLayouts","selectGridLayoutState","marketsFetch","selectMarkets","depthFetch","rangerConnectFetch","selectRanger","selectWallets","walletsFetch","breakpoints","lg","md","sm","xs","xxs","cols","Trading","state","orderComponentResized","orderBookComponentResized","gridItems","i","render","setMarketFromUrlIfExists","markets","urlMarket","window","location","pathname","market","find","item","id","props","setTradingTitle","tickers","tickerPrice","last","document","title","format","price_precision","name","handleResize","layout","oldItem","newItem","setState","w","wallets","currentMarket","userLoggedIn","rangerState","connected","withAuth","length","accountWallets","rangerConnect","undefined","nextProps","history","marketFromUrl","split","marketNotMatched","replace","rowHeight","allGridItems","rgl","layouts","Component","mapStateToProps","user","mapDispatchToProps","dispatch","payload","TradingScreen"],"mappings":";;;;;;;AAAA,SAASA,OAAT,QAAwB,sBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAA4BC,UAA5B,QAA8C,YAA9C;AACA,SAASC,OAAT,QAAqE,aAArE;AACA,SAA8BC,UAA9B,QAAgD,kBAAhD;AACA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SACIC,gBADJ,EAEIC,qBAFJ,EAGIC,mBAHJ,EAIIC,SAJJ,EAKIC,cALJ,EAMIC,YANJ,EAOIC,OAPJ,EAQIC,YARJ,QASO,kBATP;AAUA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,eAA7C;AACA,SAEIC,mBAFJ,EAGIC,mBAHJ,EAIIC,cAJJ,EAKIC,kBALJ,EAMIC,gBAAgB,IAAhBA,iBANJ,EAOIC,eAAe,IAAfA,gBAPJ,QAUO,eAVP;AAWA,SAA0BC,WAAW,IAAXA,YAA1B,EAAuCC,qBAAvC,QAAoE,iCAApE;AACA,SAAiBC,YAAY,IAAZA,aAAjB,EAA+BC,aAA/B,QAAoD,8BAApD;AACA,SAASC,UAAU,IAAVA,WAAT,QAA2B,gCAA3B;AACA,SAASC,kBAAT,QAAuD,6BAAvD;AAEA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,aAAT,EAAgCC,YAAhC,QAAoD,4BAApD;AAEA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAE,IADY;AAEhBC,EAAAA,EAAE,EAAE,GAFY;AAGhBC,EAAAA,EAAE,EAAE,GAHY;AAIhBC,EAAAA,EAAE,EAAE,GAJY;AAKhBC,EAAAA,GAAG,EAAE;AALW,CAApB;AAQA,IAAMC,IAAI,GAAG;AACTL,EAAAA,EAAE,EAAE,EADK;AAETC,EAAAA,EAAE,EAAE,EAFK;AAGTC,EAAAA,EAAE,EAAE,EAHK;AAITC,EAAAA,EAAE,EAAE,EAJK;AAKTC,EAAAA,GAAG,EAAE;AALI,CAAb;;IAsCME,O;;;;;;;;;;;;;;;;;UACcC,K,GAAQ;AACpBC,MAAAA,qBAAqB,EAAE,CADH;AAEpBC,MAAAA,yBAAyB,EAAE;AAFP,K;UAKhBC,S,GAAY,CAChB;AACIC,MAAAA,CAAC,EAAE,CADP;AAEIC,MAAAA,MAAM,EAAE;AAAA,eAAM,oBAAC,cAAD;AAAgB,UAAA,IAAI,EAAE,MAAKL,KAAL,CAAWC,qBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA;AAFZ,KADgB,EAKhB;AACIG,MAAAA,CAAC,EAAE,CADP;AAEIC,MAAAA,MAAM,EAAE;AAAA,eAAM,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA;AAFZ,KALgB,EAShB;AACID,MAAAA,CAAC,EAAE,CADP;AAEIC,MAAAA,MAAM,EAAE;AAAA,eAAM,oBAAC,SAAD;AAAW,UAAA,IAAI,EAAE,MAAKL,KAAL,CAAWE,yBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA;AAFZ,KATgB,EAahB;AACIE,MAAAA,CAAC,EAAE,CADP;AAEIC,MAAAA,MAAM,EAAE;AAAA,eAAM,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA;AAFZ,KAbgB,EAiBhB;AACID,MAAAA,CAAC,EAAE,CADP;AAEIC,MAAAA,MAAM,EAAE;AAAA,eAAM,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA;AAFZ,KAjBgB,EAqBhB;AACID,MAAAA,CAAC,EAAE,CADP;AAEIC,MAAAA,MAAM,EAAE;AAAA,eAAM,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA;AAFZ,KArBgB,EAyBhB;AACID,MAAAA,CAAC,EAAE,CADP;AAEIC,MAAAA,MAAM,EAAE;AAAA,eAAM,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAN;AAAA;AAFZ,KAzBgB,C;;UAkHZC,wB,GAA2B,UAACC,OAAD,EAA6B;AAC5D,UAAMC,SAAiB,GAAGjC,UAAU,CAAC,CAAD,EAAIkC,MAAM,CAACC,QAAP,CAAgBC,QAApB,CAApC;AACA,UAAMC,MAA0B,GAAGL,OAAO,CAACM,IAAR,CAAa,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,KAAYP,SAAhB;AAAA,OAAjB,CAAnC;;AAEA,UAAII,MAAJ,EAAY;AACR,cAAKI,KAAL,CAAWnC,gBAAX,CAA4B+B,MAA5B;AACH;AACJ,K;;UAEOK,e,GAAkB,UAACL,MAAD,EAAiBM,OAAjB,EAAoD;AAC1E,UAAMC,WAAW,GAAGD,OAAO,CAACN,MAAM,CAACG,EAAR,CAAP,GAAqBG,OAAO,CAACN,MAAM,CAACG,EAAR,CAAP,CAAmBK,IAAxC,GAA+C,KAAnE;AACAC,MAAAA,QAAQ,CAACC,KAAT,aAAoB9D,OAAO,CAAC+D,MAAR,CAAeJ,WAAf,EAA4BP,MAAM,CAACY,eAAnC,CAApB,cAA2EZ,MAAM,CAACa,IAAlF;AACH,K;;UAEOC,Y,GAAe,UAACC,MAAD,EAASC,OAAT,EAAkBC,OAAlB,EAA8B;AACjD,cAAQD,OAAO,CAACxB,CAAhB;AACI,aAAK,GAAL;AACI,gBAAK0B,QAAL,CAAc;AACV7B,YAAAA,qBAAqB,EAAE4B,OAAO,CAACE;AADrB,WAAd;;AAGA;;AACJ,aAAK,GAAL;AACI,gBAAKD,QAAL,CAAc;AACV5B,YAAAA,yBAAyB,EAAE2B,OAAO,CAACE;AADzB,WAAd;;AAGA;;AACJ;AACI;AAZR;AAcH,K;;;;;;;wCAhH0B;AACvBvD,MAAAA,gBAAgB,CAAC,SAAD,CAAhB;AADuB,wBAEyE,KAAKwC,KAF9E;AAAA,UAEfgB,OAFe,eAEfA,OAFe;AAAA,UAENzB,OAFM,eAENA,OAFM;AAAA,UAEG0B,aAFH,eAEGA,aAFH;AAAA,UAEkBC,YAFlB,eAEkBA,YAFlB;AAAA,8CAEgCC,WAFhC;AAAA,UAE+CC,SAF/C,yBAE+CA,SAF/C;AAAA,UAE0DC,QAF1D,yBAE0DA,QAF1D;;AAIvB,UAAI9B,OAAO,CAAC+B,MAAR,GAAiB,CAArB,EAAwB;AACpB,aAAKtB,KAAL,CAAW/B,YAAX;AACH;;AACD,UAAI,CAAC+C,OAAD,IAAYA,OAAO,CAACM,MAAR,KAAmB,CAAnC,EAAsC;AAClC,aAAKtB,KAAL,CAAWuB,cAAX;AACH;;AACD,UAAIN,aAAa,IAAI,CAACpE,oBAAoB,EAA1C,EAA8C;AAC1C,aAAKmD,KAAL,CAAW7B,UAAX,CAAsB8C,aAAtB;AACH;;AACD,UAAI,CAACG,SAAL,EAAgB;AACZ,aAAKpB,KAAL,CAAWwB,aAAX,CAAyB;AAAEH,UAAAA,QAAQ,EAAEH;AAAZ,SAAzB;AACH;;AAED,UAAIA,YAAY,IAAI,CAACG,QAArB,EAA+B;AAC3B,aAAKrB,KAAL,CAAWwB,aAAX,CAAyB;AAAEH,UAAAA,QAAQ,EAAEH;AAAZ,SAAzB;AACH;AACJ;;;2CAE6B;AAC1B,WAAKlB,KAAL,CAAWlC,eAAX,CAA2B2D,SAA3B;AACH;;;8CAEgCC,S,EAAW;AAAA,yBAKpC,KAAK1B,KAL+B;AAAA,UAEpC2B,OAFoC,gBAEpCA,OAFoC;AAAA,UAGpCpC,OAHoC,gBAGpCA,OAHoC;AAAA,UAIpC2B,YAJoC,gBAIpCA,YAJoC;;AAOxC,UAAIA,YAAY,KAAKQ,SAAS,CAACR,YAA/B,EAA6C;AACzC,aAAKlB,KAAL,CAAWwB,aAAX,CAAyB;AAAEH,UAAAA,QAAQ,EAAEK,SAAS,CAACR;AAAtB,SAAzB;AACH;;AAED,UAAI3B,OAAO,CAAC+B,MAAR,KAAmBI,SAAS,CAACnC,OAAV,CAAkB+B,MAAzC,EAAiD;AAC7C,aAAKhC,wBAAL,CAA8BoC,SAAS,CAACnC,OAAxC;AACH;;AAED,UAAImC,SAAS,CAACT,aAAd,EAA6B;AACzB,YAAMW,aAAa,GAAGD,OAAO,CAACjC,QAAR,CAAiBC,QAAjB,CAA0BkC,KAA1B,CAAgC,GAAhC,CAAtB;AACA,YAAMC,gBAAgB,GAAGJ,SAAS,CAACT,aAAV,CAAwBlB,EAAxB,KAA+B6B,aAAa,CAACA,aAAa,CAACN,MAAd,GAAuB,CAAxB,CAArE;;AACA,YAAIQ,gBAAJ,EAAsB;AAClBH,UAAAA,OAAO,CAACI,OAAR,oBAA4BL,SAAS,CAACT,aAAV,CAAwBlB,EAApD;;AAEA,cAAI,CAAClD,oBAAoB,EAAzB,EAA6B;AAC3B,iBAAKmD,KAAL,CAAW7B,UAAX,CAAsBuD,SAAS,CAACT,aAAhC;AACD;AACJ;AACJ;;AAED,UAAIS,SAAS,CAACT,aAAV,IAA2BS,SAAS,CAACxB,OAAzC,EAAkD;AAC9C,aAAKD,eAAL,CAAqByB,SAAS,CAACT,aAA/B,EAA8CS,SAAS,CAACxB,OAAxD;AACH;AACJ;;;6BAEe;AACZ,UAAM8B,SAAS,GAAG,EAAlB;;AACA,UAAMC,YAAY,sBAAO,KAAK9C,SAAZ,CAAlB;;AAFY,UAGL+C,GAHK,GAGE,KAAKlC,KAHP,CAGLkC,GAHK;AAKZ,aACI;AAAK,QAAA,SAAS,EAAE,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAE,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,IAAD;AACI,QAAA,WAAW,EAAE1D,WADjB;AAEI,QAAA,SAAS,EAAC,QAFd;AAGI,QAAA,QAAQ,EAAEyD,YAHd;AAII,QAAA,IAAI,EAAEnD,IAJV;AAKI,QAAA,eAAe,EAAC,gFALpB;AAMI,QAAA,OAAO,EAAEoD,GAAG,CAACC,OANjB;AAOI,QAAA,SAAS,EAAEH,SAPf;AAQI,QAAA,cAAc,EAAE,0BAAM;AAAC;AAAQ,SARnC;AASI,QAAA,YAAY,EAAE,KAAKtB,YATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,CADJ;AAkBH;;;;EAtHiBjE,KAAK,CAAC2F,S;;AAwJ5B,IAAMC,eAA2D,GAAG,SAA9DA,eAA8D,CAAArD,KAAK;AAAA,SAAK;AAC1EiC,IAAAA,aAAa,EAAExD,mBAAmB,CAACuB,KAAD,CADwC;AAE1EO,IAAAA,OAAO,EAAErB,aAAa,CAACc,KAAD,CAFoD;AAG1EgC,IAAAA,OAAO,EAAE1C,aAAa,CAACU,KAAD,CAHoD;AAI1EsD,IAAAA,IAAI,EAAE3E,cAAc,CAACqB,KAAD,CAJsD;AAK1EmC,IAAAA,WAAW,EAAE9C,YAAY,CAACW,KAAD,CALiD;AAM1EkC,IAAAA,YAAY,EAAEtD,kBAAkB,CAACoB,KAAD,CAN0C;AAO1EkD,IAAAA,GAAG,EAAElE,qBAAqB,CAACgB,KAAD,CAPgD;AAQ1EkB,IAAAA,OAAO,EAAExC,mBAAmB,CAACsB,KAAD;AAR8C,GAAL;AAAA,CAAzE;;AAWA,IAAMuD,kBAAiE,GAAG,SAApEA,kBAAoE,CAAAC,QAAQ;AAAA,SAAK;AACnFvE,IAAAA,YAAY,EAAE;AAAA,aAAMuE,QAAQ,CAACvE,aAAY,EAAb,CAAd;AAAA,KADqE;AAEnFE,IAAAA,UAAU,EAAE,oBAAAsE,OAAO;AAAA,aAAID,QAAQ,CAACrE,WAAU,CAACsE,OAAD,CAAX,CAAZ;AAAA,KAFgE;AAGnFlB,IAAAA,cAAc,EAAE;AAAA,aAAMiB,QAAQ,CAACjE,YAAY,EAAb,CAAd;AAAA,KAHmE;AAInFiD,IAAAA,aAAa,EAAE,uBAACiB,OAAD;AAAA,aAA4CD,QAAQ,CAACpE,kBAAkB,CAACqE,OAAD,CAAnB,CAApD;AAAA,KAJoE;AAKnF3E,IAAAA,eAAe,EAAE,yBAAA2E,OAAO;AAAA,aAAID,QAAQ,CAAC1E,gBAAe,CAAC2E,OAAD,CAAhB,CAAZ;AAAA,KAL2D;AAMnF5E,IAAAA,gBAAgB,EAAE,0BAAA4E,OAAO;AAAA,aAAID,QAAQ,CAAC3E,iBAAgB,CAAC4E,OAAD,CAAjB,CAAZ;AAAA,KAN0D;AAOnF1E,IAAAA,WAAW,EAAE,qBAAA0E,OAAO;AAAA,aAAID,QAAQ,CAACzE,YAAW,CAAC0E,OAAD,CAAZ,CAAZ;AAAA;AAP+D,GAAL;AAAA,CAAlF,C,CAUA;;;AACA,IAAMC,aAAa,GAAGhG,UAAU,CAACE,UAAU,CAACD,OAAO,CAAC0F,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CxD,OAA7C,CAAD,CAAX,CAAhC;AAEA,SACI2D,aADJ","sourcesContent":["import { Decimal } from '@openware/components';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction, MapStateToProps } from 'react-redux';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { incrementalOrderBook } from '../../api';\nimport { Grid } from '../../components/Grid';\nimport {\n    MarketsComponent,\n    MarketDepthsComponent,\n    OpenOrdersComponent,\n    OrderBook,\n    OrderComponent,\n    RecentTrades,\n    ToolBar,\n    TradingChart,\n} from '../../containers';\nimport { getUrlPart, setDocumentTitle } from '../../helpers';\nimport {\n    RootState,\n    selectCurrentMarket,\n    selectMarketTickers,\n    selectUserInfo,\n    selectUserLoggedIn,\n    setCurrentMarket,\n    setCurrentPrice,\n    Ticker,\n    User,\n} from '../../modules';\nimport { GridLayoutState, saveLayouts, selectGridLayoutState } from '../../modules/public/gridLayout';\nimport { Market, marketsFetch, selectMarkets } from '../../modules/public/markets';\nimport { depthFetch } from '../../modules/public/orderBook';\nimport { rangerConnectFetch, RangerConnectFetch } from '../../modules/public/ranger';\nimport { RangerState } from '../../modules/public/ranger/reducer';\nimport { selectRanger } from '../../modules/public/ranger/selectors';\nimport { selectWallets, Wallet, walletsFetch } from '../../modules/user/wallets';\n\nconst breakpoints = {\n    lg: 1200,\n    md: 996,\n    sm: 768,\n    xs: 480,\n    xxs: 0,\n};\n\nconst cols = {\n    lg: 24,\n    md: 24,\n    sm: 12,\n    xs: 12,\n    xxs: 12,\n};\n\ninterface ReduxProps {\n    currentMarket: Market | undefined;\n    markets: Market[];\n    wallets: Wallet [];\n    user: User;\n    rangerState: RangerState;\n    userLoggedIn: boolean;\n    rgl: GridLayoutState;\n    tickers: {\n        [pair: string]: Ticker,\n    };\n}\n\ninterface DispatchProps {\n    depthFetch: typeof depthFetch;\n    marketsFetch: typeof marketsFetch;\n    accountWallets: typeof walletsFetch;\n    rangerConnect: typeof rangerConnectFetch;\n    setCurrentPrice: typeof setCurrentPrice;\n    setCurrentMarket: typeof setCurrentMarket;\n    saveLayouts: typeof saveLayouts;\n}\n\ninterface StateProps {\n    orderComponentResized: number;\n    orderBookComponentResized: number;\n}\n\ntype Props = DispatchProps & ReduxProps & RouteComponentProps & InjectedIntlProps;\n\nclass Trading extends React.Component<Props, StateProps> {\n    public readonly state = {\n        orderComponentResized: 5,\n        orderBookComponentResized: 5,\n    };\n\n    private gridItems = [\n        {\n            i: 1,\n            render: () => <OrderComponent size={this.state.orderComponentResized} />,\n        },\n        {\n            i: 2,\n            render: () => <TradingChart />,\n        },\n        {\n            i: 3,\n            render: () => <OrderBook size={this.state.orderBookComponentResized} />,\n        },\n        {\n            i: 4,\n            render: () => <MarketDepthsComponent />,\n        },\n        {\n            i: 5,\n            render: () => <OpenOrdersComponent/>,\n        },\n        {\n            i: 6,\n            render: () => <RecentTrades/>,\n        },\n        {\n            i: 7,\n            render: () => <MarketsComponent/>,\n        },\n    ];\n\n    public componentDidMount() {\n        setDocumentTitle('Trading');\n        const { wallets, markets, currentMarket, userLoggedIn, rangerState: { connected, withAuth } } = this.props;\n\n        if (markets.length < 1) {\n            this.props.marketsFetch();\n        }\n        if (!wallets || wallets.length === 0) {\n            this.props.accountWallets();\n        }\n        if (currentMarket && !incrementalOrderBook()) {\n            this.props.depthFetch(currentMarket);\n        }\n        if (!connected) {\n            this.props.rangerConnect({ withAuth: userLoggedIn });\n        }\n\n        if (userLoggedIn && !withAuth) {\n            this.props.rangerConnect({ withAuth: userLoggedIn });\n        }\n    }\n\n    public componentWillUnmount() {\n        this.props.setCurrentPrice(undefined);\n    }\n\n    public componentWillReceiveProps(nextProps) {\n        const {\n            history,\n            markets,\n            userLoggedIn,\n        } = this.props;\n\n        if (userLoggedIn !== nextProps.userLoggedIn) {\n            this.props.rangerConnect({ withAuth: nextProps.userLoggedIn });\n        }\n\n        if (markets.length !== nextProps.markets.length) {\n            this.setMarketFromUrlIfExists(nextProps.markets);\n        }\n\n        if (nextProps.currentMarket) {\n            const marketFromUrl = history.location.pathname.split('/');\n            const marketNotMatched = nextProps.currentMarket.id !== marketFromUrl[marketFromUrl.length - 1];\n            if (marketNotMatched) {\n                history.replace(`/trading/${nextProps.currentMarket.id}`);\n\n                if (!incrementalOrderBook()) {\n                  this.props.depthFetch(nextProps.currentMarket);\n                }\n            }\n        }\n\n        if (nextProps.currentMarket && nextProps.tickers) {\n            this.setTradingTitle(nextProps.currentMarket, nextProps.tickers);\n        }\n    }\n\n    public render() {\n        const rowHeight = 14;\n        const allGridItems = [...this.gridItems];\n        const {rgl} = this.props;\n\n        return (\n            <div className={'pg-trading-screen'}>\n                <div className={'pg-trading-wrap'}>\n                    <ToolBar/>\n                    <Grid\n                        breakpoints={breakpoints}\n                        className=\"layout\"\n                        children={allGridItems}\n                        cols={cols}\n                        draggableHandle=\".cr-table-header__content, .pg-trading-screen__tab-panel, .draggable-container\"\n                        layouts={rgl.layouts}\n                        rowHeight={rowHeight}\n                        onLayoutChange={() => {return;}}\n                        handleResize={this.handleResize}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private setMarketFromUrlIfExists = (markets: Market[]): void => {\n        const urlMarket: string = getUrlPart(2, window.location.pathname);\n        const market: Market | undefined = markets.find(item => item.id === urlMarket);\n\n        if (market) {\n            this.props.setCurrentMarket(market);\n        }\n    };\n\n    private setTradingTitle = (market: Market, tickers: ReduxProps['tickers']) => {\n        const tickerPrice = tickers[market.id] ? tickers[market.id].last : '0.0';\n        document.title = `${Decimal.format(tickerPrice, market.price_precision)} ${market.name}`;\n    };\n\n    private handleResize = (layout, oldItem, newItem) => {\n        switch (oldItem.i) {\n            case '1':\n                this.setState({\n                    orderComponentResized: newItem.w,\n                });\n                break;\n            case '3':\n                this.setState({\n                    orderBookComponentResized: newItem.w,\n                });\n                break;\n            default:\n                break;\n        }\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    currentMarket: selectCurrentMarket(state),\n    markets: selectMarkets(state),\n    wallets: selectWallets(state),\n    user: selectUserInfo(state),\n    rangerState: selectRanger(state),\n    userLoggedIn: selectUserLoggedIn(state),\n    rgl: selectGridLayoutState(state),\n    tickers: selectMarketTickers(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    marketsFetch: () => dispatch(marketsFetch()),\n    depthFetch: payload => dispatch(depthFetch(payload)),\n    accountWallets: () => dispatch(walletsFetch()),\n    rangerConnect: (payload: RangerConnectFetch['payload']) => dispatch(rangerConnectFetch(payload)),\n    setCurrentPrice: payload => dispatch(setCurrentPrice(payload)),\n    setCurrentMarket: payload => dispatch(setCurrentMarket(payload)),\n    saveLayouts: payload => dispatch(saveLayouts(payload)),\n});\n\n// tslint:disable-next-line no-any\nconst TradingScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(Trading) as any));\n\nexport {\n    TradingScreen,\n};\n"]},"metadata":{},"sourceType":"module"}