{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(sendDocumentsSaga);\n\n// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../../api';\nimport { alertPush } from '../../../../public/alert';\nimport { sendDocumentsData, sendDocumentsError } from '../actions';\nvar sessionsConfig = {\n  apiVersion: 'barong'\n};\nexport function sendDocumentsSaga(action) {\n  var response, defaultMessage, _response$message, message;\n\n  return _regeneratorRuntime.wrap(function sendDocumentsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(sessionsConfig), '/resource/documents', action.payload);\n\n        case 3:\n          response = _context.sent;\n          defaultMessage = 'success.documents.accepted';\n          _response$message = response.message, message = _response$message === void 0 ? defaultMessage : _response$message;\n          _context.next = 8;\n          return put(sendDocumentsData({\n            message: message\n          }));\n\n        case 8:\n          _context.next = 10;\n          return put(alertPush({\n            message: [defaultMessage],\n            type: 'success'\n          }));\n\n        case 10:\n          _context.next = 18;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(sendDocumentsError(_context.t0));\n\n        case 16:\n          _context.next = 18;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/workspaces/temx/src/modules/user/kyc/documents/sagas/sendDocumentsSaga.ts"],"names":["sendDocumentsSaga","call","put","API","alertPush","sendDocumentsData","sendDocumentsError","sessionsConfig","apiVersion","action","post","payload","response","defaultMessage","message","type","code"],"mappings":";;;;yBAUiBA,iB;;AAVjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,oBAApC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAA0E,YAA1E;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUR,iBAAV,CAA4BS,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB,iBAAMR,IAAI,CAACE,GAAG,CAACO,IAAJ,CAASH,cAAT,CAAD,EAA2B,qBAA3B,EAAkDE,MAAM,CAACE,OAAzD,CAAV;;AAFlB;AAEOC,UAAAA,QAFP;AAGOC,UAAAA,cAHP,GAGwB,4BAHxB;AAAA,8BAIsCD,QAJtC,CAISE,OAJT,EAISA,OAJT,kCAImBD,cAJnB;AAAA;AAKC,iBAAMX,GAAG,CAACG,iBAAiB,CAAC;AAAES,YAAAA,OAAO,EAAPA;AAAF,WAAD,CAAlB,CAAT;;AALD;AAAA;AAMC,iBAAMZ,GAAG,CAACE,SAAS,CAAC;AAAEU,YAAAA,OAAO,EAAE,CAACD,cAAD,CAAX;AAA6BE,YAAAA,IAAI,EAAE;AAAnC,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQC,iBAAMb,GAAG,CAACI,kBAAkB,aAAnB,CAAT;;AARD;AAAA;AASC,iBAAMJ,GAAG,CAACE,SAAS,CAAC;AAAEU,YAAAA,OAAO,EAAE,YAAMA,OAAjB;AAA0BE,YAAAA,IAAI,EAAE,YAAMA,IAAtC;AAA4CD,YAAAA,IAAI,EAAE;AAAlD,WAAD,CAAV,CAAT;;AATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../../api';\nimport { alertPush } from '../../../../public/alert';\nimport { sendDocumentsData, sendDocumentsError, SendDocumentsFetch } from '../actions';\n\nconst sessionsConfig: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* sendDocumentsSaga(action: SendDocumentsFetch) {\n    try {\n        const response = yield call(API.post(sessionsConfig), '/resource/documents', action.payload);\n        const defaultMessage = 'success.documents.accepted';\n        const { message = defaultMessage } = response;\n        yield put(sendDocumentsData({ message }));\n        yield put(alertPush({ message: [defaultMessage], type: 'success'}));\n    } catch (error) {\n        yield put(sendDocumentsError(error));\n        yield put(alertPush({ message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}