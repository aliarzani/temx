{"ast":null,"code":"import _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/App.tsx\";\nimport { createBrowserHistory } from 'history';\nimport * as React from 'react';\nimport * as ReactGA from 'react-ga';\nimport { IntlProvider } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Router } from 'react-router';\nimport { Alerts, ErrorWrapper, Header, Sidebar } from './containers';\nimport { Layout } from './routes';\nimport { gaTrackerKey } from '../src/api';\nvar gaKey = gaTrackerKey();\nvar history = createBrowserHistory();\n\nif (gaKey) {\n  ReactGA.initialize(gaKey);\n  history.listen(function (location) {\n    ReactGA.set({\n      page: location.pathname\n    });\n    ReactGA.pageview(location.pathname);\n  });\n}\n\nvar AppLayout =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppLayout, _React$Component);\n\n  function AppLayout() {\n    _classCallCheck(this, AppLayout);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AppLayout).apply(this, arguments));\n  }\n\n  _createClass(AppLayout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ReactGA.pageview(history.location.pathname);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var locale = this.props.locale;\n      var lang = locale.lang,\n          messages = locale.messages;\n      return React.createElement(IntlProvider, {\n        locale: lang,\n        messages: messages,\n        key: lang,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Router, {\n        history: history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(ErrorWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(Sidebar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(Alerts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return AppLayout;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    locale: state.public.i18n\n  };\n}; // tslint:disable-next-line:no-any\n\n\nexport var App = connect(mapStateToProps)(AppLayout);","map":{"version":3,"sources":["/workspaces/temx/src/App.tsx"],"names":["createBrowserHistory","React","ReactGA","IntlProvider","connect","Router","Alerts","ErrorWrapper","Header","Sidebar","Layout","gaTrackerKey","gaKey","history","initialize","listen","location","set","page","pathname","pageview","AppLayout","locale","props","lang","messages","Component","mapStateToProps","state","public","i18n","App"],"mappings":";;;;;;AAAA,SAASA,oBAAT,QAA8C,SAA9C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,UAAzB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,OAAT,QAAyC,aAAzC;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,MAA/B,EAAuCC,OAAvC,QAAsD,cAAtD;AAEA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,YAAT,QAA6B,YAA7B;AAeA,IAAMC,KAAK,GAAGD,YAAY,EAA1B;AACA,IAAME,OAAO,GAAGb,oBAAoB,EAApC;;AAEA,IAAIY,KAAJ,EAAW;AACPV,EAAAA,OAAO,CAACY,UAAR,CAAmBF,KAAnB;AACAC,EAAAA,OAAO,CAACE,MAAR,CAAe,UAAAC,QAAQ,EAAI;AACvBd,IAAAA,OAAO,CAACe,GAAR,CAAY;AAAEC,MAAAA,IAAI,EAAEF,QAAQ,CAACG;AAAjB,KAAZ;AACAjB,IAAAA,OAAO,CAACkB,QAAR,CAAiBJ,QAAQ,CAACG,QAA1B;AACH,GAHD;AAIH;;IAIKE,S;;;;;;;;;;;;;wCACyB;AACvBnB,MAAAA,OAAO,CAACkB,QAAR,CAAiBP,OAAO,CAACG,QAAR,CAAiBG,QAAlC;AACH;;;6BAEe;AAAA,UAERG,MAFQ,GAGR,KAAKC,KAHG,CAERD,MAFQ;AAAA,UAIJE,IAJI,GAIeF,MAJf,CAIJE,IAJI;AAAA,UAIEC,QAJF,GAIeH,MAJf,CAIEG,QAJF;AAKZ,aACI,oBAAC,YAAD;AAAc,QAAA,MAAM,EAAED,IAAtB;AAA4B,QAAA,QAAQ,EAAEC,QAAtC;AAAgD,QAAA,GAAG,EAAED,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEX,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,CADJ,CADJ,CADJ;AAYH;;;;EAtBmBZ,KAAK,CAACyB,S;;AAyB9B,IAAMC,eAA2D,GAC7D,SADEA,eACF,CAACC,KAAD;AAAA,SAAmC;AAC/BN,IAAAA,MAAM,EAAEM,KAAK,CAACC,MAAN,CAAaC;AADU,GAAnC;AAAA,CADJ,C,CAKA;;;AACA,OAAO,IAAMC,GAAG,GAAG3B,OAAO,CAACuB,eAAD,CAAP,CAAyBN,SAAzB,CAAZ","sourcesContent":["import { createBrowserHistory, History } from 'history';\nimport * as React from 'react';\nimport * as ReactGA from 'react-ga';\nimport { IntlProvider } from 'react-intl';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { Router } from 'react-router';\nimport { Alerts, ErrorWrapper, Header, Sidebar } from './containers';\nimport { RootState } from './modules';\nimport { Layout } from './routes';\nimport { gaTrackerKey } from '../src/api';\n\ninterface Locale {\n    lang: string;\n    messages: object;\n}\n\ninterface AppProps {\n    history: History;\n}\n\ninterface ReduxProps {\n    locale: Locale;\n}\n\nconst gaKey = gaTrackerKey();\nconst history = createBrowserHistory();\n\nif (gaKey) {\n    ReactGA.initialize(gaKey);\n    history.listen(location => {\n        ReactGA.set({ page: location.pathname });\n        ReactGA.pageview(location.pathname);\n    });\n}\n\ntype Props = AppProps & ReduxProps;\n\nclass AppLayout extends React.Component<Props, {}, {}> {\n    public componentDidMount() {\n        ReactGA.pageview(history.location.pathname);\n    }\n\n    public render() {\n        const {\n            locale,\n        } = this.props;\n        const { lang, messages } = locale;\n        return (\n            <IntlProvider locale={lang} messages={messages} key={lang}>\n                <Router history={history}>\n                    <ErrorWrapper>\n                        <Header/>\n                        <Sidebar/>\n                        <Alerts/>\n                        <Layout/>\n                    </ErrorWrapper>\n                </Router>\n            </IntlProvider>\n        );\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> =\n    (state: RootState): ReduxProps => ({\n        locale: state.public.i18n,\n    });\n\n// tslint:disable-next-line:no-any\nexport const App = connect(mapStateToProps)(AppLayout) as any;\n"]},"metadata":{},"sourceType":"module"}