{"ast":null,"code":"import _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/components/OrderForm/index.tsx\";\nimport { Button, CryptoIcon, Decimal, Dropdown, OrderInput, PercentageButton } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { getAmount, getTotalPrice } from '../../helpers/getTotalPrice';\n\nvar handleSetValue = function handleSetValue(value, defaultValue) {\n  return value || defaultValue;\n};\n\nvar cleanPositiveFloatInput = function cleanPositiveFloatInput(text) {\n  var cleanInput = text.replace(',', '.').replace(/-+/, '').replace(/^0+/, '0').replace(/\\.+/, '.').replace(/^0+([1-9])/, '$1');\n\n  if (cleanInput[0] === '.') {\n    cleanInput = \"0\".concat(cleanInput);\n  }\n\n  return cleanInput;\n};\n\nvar checkButtonIsDisabled = function checkButtonIsDisabled(safeAmount, safePrice, price, props, state) {\n  var invalidAmount = safeAmount <= 0;\n  var invalidLimitPrice = Number(price) <= 0 && state.orderType === 'Limit';\n  var invalidMarketPrice = safePrice <= 0 && state.orderType === 'Market';\n  return props.disabled || !props.available || invalidAmount || invalidLimitPrice || invalidMarketPrice;\n};\n\nexport var OrderForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(OrderForm, _React$Component);\n\n  function OrderForm(props) {\n    var _this;\n\n    _classCallCheck(this, OrderForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrderForm).call(this, props));\n\n    _this.handleOrderTypeChange = function (index) {\n      var orderTypesIndex = _this.props.orderTypesIndex;\n\n      _this.setState({\n        orderType: orderTypesIndex[index]\n      });\n    };\n\n    _this.handleFieldFocus = function (field) {\n      switch (field) {\n        case _this.props.priceText:\n          _this.setState(function (prev) {\n            return {\n              priceFocused: !prev.priceFocused\n            };\n          });\n\n          _this.props.listenInputPrice && _this.props.listenInputPrice();\n          break;\n\n        case _this.props.amountText:\n          _this.setState(function (prev) {\n            return {\n              amountFocused: !prev.amountFocused\n            };\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.handlePriceChange = function (value) {\n      var convertedValue = cleanPositiveFloatInput(String(value));\n      var condition = new RegExp(\"^(?:[\\\\d-]*\\\\.?[\\\\d-]{0,\".concat(_this.state.currentMarketBidPrecision, \"}|[\\\\d-]*\\\\.[\\\\d-])$\"));\n\n      if (convertedValue.match(condition)) {\n        _this.setState({\n          price: convertedValue\n        });\n      }\n\n      _this.props.listenInputPrice && _this.props.listenInputPrice();\n    };\n\n    _this.handleAmountChange = function (value) {\n      var convertedValue = cleanPositiveFloatInput(String(value));\n      var condition = new RegExp(\"^(?:[\\\\d-]*\\\\.?[\\\\d-]{0,\".concat(_this.state.currentMarketAskPrecision, \"}|[\\\\d-]*\\\\.[\\\\d-])$\"));\n\n      if (convertedValue.match(condition)) {\n        _this.setState({\n          amount: convertedValue\n        });\n      }\n    };\n\n    _this.handleChangeAmountByButton = function (value, type) {\n      switch (type) {\n        case 'buy':\n          switch (_this.state.orderType) {\n            case 'Limit':\n              _this.setState({\n                amount: _this.props.available && +_this.state.price ? Decimal.format(_this.props.available / +_this.state.price * value, _this.state.currentMarketAskPrecision) : ''\n              });\n\n              break;\n\n            case 'Market':\n              _this.setState({\n                amount: _this.props.available ? Decimal.format(getAmount(Number(_this.props.available), _this.props.proposals, value), _this.state.currentMarketAskPrecision) : ''\n              });\n\n              break;\n\n            default:\n              break;\n          }\n\n          break;\n\n        case 'sell':\n          _this.setState({\n            amount: _this.props.available ? Decimal.format(_this.props.available * value, _this.state.currentMarketAskPrecision) : ''\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.handleSubmit = function () {\n      var _this$props = _this.props,\n          available = _this$props.available,\n          type = _this$props.type;\n      var _this$state = _this.state,\n          amount = _this$state.amount,\n          price = _this$state.price,\n          priceMarket = _this$state.priceMarket,\n          orderType = _this$state.orderType;\n      var order = {\n        type: type,\n        orderType: orderType,\n        amount: amount,\n        price: orderType === 'Market' ? priceMarket : price,\n        available: available || 0\n      };\n\n      _this.props.onSubmit(order);\n\n      _this.setState({\n        amount: '',\n        price: ''\n      });\n    };\n\n    _this.state = {\n      orderType: 'Limit',\n      amount: '',\n      price: '',\n      priceMarket: _this.props.priceMarket,\n      currentMarketAskPrecision: _this.props.currentMarketAskPrecision || 6,\n      currentMarketBidPrecision: _this.props.currentMarketBidPrecision || 6,\n      priceFocused: false,\n      amountFocused: false\n    };\n    return _this;\n  }\n\n  _createClass(OrderForm, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var nextPriceLimitTruncated = Decimal.format(next.priceLimit, this.state.currentMarketBidPrecision);\n\n      if (this.state.orderType === 'Limit' && next.priceLimit && nextPriceLimitTruncated !== this.state.price) {\n        this.setState({\n          price: nextPriceLimitTruncated\n        });\n      }\n\n      this.setState({\n        priceMarket: next.priceMarket,\n        currentMarketAskPrecision: next.currentMarketAskPrecision,\n        currentMarketBidPrecision: next.currentMarketBidPrecision\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          type = _this$props2.type,\n          orderTypes = _this$props2.orderTypes,\n          className = _this$props2.className,\n          from = _this$props2.from,\n          to = _this$props2.to,\n          available = _this$props2.available,\n          orderTypeText = _this$props2.orderTypeText,\n          priceText = _this$props2.priceText,\n          amountText = _this$props2.amountText,\n          totalText = _this$props2.totalText,\n          availableText = _this$props2.availableText,\n          submitButtonText = _this$props2.submitButtonText,\n          proposals = _this$props2.proposals;\n      var _this$state2 = this.state,\n          orderType = _this$state2.orderType,\n          amount = _this$state2.amount,\n          price = _this$state2.price,\n          priceMarket = _this$state2.priceMarket,\n          currentMarketAskPrecision = _this$state2.currentMarketAskPrecision,\n          currentMarketBidPrecision = _this$state2.currentMarketBidPrecision,\n          priceFocused = _this$state2.priceFocused,\n          amountFocused = _this$state2.amountFocused;\n      var safeAmount = Number(amount) || 0;\n      var totalPrice = getTotalPrice(amount, proposals);\n      var safePrice = totalPrice / Number(amount) || priceMarket;\n      var total = orderType === 'Market' ? totalPrice : safeAmount * (Number(price) || 0);\n      var amountPercentageArray = [0.25, 0.5, 0.75, 1];\n      var cx = classnames('cr-order-form', className);\n      var currencyCodeFrom = \"\".concat(from.toUpperCase(), \"-alt\");\n      var availablePrecision = type === 'buy' ? currentMarketBidPrecision : currentMarketAskPrecision;\n      var availableCurrency = type === 'buy' ? from : to;\n      return React.createElement(\"div\", {\n        className: cx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, orderTypeText ? React.createElement(\"div\", {\n        className: \"cr-order-item__dropdown__label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, orderTypeText) : null, React.createElement(Dropdown, {\n        list: orderTypes,\n        onSelect: this.handleOrderTypeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      })), orderType === 'Limit' ? React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(OrderInput, {\n        currency: from,\n        label: priceText,\n        placeholder: priceText,\n        value: handleSetValue(price, ''),\n        isFocused: priceFocused,\n        handleChangeValue: this.handlePriceChange,\n        handleFocusInput: function handleFocusInput() {\n          return _this2.handleFieldFocus(priceText);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })) : React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-order-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"fieldset\", {\n        className: \"cr-order-input__fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"legend\", {\n        className: 'cr-order-input__fieldset__label',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, handleSetValue(priceText, '')), React.createElement(\"div\", {\n        className: \"cr-order-input__fieldset__input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"\\u2248\", React.createElement(\"span\", {\n        className: \"cr-order-input__fieldset__input__price\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, handleSetValue(Decimal.format(safePrice, currentMarketBidPrecision), '0')))), React.createElement(\"div\", {\n        className: \"cr-order-input__crypto-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(CryptoIcon, {\n        code: currencyCodeFrom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, from.toUpperCase())))), React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(OrderInput, {\n        currency: to,\n        label: amountText,\n        placeholder: amountText,\n        value: handleSetValue(amount, ''),\n        isFocused: amountFocused,\n        handleChangeValue: this.handleAmountChange,\n        handleFocusInput: function handleFocusInput() {\n          return _this2.handleFieldFocus(amountText);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-order-item__percentage-buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(PercentageButton, {\n        label: \"\".concat(amountPercentageArray[0] * 100, \"%\"),\n        onClick: function onClick() {\n          return _this2.handleChangeAmountByButton(amountPercentageArray[0], type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), React.createElement(PercentageButton, {\n        label: \"\".concat(amountPercentageArray[1] * 100, \"%\"),\n        onClick: function onClick() {\n          return _this2.handleChangeAmountByButton(amountPercentageArray[1], type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(PercentageButton, {\n        label: \"\".concat(amountPercentageArray[2] * 100, \"%\"),\n        onClick: function onClick() {\n          return _this2.handleChangeAmountByButton(amountPercentageArray[2], type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }), React.createElement(PercentageButton, {\n        label: \"\".concat(amountPercentageArray[3] * 100, \"%\"),\n        onClick: function onClick() {\n          return _this2.handleChangeAmountByButton(amountPercentageArray[3], type);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-order-item__total\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cr-order-item__total__label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, handleSetValue(totalText, 'Total')), React.createElement(\"div\", {\n        className: \"cr-order-item__total__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, orderType === 'Limit' ? React.createElement(\"span\", {\n        className: \"cr-order-item__total__content__amount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, Decimal.format(total, currentMarketBidPrecision)) : React.createElement(\"span\", {\n        className: \"cr-order-item__total__content__amount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"\\u2248\", Decimal.format(total, currentMarketBidPrecision)), React.createElement(\"span\", {\n        className: \"cr-order-item__total__content__currency\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, from.toUpperCase())))), React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-order-item__available\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"cr-order-item__available__label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, handleSetValue(availableText, 'Available')), React.createElement(\"div\", {\n        className: \"cr-order-item__available__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"cr-order-item__available__content__amount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, available ? Decimal.format(available, availablePrecision) : ''), React.createElement(\"span\", {\n        className: \"cr-order-item__available__content__currency\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, available ? availableCurrency.toUpperCase() : '')))), React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: checkButtonIsDisabled(safeAmount, safePrice, price, this.props, this.state),\n        label: submitButtonText || type,\n        noMargin: true,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return OrderForm;\n}(React.Component);","map":{"version":3,"sources":["/workspaces/temx/src/components/OrderForm/index.tsx"],"names":["Button","CryptoIcon","Decimal","Dropdown","OrderInput","PercentageButton","classnames","React","getAmount","getTotalPrice","handleSetValue","value","defaultValue","cleanPositiveFloatInput","text","cleanInput","replace","checkButtonIsDisabled","safeAmount","safePrice","price","props","state","invalidAmount","invalidLimitPrice","Number","orderType","invalidMarketPrice","disabled","available","OrderForm","handleOrderTypeChange","index","orderTypesIndex","setState","handleFieldFocus","field","priceText","prev","priceFocused","listenInputPrice","amountText","amountFocused","handlePriceChange","convertedValue","String","condition","RegExp","currentMarketBidPrecision","match","handleAmountChange","currentMarketAskPrecision","amount","handleChangeAmountByButton","type","format","proposals","handleSubmit","priceMarket","order","onSubmit","next","nextPriceLimitTruncated","priceLimit","orderTypes","className","from","to","orderTypeText","totalText","availableText","submitButtonText","totalPrice","total","amountPercentageArray","cx","currencyCodeFrom","toUpperCase","availablePrecision","availableCurrency","Component"],"mappings":"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","sourcesContent":["import { Button, CryptoIcon, Decimal, Dropdown, OrderInput, PercentageButton } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { getAmount, getTotalPrice } from '../../helpers/getTotalPrice';\nimport { OrderProps } from '../Order';\n\n// tslint:disable:no-magic-numbers jsx-no-lambda jsx-no-multiline-js\ntype OnSubmitCallback = (order: OrderProps) => void;\ntype DropdownElem = number | string | React.ReactNode;\ntype FormType = 'buy' | 'sell';\n\nexport interface OrderFormProps {\n    /**\n     * Price that is applied during total order amount calculation when type is Market\n     */\n    priceMarket: number;\n    /**\n     * Price that is applied during total order amount calculation when type is Market\n     */\n    priceLimit?: number;\n    /**\n     * Type of form, can be 'buy' or 'cell'\n     */\n    type: FormType;\n    /**\n     * Available types of order\n     */\n    orderTypes: DropdownElem[];\n    /**\n     * Available types of order without translations\n     */\n    orderTypesIndex: DropdownElem[];\n    /**\n     * Additional class name. By default element receives `cr-order` class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * Name of currency for price field\n     */\n    from: string;\n    /**\n     * Name of currency for amount field\n     */\n    to: string;\n    /**\n     * Amount of money in a wallet\n     */\n    available?: number;\n    /**\n     * Precision of amount, total, available, fee value\n     */\n    currentMarketAskPrecision: number;\n    /**\n     * Precision of price value\n     */\n    currentMarketBidPrecision: number;\n    /**\n     * Whether order is disabled to execute\n     */\n    disabled?: boolean;\n    /**\n     * Callback that is called when form is submitted\n     */\n    onSubmit: OnSubmitCallback;\n    /**\n     * @default 'Order Type'\n     * Text for order type dropdown label.\n     */\n    orderTypeText?: string;\n    /**\n     * @default 'Price'\n     * Text for Price field Text.\n     */\n    priceText?: string;\n    /**\n     * @default 'Amount'\n     * Text for Amount field Text.\n     */\n    amountText?: string;\n    /**\n     * @default 'Total'\n     * Text for Total field Text.\n     */\n    totalText?: string;\n    /**\n     * @default 'Available'\n     * Text for Available field Text.\n     */\n    availableText?: string;\n    /**\n     * @default type.toUpperCase()\n     * Text for submit Button.\n     */\n    submitButtonText?: string;\n    /**\n     * proposal data for buy or sell [[price, volume]]\n     */\n    proposals: string[][];\n    /**\n     * start handling change price\n     */\n    listenInputPrice?: () => void;\n}\n\ninterface OrderFormState {\n    orderType: string | React.ReactNode;\n    amount: string;\n    price: string;\n    priceMarket: number;\n    currentMarketAskPrecision: number;\n    currentMarketBidPrecision: number;\n    amountFocused: boolean;\n    priceFocused: boolean;\n}\n\nconst handleSetValue = (value: string | number | undefined, defaultValue: string) => (\n    value || defaultValue\n);\n\nconst cleanPositiveFloatInput = (text: string) => {\n    let cleanInput = text\n        .replace(',', '.')\n        .replace(/-+/, '')\n        .replace(/^0+/, '0')\n        .replace(/\\.+/, '.')\n        .replace(/^0+([1-9])/, '$1');\n\n    if (cleanInput[0] === '.') {\n        cleanInput = `0${cleanInput}`;\n    }\n    return cleanInput;\n};\n\nconst checkButtonIsDisabled = (safeAmount: number, safePrice: number, price: string, props: OrderFormProps, state: OrderFormState) => {\n    const invalidAmount = safeAmount <= 0;\n    const invalidLimitPrice = Number(price) <= 0 && state.orderType === 'Limit';\n    const invalidMarketPrice = safePrice <= 0 && state.orderType === 'Market';\n    return props.disabled || !props.available || invalidAmount || invalidLimitPrice || invalidMarketPrice;\n};\n\nexport class OrderForm extends React.Component<OrderFormProps, OrderFormState> {\n    constructor(props: OrderFormProps) {\n        super(props);\n        this.state = {\n            orderType: 'Limit',\n            amount: '',\n            price: '',\n            priceMarket: this.props.priceMarket,\n            currentMarketAskPrecision: this.props.currentMarketAskPrecision || 6,\n            currentMarketBidPrecision: this.props.currentMarketBidPrecision || 6,\n            priceFocused: false,\n            amountFocused: false,\n        };\n    }\n\n    public componentWillReceiveProps(next: OrderFormProps) {\n        const nextPriceLimitTruncated = Decimal.format(next.priceLimit, this.state.currentMarketBidPrecision);\n        if (this.state.orderType === 'Limit' && next.priceLimit && nextPriceLimitTruncated !== this.state.price) {\n            this.setState({\n                price: nextPriceLimitTruncated,\n            });\n        }\n\n        this.setState({\n            priceMarket: next.priceMarket,\n            currentMarketAskPrecision: next.currentMarketAskPrecision,\n            currentMarketBidPrecision: next.currentMarketBidPrecision,\n        });\n    }\n\n    public render() {\n        const {\n            type,\n            orderTypes,\n            className,\n            from,\n            to,\n            available,\n            orderTypeText,\n            priceText,\n            amountText,\n            totalText,\n            availableText,\n            submitButtonText,\n            proposals,\n        } = this.props;\n        const {\n            orderType,\n            amount,\n            price,\n            priceMarket,\n            currentMarketAskPrecision,\n            currentMarketBidPrecision,\n            priceFocused,\n            amountFocused,\n        } = this.state;\n        const safeAmount = Number(amount) || 0;\n        const totalPrice = getTotalPrice(amount, proposals);\n        const safePrice = totalPrice / Number(amount) || priceMarket;\n\n        const total = orderType === 'Market'\n            ? totalPrice : safeAmount * (Number(price) || 0);\n        const amountPercentageArray = [0.25, 0.5, 0.75, 1];\n\n        const cx = classnames('cr-order-form', className);\n        const currencyCodeFrom = `${from.toUpperCase()}-alt`;\n        const availablePrecision = type === 'buy' ? currentMarketBidPrecision : currentMarketAskPrecision;\n        const availableCurrency = type === 'buy' ? from : to;\n\n        return (\n            <div className={cx}>\n                <div className=\"cr-order-item\">\n                    {orderTypeText ? <div className=\"cr-order-item__dropdown__label\">{orderTypeText}</div> : null}\n                    <Dropdown list={orderTypes} onSelect={this.handleOrderTypeChange}/>\n                </div>\n                {orderType === 'Limit' ? (\n                    <div className=\"cr-order-item\">\n                        <OrderInput\n                            currency={from}\n                            label={priceText}\n                            placeholder={priceText}\n                            value={handleSetValue(price,'')}\n                            isFocused={priceFocused}\n                            handleChangeValue={this.handlePriceChange}\n                            handleFocusInput={() => this.handleFieldFocus(priceText)}\n                        />\n                    </div>\n                ) : (\n                    <div className=\"cr-order-item\">\n                        <div className=\"cr-order-input\">\n                            <fieldset className=\"cr-order-input__fieldset\">\n                                <legend className={'cr-order-input__fieldset__label'}>\n                                    {handleSetValue(priceText, '')}\n                                </legend>\n                                <div className=\"cr-order-input__fieldset__input\">\n                                    &asymp;<span className=\"cr-order-input__fieldset__input__price\">{handleSetValue(Decimal.format(safePrice, currentMarketBidPrecision), '0')}</span>\n                                </div>\n                            </fieldset>\n                            <div className=\"cr-order-input__crypto-icon\">\n                                <CryptoIcon code={currencyCodeFrom}>{from.toUpperCase()}</CryptoIcon>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"cr-order-item\">\n                    <OrderInput\n                        currency={to}\n                        label={amountText}\n                        placeholder={amountText}\n                        value={handleSetValue(amount, '')}\n                        isFocused={amountFocused}\n                        handleChangeValue={this.handleAmountChange}\n                        handleFocusInput={() => this.handleFieldFocus(amountText)}\n                    />\n                </div>\n\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__percentage-buttons\">\n                        <PercentageButton\n                            label={`${amountPercentageArray[0] * 100}%`}\n                            onClick={() => this.handleChangeAmountByButton(amountPercentageArray[0], type)}\n                        />\n                        <PercentageButton\n                            label={`${amountPercentageArray[1] * 100}%`}\n                            onClick={() => this.handleChangeAmountByButton(amountPercentageArray[1], type)}\n                        />\n                        <PercentageButton\n                            label={`${amountPercentageArray[2] * 100}%`}\n                            onClick={() => this.handleChangeAmountByButton(amountPercentageArray[2], type)}\n                        />\n                        <PercentageButton\n                            label={`${amountPercentageArray[3] * 100}%`}\n                            onClick={() => this.handleChangeAmountByButton(amountPercentageArray[3], type)}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__total\">\n                        <label className=\"cr-order-item__total__label\">\n                            {handleSetValue(totalText, 'Total')}\n                        </label>\n                        <div className=\"cr-order-item__total__content\">\n                            {orderType === 'Limit' ? (\n                                <span className=\"cr-order-item__total__content__amount\">\n                                    {Decimal.format(total, currentMarketBidPrecision)}\n                                </span>\n                            ) : (\n                                <span className=\"cr-order-item__total__content__amount\">\n                                    &asymp;{Decimal.format(total, currentMarketBidPrecision)}\n                                </span>\n                            )}\n                            <span className=\"cr-order-item__total__content__currency\">\n                                {from.toUpperCase()}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__available\">\n                        <label className=\"cr-order-item__available__label\">\n                            {handleSetValue(availableText, 'Available')}\n                        </label>\n                        <div className=\"cr-order-item__available__content\">\n                            <span className=\"cr-order-item__available__content__amount\">\n                                {available ? Decimal.format(available, availablePrecision) : ''}\n                            </span>\n                            <span className=\"cr-order-item__available__content__currency\">\n                                {available ? availableCurrency.toUpperCase() : ''}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cr-order-item\">\n                    <Button\n                        disabled={checkButtonIsDisabled(safeAmount, safePrice, price, this.props, this.state)}\n                        label={submitButtonText || type}\n                        noMargin={true}\n                        onClick={this.handleSubmit}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private handleOrderTypeChange = (index: number) => {\n        const { orderTypesIndex } = this.props;\n        this.setState({\n            orderType: orderTypesIndex[index],\n        });\n    };\n\n    private handleFieldFocus = (field: string | undefined) => {\n        switch (field) {\n            case this.props.priceText:\n                this.setState(prev => ({\n                    priceFocused: !prev.priceFocused,\n                }));\n                this.props.listenInputPrice && this.props.listenInputPrice();\n                break;\n            case this.props.amountText:\n                this.setState(prev => ({\n                    amountFocused: !prev.amountFocused,\n                }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handlePriceChange = (value: string) => {\n        const convertedValue = cleanPositiveFloatInput(String(value));\n        const condition = new RegExp(`^(?:[\\\\d-]*\\\\.?[\\\\d-]{0,${this.state.currentMarketBidPrecision}}|[\\\\d-]*\\\\.[\\\\d-])$`);\n        if (convertedValue.match(condition)) {\n            this.setState({\n                price: convertedValue,\n            });\n        }\n        this.props.listenInputPrice && this.props.listenInputPrice();\n    };\n\n    private handleAmountChange = (value: string) => {\n        const convertedValue = cleanPositiveFloatInput(String(value));\n        const condition = new RegExp(`^(?:[\\\\d-]*\\\\.?[\\\\d-]{0,${this.state.currentMarketAskPrecision}}|[\\\\d-]*\\\\.[\\\\d-])$`);\n        if (convertedValue.match(condition)) {\n            this.setState({\n                amount: convertedValue,\n            });\n        }\n    };\n\n    private handleChangeAmountByButton = (value: number, type: string) => {\n        switch (type) {\n            case 'buy':\n                switch (this.state.orderType) {\n                    case 'Limit':\n                        this.setState({\n                            amount: this.props.available && + this.state.price ? (\n                                Decimal.format(this.props.available / +this.state.price * value, this.state.currentMarketAskPrecision)\n                            ) : '',\n                        });\n                        break;\n                    case 'Market':\n                        this.setState({\n                            amount: this.props.available ? (\n                                Decimal.format(getAmount(Number(this.props.available), this.props.proposals, value), this.state.currentMarketAskPrecision)\n                            ) : '',\n                        });\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'sell':\n                this.setState({\n                    amount: this.props.available ? (\n                        Decimal.format(this.props.available * value, this.state.currentMarketAskPrecision)\n                    ) : '',\n                });\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handleSubmit = () => {\n        const { available, type } = this.props;\n        const { amount, price, priceMarket, orderType } = this.state;\n\n        const order = {\n            type,\n            orderType,\n            amount,\n            price: orderType === 'Market' ? priceMarket : price,\n            available: available || 0,\n        };\n\n        this.props.onSubmit(order);\n        this.setState({\n            amount: '',\n            price: '',\n        });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}