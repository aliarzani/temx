{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inputValue;\n\nvar _charTypesEnum = require('../constants/charTypesEnum.js');\n\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction inputValue(_ref) {\n  var data = _ref.data,\n      _ref$input = _ref.input,\n      input = _ref$input === undefined ? '' : _ref$input,\n      selection = _ref.selection,\n      mask = _ref.mask,\n      maskChar = _ref.maskChar,\n      maskString = _ref.maskString;\n  var value = [];\n  var maskedValue = '';\n  var maskIndex = 0;\n  var valueIndex = 0;\n  var pastedIndex = 0;\n  var inputValuesApplied = 0;\n\n  while (mask[maskIndex]) {\n    var item = data.length > valueIndex ? data[valueIndex] : null;\n    var maskPart = mask[maskIndex];\n    var pastedValuesStack = null;\n\n    if (selection.start <= maskIndex && pastedIndex < input.length) {\n      pastedValuesStack = input.slice(pastedIndex);\n    } // Обработка захардкоженных в маску символов. \n\n\n    if (maskPart.char) {\n      // Если есть вводимые пользователем значение, в первую очередь проверяем его.\n      // Но не проверяем по всему стеку.\n      if (pastedValuesStack && pastedValuesStack[0] === maskPart.char) {\n        pastedIndex++;\n      } else {\n        if (item && (item.char === maskPart.char || item.type !== _charTypesEnum2.default.USER) || input) {\n          valueIndex++;\n        }\n      }\n\n      value.push({\n        char: maskPart.char,\n        type: _charTypesEnum2.default.CHAR\n      });\n\n      if (pastedValuesStack) {\n        inputValuesApplied++;\n      }\n\n      maskedValue += maskPart.char;\n    } // Кастомный текст\n\n\n    if (maskPart.regexp) {\n      var part = null; // Если есть вводимое пользователем значение, то проверям его. \n      // Причем пробегаемся по стеку вводимых значений, пока не найдем нужное\n\n      if (pastedValuesStack) {\n        var i = 0;\n\n        while (!maskPart.regexp.test(pastedValuesStack[i]) && pastedValuesStack.length > i) {\n          i++;\n          pastedIndex++;\n        }\n\n        if (pastedValuesStack.length > i) {\n          pastedIndex++;\n          inputValuesApplied++; // Игнорируем предыдущее значение в инпуте\n\n          valueIndex++;\n          part = pastedValuesStack[i];\n          value.push({\n            char: part,\n            type: _charTypesEnum2.default.USER\n          });\n          maskedValue += part;\n        }\n      } // В пользовательском вводе нет или невалидные данные. Пытаемся аплаить те данные, что были раньше или заменяем на плейсхолдер\n\n\n      if (!part) {\n        // Если произошел сдвиг, пропускаем лишнее значение\n        if (item && item.type === _charTypesEnum2.default.CHAR && data.length > valueIndex + 1) {\n          valueIndex++;\n          continue;\n        }\n\n        if (item && item.type === _charTypesEnum2.default.USER && maskPart.regexp.test(item.char)) {\n          value.push({\n            char: item.char,\n            type: _charTypesEnum2.default.USER\n          });\n          maskedValue += item.char;\n          valueIndex++;\n        } else {\n          part = maskString ? maskString[maskIndex] : maskChar;\n          value.push({\n            char: part,\n            type: _charTypesEnum2.default.MASK\n          });\n\n          if (data.length > maskIndex) {\n            valueIndex++;\n          }\n\n          maskedValue += part;\n        }\n      }\n    }\n\n    maskIndex++;\n  }\n\n  var selectionPosition = selection.start + inputValuesApplied; // Удаляем все ведующие maskChar\n\n  var bound = value.length - 1;\n  var charsCount = 0;\n\n  while (bound >= 0 && value[bound].type !== _charTypesEnum2.default.USER) {\n    if (value[bound].type === _charTypesEnum2.default.MASK) {\n      charsCount = 0;\n    }\n\n    if (value[bound].type === _charTypesEnum2.default.CHAR) {\n      charsCount++;\n    }\n\n    bound--;\n  }\n\n  bound += charsCount;\n  var visibleValue = '';\n\n  for (var _i = 0; _i <= bound; _i++) {\n    visibleValue += value[_i].char;\n  }\n\n  return {\n    value: value,\n    visibleValue: visibleValue,\n    maskedValue: maskedValue,\n    selection: {\n      start: selectionPosition,\n      end: selectionPosition\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}