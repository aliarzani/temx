{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInput = exports.defaults = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _defineMaskList = require('./functions/defineMaskList');\n\nvar _defineMaskList2 = _interopRequireDefault(_defineMaskList);\n\nvar _inputValue = require('./functions/inputValue');\n\nvar _inputValue2 = _interopRequireDefault(_inputValue);\n\nvar _removeSelectedRange = require('./functions/removeSelectedRange');\n\nvar _removeSelectedRange2 = _interopRequireDefault(_removeSelectedRange);\n\nvar _charTypesEnum = require('./constants/charTypesEnum');\n\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar InputCore = function () {\n  function InputCore(_ref) {\n    var value = _ref.value,\n        mask = _ref.mask,\n        reformat = _ref.reformat,\n        maskFormat = _ref.maskFormat,\n        maskChar = _ref.maskChar,\n        maskString = _ref.maskString;\n\n    _classCallCheck(this, InputCore);\n\n    if (maskString && maskString.length !== mask.length) {\n      throw new Error('maskString must have same length as mask');\n    }\n\n    if (maskChar.length > 1) {\n      throw new Error('maskChar must have only 1 char');\n    }\n\n    this._maskString = maskString;\n    this._maskChar = maskChar;\n    this._reformat = reformat;\n    this.selection = {\n      start: 0,\n      end: 0\n    };\n    this.setMaskFormat(maskFormat);\n    this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\n    this.setValue(value);\n  }\n  /**\n   * Заполняет _maskFormat, который является объектом byId объектов\n   * @param {Array} maskFormat     \n   */\n\n\n  _createClass(InputCore, [{\n    key: 'setMaskFormat',\n    value: function setMaskFormat(maskFormat) {\n      this._maskFormat = maskFormat.reduce(function (store, item) {\n        store[item.str] = item;\n        return store;\n      }, {});\n    }\n  }, {\n    key: 'input',\n    value: function input(_input) {\n      var _value = this._value;\n      var result = void 0;\n\n      if (this._reformat) {\n        result = this._reformat({\n          data: _value,\n          input: _input,\n          selection: this.selection\n        });\n      } else {\n        _value = (0, _removeSelectedRange2.default)({\n          value: _value,\n          selection: this.selection,\n          mask: this._mask,\n          maskChar: this._maskChar,\n          maskString: this._maskString\n        });\n        this.selection.end = this.selection.start;\n        result = (0, _inputValue2.default)({\n          data: _value,\n          input: _input,\n          selection: this.selection,\n          mask: this._mask,\n          maskChar: this._maskChar,\n          maskString: this._maskString\n        });\n      }\n\n      this._value = result.value;\n      this._maskedValue = result.maskedValue;\n      this._visibleValue = result.visibleValue;\n      this.setSelection(result.selection);\n    }\n  }, {\n    key: 'setSelection',\n    value: function setSelection(_ref2) {\n      var start = _ref2.start,\n          end = _ref2.end;\n      this.selection = {\n        start: start,\n        end: end\n      };\n    }\n  }, {\n    key: 'getSelection',\n    value: function getSelection() {\n      return {\n        start: this.selection.start,\n        end: this.selection.end\n      };\n    }\n  }, {\n    key: 'backspace',\n    value: function backspace() {\n      this.removePreviosOrSelected();\n    }\n  }, {\n    key: 'paste',\n    value: function paste(value) {\n      this.input(value);\n    }\n    /**\n     * Определяет циклический список, в котором учтены циклы маски, по которой будет проходить итерации.\n     * @param {String} mask\n     * @returns {{head: {}, hasCycle: boolean}}\n     */\n\n  }, {\n    key: 'setMask',\n    value: function setMask(mask) {\n      this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'getState',\n    value: function getState() {\n      return {\n        value: this.getValue(),\n        maskedValue: this.getMaskedValue(),\n        visibleValue: this.getVisibleValue(),\n        selection: this.getSelection()\n      };\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      return this._value;\n    }\n  }, {\n    key: 'setReformat',\n    value: function setReformat(reformat) {\n      this._reformat = reformat;\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'getMaskedValue',\n    value: function getMaskedValue() {\n      return this._maskedValue;\n    }\n  }, {\n    key: 'getVisibleValue',\n    value: function getVisibleValue() {\n      return this._visibleValue;\n    }\n  }, {\n    key: 'setMaskChar',\n    value: function setMaskChar(maskChar) {\n      if (maskChar.length > 1) {\n        throw new Error('maskChar must have only 1 char');\n      }\n\n      this._maskChar = maskChar;\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'setMaskString',\n    value: function setMaskString(maskString) {\n      if (maskString && maskString.length !== this._mask.length) {\n        throw new Error('maskString must have same length as mask');\n      }\n\n      this._maskString = maskString;\n      this.setValue(this._value);\n    }\n  }, {\n    key: 'removePreviosOrSelected',\n    value: function removePreviosOrSelected() {\n      if (this.selection.start === this.selection.end) {\n        this.selection.start = this.selection.end - 1;\n\n        if (this.selection.start < 0) {\n          this.selection.start = 0;\n        }\n      }\n\n      this.input('');\n    }\n  }, {\n    key: 'removeNextOrSelected',\n    value: function removeNextOrSelected() {\n      if (this.selection.start === this.selection.end) {\n        this.selection.end++;\n      }\n\n      this.input('');\n    }\n  }, {\n    key: 'setValue',\n    value: function setValue(data) {\n      var result = void 0;\n\n      if (this._reformat) {\n        result = this._reformat({\n          data: data,\n          selection: this.selection\n        });\n      } else {\n        var dataList = data;\n\n        if (!Array.isArray(dataList)) {\n          dataList = [];\n\n          for (var i = 0; i < data.length; i++) {\n            dataList.push({\n              char: data[i],\n              type: _charTypesEnum2.default.USER\n            });\n          }\n        }\n\n        result = (0, _inputValue2.default)({\n          data: dataList,\n          selection: this.selection,\n          mask: this._mask,\n          maskChar: this._maskChar,\n          maskString: this._maskString\n        });\n      }\n\n      this._value = result.value;\n      this._maskedValue = result.maskedValue;\n      this._visibleValue = result.visibleValue;\n      this.setSelection(result.selection);\n    }\n  }]);\n\n  return InputCore;\n}();\n\nvar defaults = exports.defaults = {\n  maskFormat: [{\n    str: '0',\n    regexp: /[0-9]/\n  }, {\n    str: '*',\n    regexp: /./\n  }, {\n    str: 'a',\n    regexp: /[a-zA-Z]/\n  }],\n  maskChar: '',\n  showMask: false,\n  removeSelectedRange: _removeSelectedRange2.default\n};\n\nvar createInput = exports.createInput = function createInput(_ref3) {\n  var value = _ref3.value,\n      maskString = _ref3.maskString,\n      mask = _ref3.mask,\n      reformat = _ref3.reformat,\n      _ref3$maskFormat = _ref3.maskFormat,\n      maskFormat = _ref3$maskFormat === undefined ? defaults.maskFormat : _ref3$maskFormat,\n      _ref3$maskChar = _ref3.maskChar,\n      maskChar = _ref3$maskChar === undefined ? defaults.maskChar : _ref3$maskChar;\n  var _reformat = reformat;\n  var _mask = mask;\n\n  if (!_reformat && !_mask) {\n    _reformat = function _reformat(value) {\n      return value;\n    };\n  } else if (_reformat) {\n    _mask = null;\n  }\n\n  return new InputCore({\n    value: value,\n    mask: _mask,\n    reformat: _reformat,\n    maskFormat: maskFormat,\n    maskChar: maskChar,\n    maskString: maskString\n  });\n};","map":null,"metadata":{},"sourceType":"script"}