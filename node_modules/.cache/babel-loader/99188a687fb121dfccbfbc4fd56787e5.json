{"ast":null,"code":"import _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/containers/Wallets/EstimatedValue/index.tsx\";\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { VALUATION_PRIMARY_CURRENCY, VALUATION_SECONDARY_CURRENCY } from '../../../constants';\nimport { estimateUnitValue, estimateValue } from '../../../helpers/estimateValue';\nimport { currenciesFetch, marketsFetch, marketsTickersFetch, selectCurrencies, selectMarkets, selectMarketTickers, selectUserLoggedIn } from '../../../modules';\nimport { rangerConnectFetch } from '../../../modules/public/ranger';\nimport { selectRanger } from '../../../modules/public/ranger/selectors';\n\nvar EstimatedValueContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EstimatedValueContainer, _React$Component);\n\n  function EstimatedValueContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EstimatedValueContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EstimatedValueContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.translate = function (key) {\n      return _this.props.intl.formatMessage({\n        id: key\n      });\n    };\n\n    _this.renderSecondaryCurrencyValuation = function (estimatedValue) {\n      var _this$props = _this.props,\n          currencies = _this$props.currencies,\n          markets = _this$props.markets,\n          tickers = _this$props.tickers;\n      var estimatedValueSecondary = estimateUnitValue(VALUATION_SECONDARY_CURRENCY, VALUATION_PRIMARY_CURRENCY, +estimatedValue, currencies, markets, tickers);\n      return React.createElement(\"span\", {\n        className: \"value-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, estimatedValueSecondary), React.createElement(\"span\", {\n        className: \"value-sign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, VALUATION_SECONDARY_CURRENCY.toUpperCase()));\n    };\n\n    return _this;\n  }\n\n  _createClass(EstimatedValueContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props2 = this.props,\n          currencies = _this$props2.currencies,\n          fetchCurrencies = _this$props2.fetchCurrencies,\n          fetchMarkets = _this$props2.fetchMarkets,\n          fetchTickers = _this$props2.fetchTickers,\n          markets = _this$props2.markets,\n          connected = _this$props2.rangerState.connected,\n          userLoggedIn = _this$props2.userLoggedIn;\n\n      if (markets.length === 0) {\n        fetchMarkets();\n        fetchTickers();\n      }\n\n      if (currencies.length === 0) {\n        fetchCurrencies();\n      }\n\n      if (!connected) {\n        this.props.rangerConnect({\n          withAuth: userLoggedIn\n        });\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var _this$props3 = this.props,\n          currencies = _this$props3.currencies,\n          fetchCurrencies = _this$props3.fetchCurrencies,\n          fetchMarkets = _this$props3.fetchMarkets,\n          fetchTickers = _this$props3.fetchTickers,\n          markets = _this$props3.markets;\n\n      if (next.markets.length === 0 && next.markets !== markets) {\n        fetchMarkets();\n        fetchTickers();\n      }\n\n      if (next.currencies.length === 0 && next.currencies !== currencies) {\n        fetchCurrencies();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          currencies = _this$props4.currencies,\n          markets = _this$props4.markets,\n          tickers = _this$props4.tickers,\n          wallets = _this$props4.wallets;\n      var estimatedValue = estimateValue(VALUATION_PRIMARY_CURRENCY, currencies, wallets, markets, tickers);\n      return React.createElement(\"div\", {\n        className: \"pg-estimated-value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-estimated-value__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.translate('page.body.wallets.estimated_value'), React.createElement(\"span\", {\n        className: \"value-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"value\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, estimatedValue), React.createElement(\"span\", {\n        className: \"value-sign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, VALUATION_PRIMARY_CURRENCY.toUpperCase())), VALUATION_SECONDARY_CURRENCY && this.renderSecondaryCurrencyValuation(estimatedValue)));\n    }\n  }]);\n\n  return EstimatedValueContainer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    currencies: selectCurrencies(state),\n    markets: selectMarkets(state),\n    tickers: selectMarketTickers(state),\n    rangerState: selectRanger(state),\n    userLoggedIn: selectUserLoggedIn(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchCurrencies: function fetchCurrencies() {\n      return dispatch(currenciesFetch());\n    },\n    fetchMarkets: function fetchMarkets() {\n      return dispatch(marketsFetch());\n    },\n    fetchTickers: function fetchTickers() {\n      return dispatch(marketsTickersFetch());\n    },\n    rangerConnect: function rangerConnect(payload) {\n      return dispatch(rangerConnectFetch(payload));\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nexport var EstimatedValue = injectIntl(connect(mapStateToProps, mapDispatchToProps)(EstimatedValueContainer));","map":{"version":3,"sources":["/workspaces/temx/src/containers/Wallets/EstimatedValue/index.tsx"],"names":["React","injectIntl","connect","VALUATION_PRIMARY_CURRENCY","VALUATION_SECONDARY_CURRENCY","estimateUnitValue","estimateValue","currenciesFetch","marketsFetch","marketsTickersFetch","selectCurrencies","selectMarkets","selectMarketTickers","selectUserLoggedIn","rangerConnectFetch","selectRanger","EstimatedValueContainer","translate","key","props","intl","formatMessage","id","renderSecondaryCurrencyValuation","estimatedValue","currencies","markets","tickers","estimatedValueSecondary","toUpperCase","fetchCurrencies","fetchMarkets","fetchTickers","connected","rangerState","userLoggedIn","length","rangerConnect","withAuth","next","wallets","Component","mapStateToProps","state","mapDispatchToProps","dispatch","payload","EstimatedValue"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAA4BC,UAA5B,QAA8C,YAA9C;AACA,SAASC,OAAT,QAAoD,aAApD;AAEA,SAASC,0BAAT,EAAqCC,4BAArC,QAAyE,oBAAzE;AACA,SAASC,iBAAT,EAA4BC,aAA5B,QAAiD,gCAAjD;AACA,SACIC,eADJ,EAGIC,YAHJ,EAIIC,mBAJJ,EAMIC,gBANJ,EAOIC,aAPJ,EAQIC,mBARJ,EASIC,kBATJ,QAUO,kBAVP;AAYA,SAASC,kBAAT,QAAuD,gCAAvD;AAEA,SAASC,YAAT,QAA6B,0CAA7B;;IA0BMC,uB;;;;;;;;;;;;;;;;;;UAsEKC,S,GAAY,UAACC,GAAD;AAAA,aAAiB,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,QAAAA,EAAE,EAAEJ;AAAL,OAA9B,CAAjB;AAAA,K;;UAEXK,gC,GAAmC,UAACC,cAAD,EAA4B;AAAA,wBAK/D,MAAKL,KAL0D;AAAA,UAE/DM,UAF+D,eAE/DA,UAF+D;AAAA,UAG/DC,OAH+D,eAG/DA,OAH+D;AAAA,UAI/DC,OAJ+D,eAI/DA,OAJ+D;AAMnE,UAAMC,uBAAuB,GAAGvB,iBAAiB,CAACD,4BAAD,EAA+BD,0BAA/B,EAA2D,CAACqB,cAA5D,EAA4EC,UAA5E,EAAwFC,OAAxF,EAAiGC,OAAjG,CAAjD;AAEA,aACI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKC,uBADL,CADJ,EAII;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BxB,4BAA4B,CAACyB,WAA7B,EAA9B,CAJJ,CADJ;AAQH,K;;;;;;;wCAvFgC;AAAA,yBASzB,KAAKV,KAToB;AAAA,UAEzBM,UAFyB,gBAEzBA,UAFyB;AAAA,UAGzBK,eAHyB,gBAGzBA,eAHyB;AAAA,UAIzBC,YAJyB,gBAIzBA,YAJyB;AAAA,UAKzBC,YALyB,gBAKzBA,YALyB;AAAA,UAMzBN,OANyB,gBAMzBA,OANyB;AAAA,UAOXO,SAPW,gBAOzBC,WAPyB,CAOXD,SAPW;AAAA,UAQzBE,YARyB,gBAQzBA,YARyB;;AAW7B,UAAIT,OAAO,CAACU,MAAR,KAAmB,CAAvB,EAA0B;AACtBL,QAAAA,YAAY;AACZC,QAAAA,YAAY;AACf;;AAED,UAAIP,UAAU,CAACW,MAAX,KAAsB,CAA1B,EAA6B;AACzBN,QAAAA,eAAe;AAClB;;AAED,UAAI,CAACG,SAAL,EAAgB;AACZ,aAAKd,KAAL,CAAWkB,aAAX,CAAyB;AAACC,UAAAA,QAAQ,EAAEH;AAAX,SAAzB;AACH;AACJ;;;8CAEgCI,I,EAAa;AAAA,yBAOtC,KAAKpB,KAPiC;AAAA,UAEtCM,UAFsC,gBAEtCA,UAFsC;AAAA,UAGtCK,eAHsC,gBAGtCA,eAHsC;AAAA,UAItCC,YAJsC,gBAItCA,YAJsC;AAAA,UAKtCC,YALsC,gBAKtCA,YALsC;AAAA,UAMtCN,OANsC,gBAMtCA,OANsC;;AAS1C,UAAIa,IAAI,CAACb,OAAL,CAAaU,MAAb,KAAwB,CAAxB,IAA6BG,IAAI,CAACb,OAAL,KAAiBA,OAAlD,EAA2D;AACvDK,QAAAA,YAAY;AACZC,QAAAA,YAAY;AACf;;AAED,UAAIO,IAAI,CAACd,UAAL,CAAgBW,MAAhB,KAA2B,CAA3B,IAAgCG,IAAI,CAACd,UAAL,KAAoBA,UAAxD,EAAoE;AAChEK,QAAAA,eAAe;AAClB;AACJ;;;6BAEgC;AAAA,yBAMzB,KAAKX,KANoB;AAAA,UAEzBM,UAFyB,gBAEzBA,UAFyB;AAAA,UAGzBC,OAHyB,gBAGzBA,OAHyB;AAAA,UAIzBC,OAJyB,gBAIzBA,OAJyB;AAAA,UAKzBa,OALyB,gBAKzBA,OALyB;AAO7B,UAAMhB,cAAc,GAAGlB,aAAa,CAACH,0BAAD,EAA6BsB,UAA7B,EAAyCe,OAAzC,EAAkDd,OAAlD,EAA2DC,OAA3D,CAApC;AAEA,aACI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKV,SAAL,CAAe,mCAAf,CADL,EAEI;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKO,cADL,CADJ,EAII;AAAM,QAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BrB,0BAA0B,CAAC0B,WAA3B,EAA9B,CAJJ,CAFJ,EAQKzB,4BAA4B,IAAI,KAAKmB,gCAAL,CAAsCC,cAAtC,CARrC,CADJ,CADJ;AAcH;;;;EApEiCxB,KAAK,CAACyC,S;;AA2F5C,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAmC;AACvDlB,IAAAA,UAAU,EAAEf,gBAAgB,CAACiC,KAAD,CAD2B;AAEvDjB,IAAAA,OAAO,EAAEf,aAAa,CAACgC,KAAD,CAFiC;AAGvDhB,IAAAA,OAAO,EAAEf,mBAAmB,CAAC+B,KAAD,CAH2B;AAIvDT,IAAAA,WAAW,EAAEnB,YAAY,CAAC4B,KAAD,CAJ8B;AAKvDR,IAAAA,YAAY,EAAEtB,kBAAkB,CAAC8B,KAAD;AALuB,GAAnC;AAAA,CAAxB;;AAQA,IAAMC,kBAAiE,GAAG,SAApEA,kBAAoE,CAAAC,QAAQ;AAAA,SAAK;AACnFf,IAAAA,eAAe,EAAE;AAAA,aAAMe,QAAQ,CAACtC,eAAe,EAAhB,CAAd;AAAA,KADkE;AAEnFwB,IAAAA,YAAY,EAAE;AAAA,aAAMc,QAAQ,CAACrC,YAAY,EAAb,CAAd;AAAA,KAFqE;AAGnFwB,IAAAA,YAAY,EAAE;AAAA,aAAMa,QAAQ,CAACpC,mBAAmB,EAApB,CAAd;AAAA,KAHqE;AAInF4B,IAAAA,aAAa,EAAE,uBAACS,OAAD;AAAA,aAA4CD,QAAQ,CAAC/B,kBAAkB,CAACgC,OAAD,CAAnB,CAApD;AAAA;AAJoE,GAAL;AAAA,CAAlF,C,CAOA;;;AACA,OAAO,IAAMC,cAAc,GAAG9C,UAAU,CAACC,OAAO,CAACwC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C5B,uBAA7C,CAAD,CAAjC","sourcesContent":["import * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { WalletItemProps } from '../../../components/WalletItem';\nimport { VALUATION_PRIMARY_CURRENCY, VALUATION_SECONDARY_CURRENCY } from '../../../constants';\nimport { estimateUnitValue, estimateValue } from '../../../helpers/estimateValue';\nimport {\n    currenciesFetch,\n    Currency,\n    marketsFetch,\n    marketsTickersFetch,\n    RootState,\n    selectCurrencies,\n    selectMarkets,\n    selectMarketTickers,\n    selectUserLoggedIn,\n} from '../../../modules';\nimport { Market, Ticker } from '../../../modules/public/markets';\nimport { rangerConnectFetch, RangerConnectFetch } from '../../../modules/public/ranger';\nimport { RangerState } from '../../../modules/public/ranger/reducer';\nimport { selectRanger } from '../../../modules/public/ranger/selectors';\n\ninterface EstimatedValueProps {\n    wallets: WalletItemProps[];\n    hello: string;\n}\n\ninterface ReduxProps {\n    currencies: Currency[];\n    markets: Market[];\n    tickers: {\n        [key: string]: Ticker,\n    };\n    rangerState: RangerState;\n    userLoggedIn: boolean;\n}\n\ninterface DispatchProps {\n    fetchCurrencies: typeof currenciesFetch;\n    fetchMarkets: typeof marketsFetch;\n    fetchTickers: typeof marketsTickersFetch;\n    rangerConnect: typeof rangerConnectFetch;\n}\n\ntype Props = DispatchProps & ReduxProps & EstimatedValueProps & InjectedIntlProps;\n\nclass EstimatedValueContainer extends React.Component<Props> {\n    public componentDidMount(): void {\n        const {\n            currencies,\n            fetchCurrencies,\n            fetchMarkets,\n            fetchTickers,\n            markets,\n            rangerState: {connected},\n            userLoggedIn,\n        } = this.props;\n\n        if (markets.length === 0) {\n            fetchMarkets();\n            fetchTickers();\n        }\n\n        if (currencies.length === 0) {\n            fetchCurrencies();\n        }\n\n        if (!connected) {\n            this.props.rangerConnect({withAuth: userLoggedIn});\n        }\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        const {\n            currencies,\n            fetchCurrencies,\n            fetchMarkets,\n            fetchTickers,\n            markets,\n        } = this.props;\n\n        if (next.markets.length === 0 && next.markets !== markets) {\n            fetchMarkets();\n            fetchTickers();\n        }\n\n        if (next.currencies.length === 0 && next.currencies !== currencies) {\n            fetchCurrencies();\n        }\n    }\n\n    public render(): React.ReactNode {\n        const {\n            currencies,\n            markets,\n            tickers,\n            wallets,\n        } = this.props;\n        const estimatedValue = estimateValue(VALUATION_PRIMARY_CURRENCY, currencies, wallets, markets, tickers);\n\n        return (\n            <div className=\"pg-estimated-value\">\n                <div className=\"pg-estimated-value__container\">\n                    {this.translate('page.body.wallets.estimated_value')}\n                    <span className=\"value-container\">\n                        <span className=\"value\">\n                            {estimatedValue}\n                        </span>\n                        <span className=\"value-sign\">{VALUATION_PRIMARY_CURRENCY.toUpperCase()}</span>\n                    </span>\n                    {VALUATION_SECONDARY_CURRENCY && this.renderSecondaryCurrencyValuation(estimatedValue)}\n                </div>\n            </div>\n        );\n    }\n\n    public translate = (key: string) => this.props.intl.formatMessage({id: key});\n\n    private renderSecondaryCurrencyValuation = (estimatedValue: string) => {\n        const {\n            currencies,\n            markets,\n            tickers,\n        } = this.props;\n        const estimatedValueSecondary = estimateUnitValue(VALUATION_SECONDARY_CURRENCY, VALUATION_PRIMARY_CURRENCY, +estimatedValue, currencies, markets, tickers);\n\n        return (\n            <span className=\"value-container\">\n                <span className=\"value\">\n                    {estimatedValueSecondary}\n                </span>\n                <span className=\"value-sign\">{VALUATION_SECONDARY_CURRENCY.toUpperCase()}</span>\n            </span>\n        );\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    currencies: selectCurrencies(state),\n    markets: selectMarkets(state),\n    tickers: selectMarketTickers(state),\n    rangerState: selectRanger(state),\n    userLoggedIn: selectUserLoggedIn(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    fetchCurrencies: () => dispatch(currenciesFetch()),\n    fetchMarkets: () => dispatch(marketsFetch()),\n    fetchTickers: () => dispatch(marketsTickersFetch()),\n    rangerConnect: (payload: RangerConnectFetch['payload']) => dispatch(rangerConnectFetch(payload)),\n});\n\n// tslint:disable-next-line:no-any\nexport const EstimatedValue = injectIntl(connect(mapStateToProps, mapDispatchToProps)(EstimatedValueContainer)) as any;\n"]},"metadata":{},"sourceType":"module"}