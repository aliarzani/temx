{"ast":null,"code":"import _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/containers/NavBar/index.tsx\";\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { Moon } from '../../assets/images/Moon';\nimport { Sun } from '../../assets/images/Sun';\nimport { colors } from '../../constants';\nimport { changeColorTheme as _changeColorTheme, changeLanguage as _changeLanguage, logoutFetch, selectCurrentColorTheme, selectCurrentLanguage, selectCurrentMarket, selectUserInfo, selectUserLoggedIn, walletsReset as _walletsReset } from '../../modules';\n\n// tslint:disable:jsx-no-lambda\nvar NavBarComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NavBarComponent, _React$Component);\n\n  function NavBarComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NavBarComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NavBarComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isOpen: false,\n      isOpenLanguage: false,\n      email: '',\n      name: '',\n      message: '',\n      recaptchaResponse: '',\n      errorModal: false\n    };\n\n    _this.getLightDarkMode = function () {\n      var colorTheme = _this.props.colorTheme;\n\n      if (colorTheme === 'basic') {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"switcher-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(Sun, {\n          fillColor: colors.light.navbar.sun,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"switcher-item switcher-item--active\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(Moon, {\n          fillColor: colors.light.navbar.moon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"switcher-item switcher-item--active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Sun, {\n        fillColor: colors.basic.navbar.sun,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"switcher-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Moon, {\n        fillColor: colors.basic.navbar.moon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })));\n    };\n\n    _this.handleChangeCurrentStyleMode = function (value) {\n      _this.props.changeColorTheme(value);\n    };\n\n    return _this;\n  }\n\n  _createClass(NavBarComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var colorTheme = this.props.colorTheme;\n      return React.createElement(\"div\", {\n        className: 'pg-navbar',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-navbar__header-settings\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-navbar__header-settings__switcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-navbar__header-settings__switcher__items\",\n        onClick: function onClick(e) {\n          return _this2.handleChangeCurrentStyleMode(colorTheme === 'light' ? 'basic' : 'light');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.getLightDarkMode()))));\n    }\n  }]);\n\n  return NavBarComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    colorTheme: selectCurrentColorTheme(state),\n    currentMarket: selectCurrentMarket(state),\n    address: '',\n    lang: selectCurrentLanguage(state),\n    user: selectUserInfo(state),\n    isLoggedIn: selectUserLoggedIn(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    changeColorTheme: function changeColorTheme(payload) {\n      return dispatch(_changeColorTheme(payload));\n    },\n    changeLanguage: function changeLanguage(payload) {\n      return dispatch(_changeLanguage(payload));\n    },\n    logout: function logout() {\n      return dispatch(logoutFetch());\n    },\n    walletsReset: function walletsReset() {\n      return dispatch(_walletsReset());\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nvar NavBar = withRouter(connect(mapStateToProps, mapDispatchToProps)(NavBarComponent));\nexport { NavBar };","map":{"version":3,"sources":["/workspaces/temx/src/containers/NavBar/index.tsx"],"names":["React","connect","withRouter","Moon","Sun","colors","changeColorTheme","changeLanguage","logoutFetch","selectCurrentColorTheme","selectCurrentLanguage","selectCurrentMarket","selectUserInfo","selectUserLoggedIn","walletsReset","NavBarComponent","state","isOpen","isOpenLanguage","email","name","message","recaptchaResponse","errorModal","getLightDarkMode","colorTheme","props","light","navbar","sun","moon","basic","handleChangeCurrentStyleMode","value","e","Component","mapStateToProps","currentMarket","address","lang","user","isLoggedIn","mapDispatchToProps","dispatch","payload","logout","NavBar"],"mappings":"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","sourcesContent":["import { History } from 'history';\nimport * as React from 'react';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { RouteProps, withRouter } from 'react-router-dom';\nimport { Moon } from '../../assets/images/Moon';\nimport { Sun } from '../../assets/images/Sun';\nimport { colors } from '../../constants';\nimport {\n    changeColorTheme,\n    changeLanguage,\n    logoutFetch,\n    Market,\n    RootState,\n    selectCurrentColorTheme,\n    selectCurrentLanguage,\n    selectCurrentMarket,\n    selectUserInfo,\n    selectUserLoggedIn,\n    User,\n    walletsReset,\n} from '../../modules';\n\nexport interface ReduxProps {\n    colorTheme: string;\n    currentMarket: Market | undefined;\n    address: string;\n    isLoggedIn: boolean;\n    lang: string;\n    success?: boolean;\n    user: User;\n}\n\ninterface DispatchProps {\n    changeColorTheme: typeof changeColorTheme;\n    changeLanguage: typeof changeLanguage;\n    logout: typeof logoutFetch;\n    walletsReset: typeof walletsReset;\n}\n\nexport interface OwnProps {\n    onLinkChange?: () => void;\n    history: History;\n}\n\ntype NavbarProps = OwnProps & ReduxProps & RouteProps & DispatchProps;\n\ninterface NavbarState {\n    isOpen: boolean;\n    isOpenLanguage: boolean;\n    email: string;\n    message: string;\n    name: string;\n    recaptchaResponse: string;\n    errorModal: boolean;\n}\n\n// tslint:disable:jsx-no-lambda\nclass NavBarComponent extends React.Component<NavbarProps, NavbarState> {\n    public readonly state = {\n        isOpen: false,\n        isOpenLanguage: false,\n        email: '',\n        name: '',\n        message: '',\n        recaptchaResponse: '',\n        errorModal: false,\n    };\n\n    public render() {\n        const { colorTheme } = this.props;\n\n        return (\n            <div className={'pg-navbar'}>\n                <div className=\"pg-navbar__header-settings\">\n                    <div className=\"pg-navbar__header-settings__switcher\">\n                        <div\n                            className=\"pg-navbar__header-settings__switcher__items\"\n                            onClick={e => this.handleChangeCurrentStyleMode(colorTheme === 'light' ? 'basic' : 'light')}\n                        >\n                            {this.getLightDarkMode()}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private getLightDarkMode = () => {\n        const { colorTheme } = this.props;\n\n        if (colorTheme === 'basic') {\n            return (\n                <React.Fragment>\n                    <div className=\"switcher-item\">\n                        <Sun fillColor={colors.light.navbar.sun}/>\n                    </div>\n                    <div className=\"switcher-item switcher-item--active\">\n                        <Moon fillColor={colors.light.navbar.moon}/>\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"switcher-item switcher-item--active\">\n                    <Sun fillColor={colors.basic.navbar.sun}/>\n                </div>\n                <div className=\"switcher-item\">\n                    <Moon fillColor={colors.basic.navbar.moon}/>\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    private handleChangeCurrentStyleMode = (value: string) => {\n        this.props.changeColorTheme(value);\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> =\n    (state: RootState): ReduxProps => ({\n        colorTheme: selectCurrentColorTheme(state),\n        currentMarket: selectCurrentMarket(state),\n        address: '',\n        lang: selectCurrentLanguage(state),\n        user: selectUserInfo(state),\n        isLoggedIn: selectUserLoggedIn(state),\n    });\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        changeColorTheme: payload => dispatch(changeColorTheme(payload)),\n        changeLanguage: payload => dispatch(changeLanguage(payload)),\n        logout: () => dispatch(logoutFetch()),\n        walletsReset: () => dispatch(walletsReset()),\n    });\n\n// tslint:disable-next-line:no-any\nconst NavBar = withRouter(connect(mapStateToProps, mapDispatchToProps)(NavBarComponent) as any) as any;\n\nexport {\n    NavBar,\n};\n"]},"metadata":{},"sourceType":"module"}