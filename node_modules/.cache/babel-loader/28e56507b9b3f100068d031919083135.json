{"ast":null,"code":"import _defineProperty from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { KLINE_DATA, KLINE_FETCH, KLINE_PUSH, KLINE_UPDATE_PERIOD, KLINE_UPDATE_TIME_RANGE } from './constants';\nexport var klineArrayToObject = function klineArrayToObject(el) {\n  var _el$map = el.map(function (e) {\n    switch (typeof e) {\n      case 'number':\n        return e;\n\n      case 'string':\n        return Number.parseFloat(e);\n\n      default:\n        throw new Error(\"unexpected type \".concat(typeof e, \" in kline: \").concat(el));\n    }\n  }),\n      _el$map2 = _slicedToArray(_el$map, 6),\n      time = _el$map2[0],\n      open = _el$map2[1],\n      high = _el$map2[2],\n      low = _el$map2[3],\n      close = _el$map2[4],\n      volume = _el$map2[5];\n\n  return {\n    time: time * 1e3,\n    open: open,\n    high: high,\n    low: low,\n    close: close,\n    volume: volume\n  };\n};\nexport var initialKlineState = {\n  last: undefined,\n  marketId: undefined,\n  period: undefined,\n  loading: false,\n  data: [],\n  range: {\n    from: 0,\n    to: 0\n  }\n};\nexport var klineReducer = function klineReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialKlineState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case KLINE_PUSH:\n      var _action$payload = action.payload,\n          kline = _action$payload.kline,\n          marketId = _action$payload.marketId,\n          period = _action$payload.period;\n      return _objectSpread({}, state, {\n        marketId: marketId,\n        period: period,\n        last: klineArrayToObject(kline)\n      });\n\n    case KLINE_FETCH:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case KLINE_DATA:\n      return _objectSpread({}, state, {\n        loading: false,\n        data: action.payload\n      });\n\n    case KLINE_UPDATE_TIME_RANGE:\n      return _objectSpread({}, state, {\n        range: action.payload\n      });\n\n    case KLINE_UPDATE_PERIOD:\n      return _objectSpread({}, state, {\n        period: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/workspaces/temx/src/modules/public/kline/reducer.ts"],"names":["KLINE_DATA","KLINE_FETCH","KLINE_PUSH","KLINE_UPDATE_PERIOD","KLINE_UPDATE_TIME_RANGE","klineArrayToObject","el","map","e","Number","parseFloat","Error","time","open","high","low","close","volume","initialKlineState","last","undefined","marketId","period","loading","data","range","from","to","klineReducer","state","action","type","payload","kline"],"mappings":";;;;;;;AAEA,SACIA,UADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,mBAJJ,EAKIC,uBALJ,QAMO,aANP;AAsBA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,EAAD,EAAuC;AAAA,gBACtBA,EAAE,CAACC,GAAH,CAAO,UAACC,CAAD,EAAwB;AAC1E,YAAQ,OAAOA,CAAf;AACI,WAAK,QAAL;AACI,eAAOA,CAAP;;AACJ,WAAK,QAAL;AACI,eAAOC,MAAM,CAACC,UAAP,CAAkBF,CAAlB,CAAP;;AACJ;AACI,cAAO,IAAIG,KAAJ,2BAA6B,OAAOH,CAApC,wBAAmDF,EAAnD,EAAP;AANR;AAQH,GAT8C,CADsB;AAAA;AAAA,MAC9DM,IAD8D;AAAA,MACxDC,IADwD;AAAA,MAClDC,IADkD;AAAA,MAC5CC,GAD4C;AAAA,MACvCC,KADuC;AAAA,MAChCC,MADgC;;AAYrE,SAAO;AACHL,IAAAA,IAAI,EAAEA,IAAI,GAAG,GADV;AAEHC,IAAAA,IAAI,EAAJA,IAFG;AAGHC,IAAAA,IAAI,EAAJA,IAHG;AAIHC,IAAAA,GAAG,EAAHA,GAJG;AAKHC,IAAAA,KAAK,EAALA,KALG;AAMHC,IAAAA,MAAM,EAANA;AANG,GAAP;AAQH,CApBM;AAsBP,OAAO,IAAMC,iBAA6B,GAAG;AACzCC,EAAAA,IAAI,EAAEC,SADmC;AAEzCC,EAAAA,QAAQ,EAAED,SAF+B;AAGzCE,EAAAA,MAAM,EAAEF,SAHiC;AAIzCG,EAAAA,OAAO,EAAE,KAJgC;AAKzCC,EAAAA,IAAI,EAAE,EALmC;AAMzCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAE,CADH;AAEHC,IAAAA,EAAE,EAAE;AAFD;AANkC,CAAtC;AAYP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAiE;AAAA,MAAhEC,KAAgE,uEAAxDX,iBAAwD;AAAA,MAArCY,MAAqC;;AACzF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK7B,UAAL;AAAA,4BACwC4B,MAAM,CAACE,OAD/C;AAAA,UACYC,KADZ,mBACYA,KADZ;AAAA,UACmBZ,QADnB,mBACmBA,QADnB;AAAA,UAC6BC,MAD7B,mBAC6BA,MAD7B;AAEI,+BACOO,KADP;AAEIR,QAAAA,QAAQ,EAARA,QAFJ;AAGIC,QAAAA,MAAM,EAANA,MAHJ;AAIIH,QAAAA,IAAI,EAAEd,kBAAkB,CAAC4B,KAAD;AAJ5B;;AAMJ,SAAKhC,WAAL;AACI,+BACO4B,KADP;AAEIN,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAKvB,UAAL;AACI,+BACO6B,KADP;AAEIN,QAAAA,OAAO,EAAE,KAFb;AAGIC,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAHjB;;AAKJ,SAAK5B,uBAAL;AACI,+BACOyB,KADP;AAEIJ,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAFlB;;AAIJ,SAAK7B,mBAAL;AACI,+BACO0B,KADP;AAEIP,QAAAA,MAAM,EAAEQ,MAAM,CAACE;AAFnB;;AAIJ;AACI,aAAOH,KAAP;AA/BR;AAiCH,CAlCM","sourcesContent":["import { CommonState } from '../../types';\nimport { KlineActions, KlineRawElement } from './actions';\nimport {\n    KLINE_DATA,\n    KLINE_FETCH,\n    KLINE_PUSH,\n    KLINE_UPDATE_PERIOD,\n    KLINE_UPDATE_TIME_RANGE,\n} from './constants';\nimport { KlineEvent } from './types';\n\nexport interface KlineState extends CommonState {\n    last?: KlineEvent;\n    marketId?: string;\n    period?: string;\n    loading: boolean;\n    // tslint:disable-next-line:no-any\n    data: any;\n    range: {\n        from: number;\n        to: number;\n    };\n}\n\nexport const klineArrayToObject = (el: KlineRawElement[]): KlineEvent => {\n    const [time, open, high, low, close, volume] = el.map((e: KlineRawElement) => {\n        switch (typeof e) {\n            case 'number':\n                return e;\n            case 'string':\n                return Number.parseFloat(e);\n            default:\n                throw (new Error(`unexpected type ${typeof e} in kline: ${el}`));\n        }\n    });\n\n    return {\n        time: time * 1e3,\n        open,\n        high,\n        low,\n        close,\n        volume,\n    };\n};\n\nexport const initialKlineState: KlineState = {\n    last: undefined,\n    marketId: undefined,\n    period: undefined,\n    loading: false,\n    data: [],\n    range: {\n        from: 0,\n        to: 0,\n    },\n};\n\nexport const klineReducer = (state = initialKlineState, action: KlineActions): KlineState => {\n    switch (action.type) {\n        case KLINE_PUSH:\n            const { kline, marketId, period } = action.payload;\n            return {\n                ...state,\n                marketId,\n                period,\n                last: klineArrayToObject(kline),\n            };\n        case KLINE_FETCH:\n            return {\n                ...state,\n                loading: true,\n            };\n        case KLINE_DATA:\n            return {\n                ...state,\n                loading: false,\n                data: action.payload,\n            };\n        case KLINE_UPDATE_TIME_RANGE:\n            return {\n                ...state,\n                range: action.payload,\n            };\n        case KLINE_UPDATE_PERIOD:\n            return {\n                ...state,\n                period: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}