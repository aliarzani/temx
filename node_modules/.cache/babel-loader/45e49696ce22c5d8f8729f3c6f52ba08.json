{"ast":null,"code":"import _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/containers/RecentTrades/index.tsx\";\nimport { TabPanel } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { resetHistory as _resetHistory, selectCurrentMarket, selectCurrentPrice, selectUserLoggedIn, setCurrentPrice as _setCurrentPrice } from '../../modules';\nimport { recentTradesFetch, selectRecentTradesOfCurrentMarket } from '../../modules/public/recentTrades';\nimport { MarketTab } from './Market';\nimport { YoursTab } from './Yours';\n\nvar RecentTradesComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RecentTradesComponent, _React$Component);\n\n  function RecentTradesComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RecentTradesComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RecentTradesComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tab: 'market',\n      index: 0,\n      disable: false\n    };\n    _this.tabMapping = ['market', 'yours'];\n\n    _this.renderContent = function () {\n      return _this.props.userLoggedIn ? React.createElement(TabPanel, {\n        panels: _this.renderTabs(),\n        onTabChange: _this.handleMakeRequest,\n        optionalHead: _this.props.intl.formatMessage({\n          id: 'page.body.trade.header.recentTrades'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-table-header__content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-title-component\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, _this.props.intl.formatMessage({\n        id: 'page.body.trade.header.recentTrades'\n      }))), React.createElement(MarketTab, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n    };\n\n    _this.renderTabs = function () {\n      var _this$state = _this.state,\n          tab = _this$state.tab,\n          index = _this$state.index;\n      return [{\n        content: tab === 'market' && index === 0 ? React.createElement(MarketTab, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }) : null,\n        label: _this.props.intl.formatMessage({\n          id: 'page.body.trade.header.market'\n        })\n      }, {\n        content: tab === 'yours' ? React.createElement(YoursTab, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }) : null,\n        label: _this.props.intl.formatMessage({\n          id: 'page.body.trade.header.yours'\n        })\n      }];\n    };\n\n    _this.handleMakeRequest = function (index) {\n      if (_this.state.tab === _this.tabMapping[index]) {\n        return;\n      }\n\n      _this.props.resetHistory();\n\n      _this.setState({\n        tab: _this.tabMapping[index]\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(RecentTradesComponent, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.resetHistory();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var className = classnames({\n        'cr-table__noData': !this.props.recentTrades.length\n      });\n      var cn = classnames('pg-recent-trades', {\n        'pg-recent-trades-unlogged': !this.props.userLoggedIn\n      });\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: cn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.renderContent()));\n    }\n  }]);\n\n  return RecentTradesComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    recentTrades: selectRecentTradesOfCurrentMarket(state),\n    currentMarket: selectCurrentMarket(state),\n    currentPrice: selectCurrentPrice(state),\n    userLoggedIn: selectUserLoggedIn(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    tradesFetch: function tradesFetch(market) {\n      return dispatch(recentTradesFetch(market));\n    },\n    setCurrentPrice: function setCurrentPrice(payload) {\n      return dispatch(_setCurrentPrice(payload));\n    },\n    resetHistory: function resetHistory() {\n      return dispatch(_resetHistory());\n    }\n  };\n};\n\nexport var RecentTrades = injectIntl(connect(mapStateToProps, mapDispatchToProps)(RecentTradesComponent));","map":{"version":3,"sources":["/workspaces/temx/src/containers/RecentTrades/index.tsx"],"names":["TabPanel","classnames","React","injectIntl","connect","resetHistory","selectCurrentMarket","selectCurrentPrice","selectUserLoggedIn","setCurrentPrice","recentTradesFetch","selectRecentTradesOfCurrentMarket","MarketTab","YoursTab","RecentTradesComponent","state","tab","index","disable","tabMapping","renderContent","props","userLoggedIn","renderTabs","handleMakeRequest","intl","formatMessage","id","content","label","setState","className","recentTrades","length","cn","Component","mapStateToProps","currentMarket","currentPrice","mapDispatchToProps","dispatch","tradesFetch","market","payload","RecentTrades"],"mappings":"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","sourcesContent":["import {TabPanel } from '@openware/components';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport {\n    InjectedIntlProps,\n    injectIntl,\n} from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport {\n    Market,\n    PublicTrade,\n    resetHistory,\n    RootState,\n    selectCurrentMarket,\n    selectCurrentPrice,\n    selectUserLoggedIn,\n    setCurrentPrice,\n} from '../../modules';\nimport { recentTradesFetch, selectRecentTradesOfCurrentMarket } from '../../modules/public/recentTrades';\nimport { MarketTab } from './Market';\nimport { YoursTab } from './Yours';\n\ninterface ReduxProps {\n    recentTrades: PublicTrade[];\n    currentMarket: Market | undefined;\n    currentPrice: number | undefined;\n    userLoggedIn: boolean;\n}\n\ninterface DispatchProps {\n    resetHistory: typeof resetHistory;\n    tradesFetch: typeof recentTradesFetch;\n    setCurrentPrice: typeof setCurrentPrice;\n}\n\ninterface State {\n    tab: string;\n    index: number;\n    disable: boolean;\n}\n\nexport type RecentTradesProps = DispatchProps & ReduxProps & InjectedIntlProps;\n\nclass RecentTradesComponent extends React.Component<RecentTradesProps, State> {\n    public state = { tab: 'market', index: 0, disable: false };\n\n    public tabMapping = ['market', 'yours'];\n\n    public componentWillUnmount() {\n        this.props.resetHistory();\n    }\n\n    public render() {\n        const className = classnames({\n            'cr-table__noData' : !this.props.recentTrades.length,\n        });\n\n        const cn = classnames('pg-recent-trades', {\n            'pg-recent-trades-unlogged' : !this.props.userLoggedIn,\n        });\n\n        return (\n          <div className={className}>\n            <div className={cn}>\n                {this.renderContent()}\n            </div>\n          </div>\n        );\n    }\n\n    private renderContent = () => {\n        return this.props.userLoggedIn ?\n        (\n            <TabPanel\n                panels={this.renderTabs()}\n                onTabChange={this.handleMakeRequest}\n                optionalHead={this.props.intl.formatMessage({ id: 'page.body.trade.header.recentTrades' })}\n            />\n        ) :\n        (\n            <div>\n                <div className=\"cr-table-header__content\">\n                    <div className=\"cr-title-component\">{this.props.intl.formatMessage({id: 'page.body.trade.header.recentTrades'})}</div>\n                </div>\n                <MarketTab />\n            </div>\n        );\n\n    }\n\n    private renderTabs = () => {\n        const { tab, index } = this.state;\n        return [\n            {\n                content: tab === 'market' && index === 0 ? <MarketTab /> : null,\n                label: this.props.intl.formatMessage({ id: 'page.body.trade.header.market' }),\n            },\n            {\n                content: tab === 'yours' ? <YoursTab /> : null,\n                label: this.props.intl.formatMessage({ id: 'page.body.trade.header.yours' }),\n            },\n        ];\n    };\n\n    private handleMakeRequest = (index: number) => {\n        if (this.state.tab === this.tabMapping[index]) {\n            return;\n        }\n\n        this.props.resetHistory();\n        this.setState({ tab: this.tabMapping[index] });\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    recentTrades: selectRecentTradesOfCurrentMarket(state),\n    currentMarket: selectCurrentMarket(state),\n    currentPrice: selectCurrentPrice(state),\n    userLoggedIn: selectUserLoggedIn(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    tradesFetch: market => dispatch(recentTradesFetch(market)),\n    setCurrentPrice: payload => dispatch(setCurrentPrice(payload)),\n    resetHistory: () => dispatch(resetHistory()),\n});\n\n\nexport const RecentTrades = injectIntl(connect(mapStateToProps, mapDispatchToProps)(RecentTradesComponent));\n"]},"metadata":{},"sourceType":"module"}