{"ast":null,"code":"import _defineProperty from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { STORAGE_DEFAULT_LIMIT } from '../constants';\nexport var defaultConfig = {\n  api: {\n    authUrl: '',\n    tradeUrl: '',\n    applogicUrl: '',\n    rangerUrl: '',\n    arkeUrl: ''\n  },\n  minutesUntilAutoLogout: '5',\n  rangerReconnectPeriod: '1',\n  withCredentials: true,\n  captcha: {\n    captchaType: 'none',\n    siteKey: ''\n  },\n  storage: {},\n  gaTrackerKey: '',\n  msAlertDisplayTime: '5000',\n  incrementalOrderBook: false\n};\nexport var Cryptobase = {\n  config: defaultConfig\n};\nwindow.env = window.env || defaultConfig;\nCryptobase.config = _objectSpread({}, window.env);\nCryptobase.config.storage = Cryptobase.config.storage || {};\nCryptobase.config.captcha = Cryptobase.config.captcha || defaultConfig.captcha;\nexport var tradeUrl = function tradeUrl() {\n  return Cryptobase.config.api.tradeUrl;\n};\nexport var arkeUrl = function arkeUrl() {\n  return Cryptobase.config.api.arkeUrl || tradeUrl();\n};\nexport var authUrl = function authUrl() {\n  return Cryptobase.config.api.authUrl;\n};\nexport var applogicUrl = function applogicUrl() {\n  return Cryptobase.config.api.applogicUrl;\n};\nexport var rangerUrl = function rangerUrl() {\n  return Cryptobase.config.api.rangerUrl;\n};\nexport var minutesUntilAutoLogout = function minutesUntilAutoLogout() {\n  return Cryptobase.config.minutesUntilAutoLogout || '5';\n};\nexport var withCredentials = function withCredentials() {\n  return Cryptobase.config.withCredentials;\n};\nexport var defaultStorageLimit = function defaultStorageLimit() {\n  return Cryptobase.config.storage.defaultStorageLimit || STORAGE_DEFAULT_LIMIT;\n};\nexport var siteKey = function siteKey() {\n  return Cryptobase.config.captcha.siteKey;\n};\nexport var captchaType = function captchaType() {\n  return Cryptobase.config.captcha.captchaType;\n};\nexport var gaTrackerKey = function gaTrackerKey() {\n  return Cryptobase.config.gaTrackerKey || '';\n};\nexport var msAlertDisplayTime = function msAlertDisplayTime() {\n  return Cryptobase.config.msAlertDisplayTime || '5000';\n};\nexport var rangerReconnectPeriod = function rangerReconnectPeriod() {\n  return Cryptobase.config.rangerReconnectPeriod ? Number(Cryptobase.config.rangerReconnectPeriod) : 1;\n};\nexport var incrementalOrderBook = function incrementalOrderBook() {\n  return Cryptobase.config.incrementalOrderBook || false;\n};","map":{"version":3,"sources":["/workspaces/temx/src/api/config.ts"],"names":["STORAGE_DEFAULT_LIMIT","defaultConfig","api","authUrl","tradeUrl","applogicUrl","rangerUrl","arkeUrl","minutesUntilAutoLogout","rangerReconnectPeriod","withCredentials","captcha","captchaType","siteKey","storage","gaTrackerKey","msAlertDisplayTime","incrementalOrderBook","Cryptobase","config","window","env","defaultStorageLimit","Number"],"mappings":"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","sourcesContent":["import { STORAGE_DEFAULT_LIMIT } from '../constants';\nimport { Config } from './types';\n\nexport const defaultConfig: Config = {\n    api: {\n        authUrl: '',\n        tradeUrl: '',\n        applogicUrl: '',\n        rangerUrl: '',\n        arkeUrl: '',\n    },\n    minutesUntilAutoLogout: '5',\n    rangerReconnectPeriod: '1',\n    withCredentials: true,\n    captcha: {\n        captchaType: 'none',\n        siteKey: '',\n    },\n    storage: {},\n    gaTrackerKey: '',\n    msAlertDisplayTime: '5000',\n    incrementalOrderBook: false,\n};\n\nexport const Cryptobase = {\n    config: defaultConfig,\n};\n\ndeclare global {\n    interface Window {\n        env: Config;\n    }\n}\n\nwindow.env = window.env || defaultConfig;\nCryptobase.config = { ...window.env };\nCryptobase.config.storage = Cryptobase.config.storage || {};\nCryptobase.config.captcha = Cryptobase.config.captcha || defaultConfig.captcha;\n\nexport const tradeUrl = () => Cryptobase.config.api.tradeUrl;\nexport const arkeUrl = () => Cryptobase.config.api.arkeUrl || tradeUrl();\nexport const authUrl = () => Cryptobase.config.api.authUrl;\nexport const applogicUrl = () => Cryptobase.config.api.applogicUrl;\nexport const rangerUrl = () => Cryptobase.config.api.rangerUrl;\nexport const minutesUntilAutoLogout = (): string => Cryptobase.config.minutesUntilAutoLogout || '5';\nexport const withCredentials = () => Cryptobase.config.withCredentials;\nexport const defaultStorageLimit = () => Cryptobase.config.storage.defaultStorageLimit || STORAGE_DEFAULT_LIMIT;\nexport const siteKey = () => Cryptobase.config.captcha.siteKey;\nexport const captchaType = () => Cryptobase.config.captcha.captchaType;\nexport const gaTrackerKey = (): string => Cryptobase.config.gaTrackerKey || '';\nexport const msAlertDisplayTime = (): string => Cryptobase.config.msAlertDisplayTime || '5000';\nexport const rangerReconnectPeriod = (): number => Cryptobase.config.rangerReconnectPeriod ? Number(Cryptobase.config.rangerReconnectPeriod) : 1;\nexport const incrementalOrderBook = (): boolean => Cryptobase.config.incrementalOrderBook || false;\n"]},"metadata":{},"sourceType":"module"}