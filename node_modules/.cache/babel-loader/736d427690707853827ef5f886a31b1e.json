{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(newHistorySaga);\n\n// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { failNewHistory, successNewHistory } from '../actions';\nvar config = {\n  apiVersion: 'peatio',\n  withHeaders: true\n};\nexport function newHistorySaga(action) {\n  var params, _ref, data;\n\n  return _regeneratorRuntime.wrap(function newHistorySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          params = Object.entries(action.payload).filter(function (w) {\n            return w[1];\n          }).map(function (k) {\n            return \"\".concat(k[0], \"=\").concat(encodeURIComponent(k[1]));\n          }).join('&');\n          _context.next = 4;\n          return call(API.get(config), \"/account/history?\".concat(params));\n\n        case 4:\n          _ref = _context.sent;\n          data = _ref.data;\n          _context.next = 8;\n          return put(successNewHistory({\n            list: data\n          }));\n\n        case 8:\n          _context.next = 16;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put(failNewHistory({\n            message: _context.t0.message,\n            code: _context.t0.code\n          }));\n\n        case 14:\n          _context.next = 16;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/user/newHistory/sagas/historySaga.ts"],"names":["newHistorySaga","call","put","API","alertPush","failNewHistory","successNewHistory","config","apiVersion","withHeaders","action","params","Object","entries","payload","filter","w","map","k","encodeURIComponent","join","get","data","list","message","code","type"],"mappings":";;;;yBAUiBA,c;;AAVjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,cAAT,EAA0CC,iBAA1C,QAAmE,YAAnE;AAEA,IAAMC,MAAsB,GAAG;AAC3BC,EAAAA,UAAU,EAAE,QADe;AAE3BC,EAAAA,WAAW,EAAE;AAFc,CAA/B;AAIA,OAAO,SAAUT,cAAV,CAAyBU,MAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOC,UAAAA,MAFP,GAEgBC,MAAM,CAACC,OAAP,CAAeH,MAAM,CAACI,OAAtB,EAA+BC,MAA/B,CAAsC,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAAC,CAAD,CAAL;AAAA,WAAvC,EAAiDC,GAAjD,CAAqD,UAAAC,CAAC;AAAA,6BAAOA,CAAC,CAAC,CAAD,CAAR,cAAeC,kBAAkB,CAACD,CAAC,CAAC,CAAD,CAAF,CAAjC;AAAA,WAAtD,EAAiGE,IAAjG,CAAsG,GAAtG,CAFhB;AAAA;AAGkB,iBAAMnB,IAAI,CAACE,GAAG,CAACkB,GAAJ,CAAQd,MAAR,CAAD,6BAAsCI,MAAtC,EAAV;;AAHlB;AAAA;AAGSW,UAAAA,IAHT,QAGSA,IAHT;AAAA;AAKC,iBAAMpB,GAAG,CAACI,iBAAiB,CAAC;AAAEiB,YAAAA,IAAI,EAAED;AAAR,WAAD,CAAlB,CAAT;;AALD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOC,iBAAMpB,GAAG,CAACG,cAAc,CAAC;AAACmB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,YAAMA;AAArC,WAAD,CAAf,CAAT;;AAPD;AAAA;AAQC,iBAAMvB,GAAG,CAACE,SAAS,CAAC;AAACoB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CC,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { failNewHistory, NewHistoryFetch, successNewHistory } from '../actions';\n\nconst config: RequestOptions = {\n    apiVersion: 'peatio',\n    withHeaders: true,\n};\nexport function* newHistorySaga(action: NewHistoryFetch) {\n    try {\n        const params = Object.entries(action.payload).filter(w => w[1]).map(k => `${k[0]}=${encodeURIComponent(k[1])}`).join('&');\n        const { data } = yield call(API.get(config), `/account/history?${params}`);\n\n        yield put(successNewHistory({ list: data }));\n    } catch (error) {\n        yield put(failNewHistory({message: error.message, code: error.code}));\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}