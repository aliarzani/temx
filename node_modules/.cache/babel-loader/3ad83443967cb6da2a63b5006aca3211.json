{"ast":null,"code":"import _defineProperty from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { OPEN_ORDERS_APPEND, OPEN_ORDERS_CANCEL_DATA, OPEN_ORDERS_CANCEL_ERROR, OPEN_ORDERS_CANCEL_FETCH, OPEN_ORDERS_DATA, OPEN_ORDERS_ERROR, OPEN_ORDERS_FETCH, OPEN_ORDERS_RESET, OPEN_ORDERS_UPDATE } from './constants';\nimport { convertOrderAPI, convertOrderEvent, insertIfNotExisted, insertOrUpdate } from './helpers';\nexport var initialOpenOrdersState = {\n  fetching: false,\n  list: [],\n  cancelFetching: false,\n  cancelError: false\n};\nexport var openOrdersReducer = function openOrdersReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialOpenOrdersState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case OPEN_ORDERS_FETCH:\n      return _objectSpread({}, state, {\n        fetching: true\n      });\n\n    case OPEN_ORDERS_DATA:\n      return _objectSpread({}, state, {\n        fetching: false,\n        list: action.payload.map(convertOrderAPI)\n      });\n\n    case OPEN_ORDERS_UPDATE:\n      return _objectSpread({}, state, {\n        list: insertOrUpdate(state.list, convertOrderEvent(action.payload))\n      });\n\n    case OPEN_ORDERS_ERROR:\n      return _objectSpread({}, state, {\n        fetching: false,\n        list: []\n      });\n\n    case OPEN_ORDERS_APPEND:\n      return _objectSpread({}, state, {\n        list: insertIfNotExisted(state.list, convertOrderAPI(action.payload))\n      });\n\n    case OPEN_ORDERS_RESET:\n      return initialOpenOrdersState;\n\n    case OPEN_ORDERS_CANCEL_FETCH:\n      return _objectSpread({}, state, {\n        cancelFetching: true,\n        cancelError: false\n      });\n\n    case OPEN_ORDERS_CANCEL_DATA:\n      return _objectSpread({}, state, {\n        cancelFetching: false,\n        list: action.payload\n      });\n\n    case OPEN_ORDERS_CANCEL_ERROR:\n      return _objectSpread({}, state, {\n        cancelFetching: false,\n        cancelError: true\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/workspaces/temx/src/modules/user/openOrders/reducer.ts"],"names":["OPEN_ORDERS_APPEND","OPEN_ORDERS_CANCEL_DATA","OPEN_ORDERS_CANCEL_ERROR","OPEN_ORDERS_CANCEL_FETCH","OPEN_ORDERS_DATA","OPEN_ORDERS_ERROR","OPEN_ORDERS_FETCH","OPEN_ORDERS_RESET","OPEN_ORDERS_UPDATE","convertOrderAPI","convertOrderEvent","insertIfNotExisted","insertOrUpdate","initialOpenOrdersState","fetching","list","cancelFetching","cancelError","openOrdersReducer","state","action","type","payload","map"],"mappings":";;;;;;AAEA,SACIA,kBADJ,EAEIC,uBAFJ,EAGIC,wBAHJ,EAIIC,wBAJJ,EAKIC,gBALJ,EAMIC,iBANJ,EAOIC,iBAPJ,EAQIC,iBARJ,EASIC,kBATJ,QAUO,aAVP;AAWA,SAASC,eAAT,EAA0BC,iBAA1B,EAA6CC,kBAA7C,EAAiEC,cAAjE,QAAuF,WAAvF;AASA,OAAO,IAAMC,sBAAuC,GAAG;AACnDC,EAAAA,QAAQ,EAAE,KADyC;AAEnDC,EAAAA,IAAI,EAAE,EAF6C;AAGnDC,EAAAA,cAAc,EAAE,KAHmC;AAInDC,EAAAA,WAAW,EAAE;AAJsC,CAAhD;AAOP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAGX;AAAA,MAFlBC,KAEkB,uEAFON,sBAEP;AAAA,MADlBO,MACkB;;AAClB,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKf,iBAAL;AACI,+BAAYa,KAAZ;AAAmBL,QAAAA,QAAQ,EAAE;AAA7B;;AACJ,SAAKV,gBAAL;AACI,+BAAYe,KAAZ;AAAmBL,QAAAA,QAAQ,EAAE,KAA7B;AAAoCC,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAmBd,eAAnB;AAA1C;;AACJ,SAAKD,kBAAL;AACI,+BAAYW,KAAZ;AAAmBJ,QAAAA,IAAI,EAAEH,cAAc,CAACO,KAAK,CAACJ,IAAP,EAAaL,iBAAiB,CAACU,MAAM,CAACE,OAAR,CAA9B;AAAvC;;AACJ,SAAKjB,iBAAL;AACI,+BAAYc,KAAZ;AAAmBL,QAAAA,QAAQ,EAAE,KAA7B;AAAoCC,QAAAA,IAAI,EAAE;AAA1C;;AACJ,SAAKf,kBAAL;AACI,+BAAYmB,KAAZ;AAAmBJ,QAAAA,IAAI,EAAEJ,kBAAkB,CAACQ,KAAK,CAACJ,IAAP,EAAaN,eAAe,CAACW,MAAM,CAACE,OAAR,CAA5B;AAA3C;;AACJ,SAAKf,iBAAL;AACI,aAAOM,sBAAP;;AACJ,SAAKV,wBAAL;AACI,+BAAYgB,KAAZ;AAAmBH,QAAAA,cAAc,EAAE,IAAnC;AAAyCC,QAAAA,WAAW,EAAE;AAAtD;;AACJ,SAAKhB,uBAAL;AACI,+BAAYkB,KAAZ;AAAmBH,QAAAA,cAAc,EAAE,KAAnC;AAA0CD,QAAAA,IAAI,EAAEK,MAAM,CAACE;AAAvD;;AACJ,SAAKpB,wBAAL;AACI,+BAAYiB,KAAZ;AAAmBH,QAAAA,cAAc,EAAE,KAAnC;AAA0CC,QAAAA,WAAW,EAAE;AAAvD;;AACJ;AACI,aAAOE,KAAP;AApBR;AAsBH,CA1BM","sourcesContent":["import { OrderCommon } from '../../types';\nimport { OpenOrdersAction } from './actions';\nimport {\n    OPEN_ORDERS_APPEND,\n    OPEN_ORDERS_CANCEL_DATA,\n    OPEN_ORDERS_CANCEL_ERROR,\n    OPEN_ORDERS_CANCEL_FETCH,\n    OPEN_ORDERS_DATA,\n    OPEN_ORDERS_ERROR,\n    OPEN_ORDERS_FETCH,\n    OPEN_ORDERS_RESET,\n    OPEN_ORDERS_UPDATE,\n} from './constants';\nimport { convertOrderAPI, convertOrderEvent, insertIfNotExisted, insertOrUpdate } from './helpers';\n\nexport interface OpenOrdersState {\n    fetching: boolean;\n    list: OrderCommon[];\n    cancelFetching: boolean;\n    cancelError: boolean;\n}\n\nexport const initialOpenOrdersState: OpenOrdersState = {\n    fetching: false,\n    list: [],\n    cancelFetching: false,\n    cancelError: false,\n};\n\nexport const openOrdersReducer = (\n    state: OpenOrdersState = initialOpenOrdersState,\n    action: OpenOrdersAction,\n): OpenOrdersState => {\n    switch (action.type) {\n        case OPEN_ORDERS_FETCH:\n            return { ...state, fetching: true };\n        case OPEN_ORDERS_DATA:\n            return { ...state, fetching: false, list: action.payload.map(convertOrderAPI) };\n        case OPEN_ORDERS_UPDATE:\n            return { ...state, list: insertOrUpdate(state.list, convertOrderEvent(action.payload)) };\n        case OPEN_ORDERS_ERROR:\n            return { ...state, fetching: false, list: [] };\n        case OPEN_ORDERS_APPEND:\n            return { ...state, list: insertIfNotExisted(state.list, convertOrderAPI(action.payload)) };\n        case OPEN_ORDERS_RESET:\n            return initialOpenOrdersState;\n        case OPEN_ORDERS_CANCEL_FETCH:\n            return { ...state, cancelFetching: true, cancelError: false };\n        case OPEN_ORDERS_CANCEL_DATA:\n            return { ...state, cancelFetching: false, list: action.payload };\n        case OPEN_ORDERS_CANCEL_ERROR:\n            return { ...state, cancelFetching: false, cancelError: true };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}