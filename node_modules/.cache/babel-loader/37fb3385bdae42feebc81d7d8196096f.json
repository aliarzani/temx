{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/ProfileVerification/index.tsx\";\nimport cn from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { labelFetch as _labelFetch, selectLabelData, selectUserInfo } from '../../modules';\n\nvar ProfileVerificationComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProfileVerificationComponent, _React$Component);\n\n  function ProfileVerificationComponent() {\n    _classCallCheck(this, ProfileVerificationComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProfileVerificationComponent).apply(this, arguments));\n  }\n\n  _createClass(ProfileVerificationComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.labelFetch();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var user = this.props.user;\n      var userLevel = user.level;\n      return React.createElement(\"div\", {\n        className: \"pg-profile-page__box pg-profile-page__left-col__verification\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__box-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-profile-page__verification-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.profile.header.account.profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })))), this.renderFirstLevel(userLevel), this.renderSecondLevel(userLevel), this.renderThirdLevel(userLevel));\n    }\n  }, {\n    key: \"renderFirstLevel\",\n    value: function renderFirstLevel(userLevel) {\n      var targetLevel = 1;\n\n      var _this$getLevelsClassN = this.getLevelsClassNames(userLevel, targetLevel),\n          titleClassName = _this$getLevelsClassN.titleClassName;\n\n      return React.createElement(\"div\", {\n        className: \"pg-profile-page__row pg-profile-page__level-verification\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: titleClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.renderVerificationLevel('page.body.profile.header.account.profile.email', userLevel, targetLevel), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.profile.header.account.profile.email.message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"renderSecondLevel\",\n    value: function renderSecondLevel(userLevel) {\n      var targetLevel = 2;\n\n      var _this$getLevelsClassN2 = this.getLevelsClassNames(userLevel, targetLevel),\n          titleClassName = _this$getLevelsClassN2.titleClassName;\n\n      return React.createElement(\"div\", {\n        className: \"pg-profile-page__row pg-profile-page__level-verification\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: titleClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.renderVerificationLevel('page.body.profile.header.account.profile.phone', userLevel, targetLevel), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.profile.header.account.profile.phone.message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"renderThirdLevel\",\n    value: function renderThirdLevel(userLevel) {\n      var targetLevel = 3;\n      var documentLabel = this.props.label.find(function (label) {\n        return label.key === 'document';\n      });\n      var isPending = documentLabel && documentLabel.value === 'pending' ? this.renderPendingIcon() : '';\n\n      var _this$getLevelsClassN3 = this.getLevelsClassNames(userLevel, targetLevel),\n          titleClassName = _this$getLevelsClassN3.titleClassName;\n\n      return React.createElement(\"div\", {\n        className: \"pg-profile-page__row pg-profile-page__level-verification\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: titleClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.renderIdentityVerification('page.body.profile.header.account.profile.identity', userLevel, targetLevel, documentLabel), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.profile.header.account.profile.identity.message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }))), isPending);\n    }\n  }, {\n    key: \"renderPendingIcon\",\n    value: function renderPendingIcon() {\n      return React.createElement(\"div\", {\n        className: \"pg-profile-page__level-verification__pending\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.wallets.table.pending\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(\"img\", {\n        alt: \"pending\",\n        src: require('../../assets/images/pending.svg'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderVerificationLevel\",\n    value: function renderVerificationLevel(text, userLevel, targetLevel) {\n      if (userLevel === targetLevel - 1) {\n        return React.createElement(\"a\", {\n          href: \"/confirm\",\n          className: \"pg-profile-page__level-verification__url\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"\".concat(text, \".unverified.title\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }));\n      } else {\n        if (userLevel < targetLevel) {\n          return React.createElement(\"p\", {\n            className: \"pg-profile-page__level-verification__name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"\".concat(text, \".unverified.title\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"p\", {\n            className: \"pg-profile-page__level-verification__name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }, React.createElement(FormattedMessage, {\n            id: \"\".concat(text, \".title\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"renderIdentityVerification\",\n    value: function renderIdentityVerification(text, userLevel, targetLevel, documentLabel) {\n      var isLabelExist = this.props.label;\n\n      if (isLabelExist.length > 0) {\n        switch (userLevel) {\n          case targetLevel - 1:\n            {\n              if (documentLabel) {\n                return React.createElement(\"p\", {\n                  className: \"pg-profile-page__level-verification__name\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 136\n                  },\n                  __self: this\n                }, React.createElement(FormattedMessage, {\n                  id: \"\".concat(text, \".unverified.title\"),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 137\n                  },\n                  __self: this\n                }));\n              } else {\n                return React.createElement(\"a\", {\n                  href: \"/confirm\",\n                  className: \"pg-profile-page__level-verification__url\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 142\n                  },\n                  __self: this\n                }, React.createElement(FormattedMessage, {\n                  id: \"\".concat(text, \".unverified.title\"),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 143\n                  },\n                  __self: this\n                }));\n              }\n            }\n\n          case targetLevel:\n            return React.createElement(\"p\", {\n              className: \"pg-profile-page__level-verification__name\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 149\n              },\n              __self: this\n            }, React.createElement(FormattedMessage, {\n              id: \"\".concat(text, \".title\"),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 150\n              },\n              __self: this\n            }));\n\n          default:\n            return React.createElement(\"p\", {\n              className: \"pg-profile-page__level-verification__name\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 154\n              },\n              __self: this\n            }, React.createElement(FormattedMessage, {\n              id: \"\".concat(text, \".unverified.title\"),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 155\n              },\n              __self: this\n            }));\n        }\n      } else {\n        return React.createElement(\"p\", {\n          className: \"pg-profile-page__level-verification__name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(FormattedMessage, {\n          id: \"\".concat(text, \".unverified.title\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"getLevelsClassNames\",\n    value: function getLevelsClassNames(currentLevel, targetLevel) {\n      var levelSatisfied = currentLevel >= targetLevel;\n      var levelClassName = cn({\n        'pg-profile-page__text-purple': levelSatisfied\n      });\n      var titleClassName = cn('pg-profile-page__ml-gap', {\n        'pg-profile-page__text-success': levelSatisfied\n      });\n      return {\n        levelClassName: levelClassName,\n        titleClassName: titleClassName\n      };\n    }\n  }]);\n\n  return ProfileVerificationComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: selectUserInfo(state),\n    label: selectLabelData(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    labelFetch: function labelFetch() {\n      return dispatch(_labelFetch());\n    }\n  };\n};\n\nvar ProfileVerification = connect(mapStateToProps, mapDispatchProps)(ProfileVerificationComponent);\nexport { ProfileVerification };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/ProfileVerification/index.tsx"],"names":["cn","React","FormattedMessage","connect","labelFetch","selectLabelData","selectUserInfo","ProfileVerificationComponent","props","user","userLevel","level","renderFirstLevel","renderSecondLevel","renderThirdLevel","targetLevel","getLevelsClassNames","titleClassName","renderVerificationLevel","documentLabel","label","find","key","isPending","value","renderPendingIcon","renderIdentityVerification","require","text","isLabelExist","length","currentLevel","levelSatisfied","levelClassName","Component","mapStateToProps","state","mapDispatchProps","dispatch","ProfileVerification"],"mappings":"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","sourcesContent":["import cn from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { Label, labelFetch, selectLabelData, selectUserInfo, User } from '../../modules';\n\ninterface ReduxProps {\n    label: Label[];\n}\n\ninterface DispatchProps {\n    labelFetch: typeof labelFetch;\n}\n\ninterface ProfileVerificationProps {\n    user: User;\n}\n\ntype Props =  DispatchProps & ProfileVerificationProps & ReduxProps;\n\nclass ProfileVerificationComponent extends React.Component<Props> {\n    public componentDidMount() {\n        this.props.labelFetch();\n    }\n\n    public render() {\n        const { user } = this.props;\n        const userLevel = user.level;\n        return (\n            <div className=\"pg-profile-page__box pg-profile-page__left-col__verification\">\n                <div className=\"pg-profile-page__box-header\">\n                    <div className=\"pg-profile-page__row\">\n                        <div className=\"pg-profile-page__verification-header\">\n                            <FormattedMessage id=\"page.body.profile.header.account.profile\" />\n                        </div>\n                    </div>\n                </div>\n                {this.renderFirstLevel(userLevel)}\n                {this.renderSecondLevel(userLevel)}\n                {this.renderThirdLevel(userLevel)}\n            </div>\n        );\n    }\n\n    private renderFirstLevel(userLevel: number) {\n        const targetLevel = 1;\n        const {\n            titleClassName,\n        } = this.getLevelsClassNames(userLevel, targetLevel);\n        return (\n            <div className=\"pg-profile-page__row pg-profile-page__level-verification\">\n                <div className={titleClassName}>\n                    {this.renderVerificationLevel('page.body.profile.header.account.profile.email', userLevel, targetLevel)}\n                    <p><FormattedMessage id=\"page.body.profile.header.account.profile.email.message\" /></p>\n                </div>\n            </div>\n        );\n    }\n\n    private renderSecondLevel(userLevel: number) {\n        const targetLevel = 2;\n        const {\n            titleClassName,\n        } = this.getLevelsClassNames(userLevel, targetLevel);\n        return (\n            <div className=\"pg-profile-page__row pg-profile-page__level-verification\">\n                <div className={titleClassName}>\n                    {this.renderVerificationLevel('page.body.profile.header.account.profile.phone', userLevel, targetLevel)}\n                    <p><FormattedMessage id=\"page.body.profile.header.account.profile.phone.message\" /></p>\n                </div>\n            </div>\n        );\n    }\n\n    private renderThirdLevel(userLevel: number) {\n        const targetLevel = 3;\n        const documentLabel = this.props.label.find((label: Label) => label.key === 'document');\n        const isPending = documentLabel && documentLabel.value === 'pending' ? this.renderPendingIcon() : '';\n\n        const {\n            titleClassName,\n        } = this.getLevelsClassNames(userLevel, targetLevel);\n\n        return (\n            <div className=\"pg-profile-page__row pg-profile-page__level-verification\">\n                <div className={titleClassName}>\n                    {this.renderIdentityVerification('page.body.profile.header.account.profile.identity', userLevel, targetLevel, documentLabel)}\n                    <p><FormattedMessage id=\"page.body.profile.header.account.profile.identity.message\" /></p>\n                </div>\n                {isPending}\n            </div>\n        );\n    }\n\n    private renderPendingIcon() {\n        return (\n            <div className=\"pg-profile-page__level-verification__pending\">\n                <p><FormattedMessage id=\"page.body.wallets.table.pending\" /></p>\n                <img alt=\"pending\" src={require('../../assets/images/pending.svg')} />\n            </div>\n        );\n    }\n\n    private renderVerificationLevel(text: string, userLevel, targetLevel) {\n        if (userLevel === (targetLevel - 1)) {\n            return (\n                <a href=\"/confirm\" className=\"pg-profile-page__level-verification__url\">\n                    <FormattedMessage id={`${text}.unverified.title`}/>\n                </a>\n            );\n        } else {\n            if (userLevel < targetLevel) {\n                return (\n                    <p className=\"pg-profile-page__level-verification__name\">\n                        <FormattedMessage id={`${text}.unverified.title`}/>\n                    </p>\n                );\n            } else {\n                return (\n                    <p className=\"pg-profile-page__level-verification__name\">\n                        <FormattedMessage id={`${text}.title`}/>\n                    </p>\n                );\n            }\n        }\n    }\n\n    private renderIdentityVerification(text: string, userLevel, targetLevel, documentLabel) {\n      const isLabelExist = this.props.label;\n\n      if (isLabelExist.length > 0) {\n        switch (userLevel) {\n          case targetLevel - 1: {\n            if (documentLabel) {\n              return (\n                <p className=\"pg-profile-page__level-verification__name\">\n                  <FormattedMessage id={`${text}.unverified.title`}/>\n                </p>\n              );\n            } else {\n              return (\n                <a href=\"/confirm\" className=\"pg-profile-page__level-verification__url\">\n                  <FormattedMessage id={`${text}.unverified.title`}/>\n                </a>\n              );\n            }\n          }\n          case targetLevel: return (\n            <p className=\"pg-profile-page__level-verification__name\">\n              <FormattedMessage id={`${text}.title`}/>\n            </p>\n          );\n          default: return(\n            <p className=\"pg-profile-page__level-verification__name\">\n              <FormattedMessage id={`${text}.unverified.title`}/>\n            </p>\n          );\n        }\n      } else {\n        return (\n          <p className=\"pg-profile-page__level-verification__name\">\n            <FormattedMessage id={`${text}.unverified.title`}/>\n          </p>\n        );\n      }\n    }\n\n    private getLevelsClassNames(currentLevel: number, targetLevel: number) {\n        const levelSatisfied = currentLevel >= targetLevel;\n\n        const levelClassName = cn({\n            'pg-profile-page__text-purple': levelSatisfied,\n        });\n        const titleClassName = cn('pg-profile-page__ml-gap', {\n            'pg-profile-page__text-success': levelSatisfied,\n        });\n\n        return { levelClassName, titleClassName };\n    }\n}\n\nconst mapStateToProps = state => ({\n    user: selectUserInfo(state),\n    label: selectLabelData(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        labelFetch: () => dispatch(labelFetch()),\n    });\n\nconst ProfileVerification = connect(mapStateToProps, mapDispatchProps)(ProfileVerificationComponent);\n\nexport {\n    ProfileVerification,\n};\n"]},"metadata":{},"sourceType":"module"}