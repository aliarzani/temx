{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootCurrenciesSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(currenciesFetchSaga);\n\n// tslint:disable-next-line\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../alert';\nimport { currenciesData, currenciesError } from '../actions';\nimport { CURRENCIES_FETCH } from '../constants';\nvar currenciesOptions = {\n  apiVersion: 'peatio'\n};\nexport function rootCurrenciesSaga() {\n  return _regeneratorRuntime.wrap(function rootCurrenciesSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(CURRENCIES_FETCH, currenciesFetchSaga);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function currenciesFetchSaga() {\n  var currencies;\n  return _regeneratorRuntime.wrap(function currenciesFetchSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(API.get(currenciesOptions), '/public/currencies');\n\n        case 3:\n          currencies = _context2.sent;\n          _context2.next = 6;\n          return put(currenciesData(currencies));\n\n        case 6:\n          _context2.next = 14;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put(currenciesError());\n\n        case 12:\n          _context2.next = 14;\n          return put(alertPush({\n            message: _context2.t0.message,\n            code: _context2.t0.code,\n            type: 'error'\n          }));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/public/currencies/sagas/currenciesFetchSaga.ts"],"names":["rootCurrenciesSaga","currenciesFetchSaga","call","put","takeLatest","API","alertPush","currenciesData","currenciesError","CURRENCIES_FETCH","currenciesOptions","apiVersion","get","currencies","message","code","type"],"mappings":";;;;yBAciBA,kB;;;yBAIAC,mB;;AAlBjB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SACIC,cADJ,EAEIC,eAFJ,QAGO,YAHP;AAIA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,IAAMC,iBAAiC,GAAG;AACtCC,EAAAA,UAAU,EAAE;AAD0B,CAA1C;AAIA,OAAO,SAAUX,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,UAAU,CAACK,gBAAD,EAAmBR,mBAAnB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUA,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEoB,iBAAMC,IAAI,CAACG,GAAG,CAACO,GAAJ,CAAQF,iBAAR,CAAD,EAA6B,oBAA7B,CAAV;;AAFpB;AAEOG,UAAAA,UAFP;AAAA;AAGC,iBAAMV,GAAG,CAACI,cAAc,CAACM,UAAD,CAAf,CAAT;;AAHD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKC,iBAAMV,GAAG,CAACK,eAAe,EAAhB,CAAT;;AALD;AAAA;AAMC,iBAAML,GAAG,CAACG,SAAS,CAAC;AAACQ,YAAAA,OAAO,EAAE,aAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,aAAMA,IAArC;AAA2CC,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../alert';\nimport {\n    currenciesData,\n    currenciesError,\n} from '../actions';\nimport { CURRENCIES_FETCH } from '../constants';\n\nconst currenciesOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* rootCurrenciesSaga() {\n    yield takeLatest(CURRENCIES_FETCH, currenciesFetchSaga);\n}\n\nexport function* currenciesFetchSaga() {\n    try {\n        const currencies = yield call(API.get(currenciesOptions), '/public/currencies');\n        yield put(currenciesData(currencies));\n    } catch (error) {\n        yield put(currenciesError());\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}