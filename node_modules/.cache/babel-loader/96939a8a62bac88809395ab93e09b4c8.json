{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(walletsSaga);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { walletsData, walletsError } from '../actions';\nvar walletsOptions = {\n  apiVersion: 'peatio'\n};\nvar currenciesOptions = {\n  apiVersion: 'peatio'\n};\nexport function walletsSaga() {\n  var accounts, currencies, accountsByCurrencies;\n  return _regeneratorRuntime.wrap(function walletsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.get(walletsOptions), '/account/balances');\n\n        case 3:\n          accounts = _context.sent;\n          _context.next = 6;\n          return call(API.get(currenciesOptions), '/public/currencies');\n\n        case 6:\n          currencies = _context.sent;\n          accountsByCurrencies = currencies.map(function (currency) {\n            var walletInfo = accounts.find(function (wallet) {\n              return wallet.currency === currency.id;\n            });\n\n            if (!walletInfo) {\n              walletInfo = {\n                balance: 0,\n                currency: currency.id,\n                locked: 0\n              };\n            }\n\n            return _objectSpread({}, walletInfo, {\n              name: currency.name,\n              explorerTransaction: currency.explorer_transaction,\n              explorerAddress: currency.explorer_address,\n              fee: currency.withdraw_fee,\n              type: currency.type,\n              fixed: currency.precision,\n              iconUrl: currency.icon_url\n            });\n          });\n          _context.next = 10;\n          return put(walletsData(accountsByCurrencies));\n\n        case 10:\n          _context.next = 18;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put(walletsError(_context.t0));\n\n        case 16:\n          _context.next = 18;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/modules/user/wallets/sagas/walletsSaga.ts"],"names":["walletsSaga","call","put","API","alertPush","walletsData","walletsError","walletsOptions","apiVersion","currenciesOptions","get","accounts","currencies","accountsByCurrencies","map","currency","walletInfo","find","wallet","id","balance","locked","name","explorerTransaction","explorer_transaction","explorerAddress","explorer_address","fee","withdraw_fee","type","fixed","precision","iconUrl","icon_url","message","code"],"mappings":";;;;;yBAciBA,W;;;;;;AAdjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,YAA1C;AAEA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,IAAMC,iBAAiC,GAAG;AACtCD,EAAAA,UAAU,EAAE;AAD0B,CAA1C;AAIA,OAAO,SAAUR,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB,iBAAMC,IAAI,CAACE,GAAG,CAACO,GAAJ,CAAQH,cAAR,CAAD,EAA0B,mBAA1B,CAAV;;AAFlB;AAEOI,UAAAA,QAFP;AAAA;AAGoB,iBAAMV,IAAI,CAACE,GAAG,CAACO,GAAJ,CAAQD,iBAAR,CAAD,EAA6B,oBAA7B,CAAV;;AAHpB;AAGOG,UAAAA,UAHP;AAKOC,UAAAA,oBALP,GAK8BD,UAAU,CAACE,GAAX,CAAe,UAAAC,QAAQ,EAAI;AACpD,gBAAIC,UAAU,GAAGL,QAAQ,CAACM,IAAT,CAAc,UAAAC,MAAM;AAAA,qBAAIA,MAAM,CAACH,QAAP,KAAoBA,QAAQ,CAACI,EAAjC;AAAA,aAApB,CAAjB;;AAEA,gBAAI,CAACH,UAAL,EAAiB;AACbA,cAAAA,UAAU,GAAG;AACTI,gBAAAA,OAAO,EAAE,CADA;AAETL,gBAAAA,QAAQ,EAAEA,QAAQ,CAACI,EAFV;AAGTE,gBAAAA,MAAM,EAAE;AAHC,eAAb;AAKH;;AAED,qCACOL,UADP;AAEIM,cAAAA,IAAI,EAAEP,QAAQ,CAACO,IAFnB;AAGIC,cAAAA,mBAAmB,EAAER,QAAQ,CAAES,oBAHnC;AAIIC,cAAAA,eAAe,EAAEV,QAAQ,CAAEW,gBAJ/B;AAKIC,cAAAA,GAAG,EAAEZ,QAAQ,CAAEa,YALnB;AAMIC,cAAAA,IAAI,EAAEd,QAAQ,CAAEc,IANpB;AAOIC,cAAAA,KAAK,EAAEf,QAAQ,CAAEgB,SAPrB;AAQIC,cAAAA,OAAO,EAAEjB,QAAQ,CAACkB;AARtB;AAUH,WArB4B,CAL9B;AAAA;AA4BC,iBAAM/B,GAAG,CAACG,WAAW,CAACQ,oBAAD,CAAZ,CAAT;;AA5BD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA8BC,iBAAMX,GAAG,CAACI,YAAY,aAAb,CAAT;;AA9BD;AAAA;AA+BC,iBAAMJ,GAAG,CAACE,SAAS,CAAC;AAAC8B,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CN,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AA/BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { walletsData, walletsError } from '../actions';\n\nconst walletsOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nconst currenciesOptions: RequestOptions = {\n    apiVersion: 'peatio',\n};\n\nexport function* walletsSaga() {\n    try {\n        const accounts = yield call(API.get(walletsOptions), '/account/balances');\n        const currencies = yield call(API.get(currenciesOptions), '/public/currencies');\n\n        const accountsByCurrencies = currencies.map(currency => {\n            let walletInfo = accounts.find(wallet => wallet.currency === currency.id);\n\n            if (!walletInfo) {\n                walletInfo = {\n                    balance: 0,\n                    currency: currency.id,\n                    locked: 0,\n                };\n            }\n\n            return ({\n                ...walletInfo,\n                name: currency.name,\n                explorerTransaction: currency!.explorer_transaction,\n                explorerAddress: currency!.explorer_address,\n                fee: currency!.withdraw_fee,\n                type: currency!.type,\n                fixed: currency!.precision,\n                iconUrl: currency.icon_url,\n            });\n        });\n\n        yield put(walletsData(accountsByCurrencies));\n    } catch (error) {\n        yield put(walletsError(error));\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}