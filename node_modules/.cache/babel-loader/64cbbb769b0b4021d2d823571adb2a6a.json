{"ast":null,"code":"import _toConsumableArray from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { RANGER_CONNECT_DATA, RANGER_CONNECT_ERROR, RANGER_CONNECT_FETCH, RANGER_DISCONNECT_DATA, RANGER_SUBSCRIPTIONS_DATA } from './constants';\nvar initialRangerState = {\n  withAuth: false,\n  connected: false,\n  subscriptions: []\n};\nexport var rangerReducer = function rangerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialRangerState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RANGER_CONNECT_FETCH:\n      return _objectSpread({}, state, {\n        withAuth: action.payload.withAuth,\n        connected: false\n      });\n\n    case RANGER_SUBSCRIPTIONS_DATA:\n      return _objectSpread({}, state, {\n        subscriptions: _toConsumableArray(action.payload.subscriptions)\n      });\n\n    case RANGER_CONNECT_DATA:\n      return _objectSpread({}, state, {\n        connected: true\n      });\n\n    case RANGER_CONNECT_ERROR:\n    case RANGER_DISCONNECT_DATA:\n      return _objectSpread({}, state, {\n        connected: false\n      });\n\n    default:\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/workspaces/temx/src/modules/public/ranger/reducer.ts"],"names":["RANGER_CONNECT_DATA","RANGER_CONNECT_ERROR","RANGER_CONNECT_FETCH","RANGER_DISCONNECT_DATA","RANGER_SUBSCRIPTIONS_DATA","initialRangerState","withAuth","connected","subscriptions","rangerReducer","state","action","type","payload"],"mappings":";;;;;;;AACA,SACIA,mBADJ,EAEIC,oBAFJ,EAGIC,oBAHJ,EAIIC,sBAJJ,EAKIC,yBALJ,QAMO,aANP;AAcA,IAAMC,kBAA+B,GAAG;AACpCC,EAAAA,QAAQ,EAAE,KAD0B;AAEpCC,EAAAA,SAAS,EAAE,KAFyB;AAGpCC,EAAAA,aAAa,EAAE;AAHqB,CAAxC;AAKA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAmE;AAAA,MAAlEC,KAAkE,uEAA1DL,kBAA0D;AAAA,MAAtCM,MAAsC;;AAC5F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,oBAAL;AACI,+BACOQ,KADP;AAEIJ,QAAAA,QAAQ,EAAEK,MAAM,CAACE,OAAP,CAAeP,QAF7B;AAGIC,QAAAA,SAAS,EAAE;AAHf;;AAKJ,SAAKH,yBAAL;AACI,+BACOM,KADP;AAEIF,QAAAA,aAAa,qBAAMG,MAAM,CAACE,OAAP,CAAeL,aAArB;AAFjB;;AAIJ,SAAKR,mBAAL;AACI,+BACOU,KADP;AAEIH,QAAAA,SAAS,EAAE;AAFf;;AAKJ,SAAKN,oBAAL;AACA,SAAKE,sBAAL;AACI,+BACOO,KADP;AAEIH,QAAAA,SAAS,EAAE;AAFf;;AAKJ;AAzBJ;;AA2BA,SAAOG,KAAP;AACH,CA7BM","sourcesContent":["import { RangerAction } from './actions';\nimport {\n    RANGER_CONNECT_DATA,\n    RANGER_CONNECT_ERROR,\n    RANGER_CONNECT_FETCH,\n    RANGER_DISCONNECT_DATA,\n    RANGER_SUBSCRIPTIONS_DATA,\n} from './constants';\n\nexport interface RangerState {\n    withAuth: boolean;\n    connected: boolean;\n    subscriptions: string[];\n}\n\nconst initialRangerState: RangerState = {\n    withAuth: false,\n    connected: false,\n    subscriptions: [],\n};\nexport const rangerReducer = (state = initialRangerState, action: RangerAction): RangerState => {\n    switch (action.type) {\n        case RANGER_CONNECT_FETCH:\n            return {\n                ...state,\n                withAuth: action.payload.withAuth,\n                connected: false,\n            };\n        case RANGER_SUBSCRIPTIONS_DATA:\n            return {\n                ...state,\n                subscriptions: [...action.payload.subscriptions],\n            };\n        case RANGER_CONNECT_DATA:\n            return {\n                ...state,\n                connected: true,\n            };\n\n        case RANGER_CONNECT_ERROR:\n        case RANGER_DISCONNECT_DATA:\n            return {\n                ...state,\n                connected: false,\n            };\n\n        default:\n    }\n    return state;\n};\n"]},"metadata":{},"sourceType":"module"}