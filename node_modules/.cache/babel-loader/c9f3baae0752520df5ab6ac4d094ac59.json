{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(handleAlertSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(callAlertData);\n\nimport { delay } from 'redux-saga'; // tslint:disable-next-line no-submodule-imports\n\nimport { call, put } from 'redux-saga/effects';\nimport { userReset } from '../../../';\nimport { msAlertDisplayTime } from '../../../../api';\nimport { alertData, alertDelete } from '../actions';\nexport function handleAlertSaga(action) {\n  return _regeneratorRuntime.wrap(function handleAlertSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(action.payload.type === 'error')) {\n            _context.next = 32;\n            break;\n          }\n\n          _context.t0 = action.payload.code;\n          _context.next = _context.t0 === 401 ? 4 : _context.t0 === 403 ? 21 : 28;\n          break;\n\n        case 4:\n          if (!(action.payload.message.indexOf('identity.session.not_active') > -1)) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 7;\n          return put(userReset());\n\n        case 7:\n          _context.next = 9;\n          return put(alertData(action.payload));\n\n        case 9:\n          return _context.abrupt(\"return\");\n\n        case 12:\n          if (!(action.payload.message.indexOf('authz.invalid_session') > -1)) {\n            _context.next = 17;\n            break;\n          }\n\n          _context.next = 15;\n          return put(userReset());\n\n        case 15:\n          _context.next = 20;\n          break;\n\n        case 17:\n          _context.next = 19;\n          return call(callAlertData, action);\n\n        case 19:\n          return _context.abrupt(\"break\", 30);\n\n        case 20:\n          return _context.abrupt(\"break\", 30);\n\n        case 21:\n          if (!(action.payload.message.indexOf('identity.session.invalid_otp') > -1)) {\n            _context.next = 24;\n            break;\n          }\n\n          _context.next = 24;\n          return call(callAlertData, action);\n\n        case 24:\n          if (!(action.payload.message.indexOf('jwt.decode_and_verify') > -1)) {\n            _context.next = 27;\n            break;\n          }\n\n          _context.next = 27;\n          return call(callAlertData, action);\n\n        case 27:\n          return _context.abrupt(\"return\");\n\n        case 28:\n          _context.next = 30;\n          return call(callAlertData, action);\n\n        case 30:\n          _context.next = 34;\n          break;\n\n        case 32:\n          _context.next = 34;\n          return call(callAlertData, action);\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction callAlertData(action) {\n  return _regeneratorRuntime.wrap(function callAlertData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put(alertData(action.payload));\n\n        case 2:\n          _context2.next = 4;\n          return delay(parseFloat(msAlertDisplayTime()));\n\n        case 4:\n          _context2.next = 6;\n          return put(alertDelete());\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/workspaces/temx/src/modules/public/alert/sagas/handleAlertSaga.ts"],"names":["handleAlertSaga","callAlertData","delay","call","put","userReset","msAlertDisplayTime","alertData","alertDelete","action","payload","type","code","message","indexOf","parseFloat"],"mappings":";;;;yBAOiBA,e;;;yBAiCPC,a;;AAxCV,SAASC,KAAT,QAAsB,YAAtB,C,CACA;;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAkD,YAAlD;AAEA,OAAO,SAAUR,eAAV,CAA0BS,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBACCA,MAAM,CAACC,OAAP,CAAeC,IAAf,KAAwB,OADzB;AAAA;AAAA;AAAA;;AAAA,wBAESF,MAAM,CAACC,OAAP,CAAeE,IAFxB;AAAA,0CAGU,GAHV,uBAiBU,GAjBV;AAAA;;AAAA;AAAA,gBAIaH,MAAM,CAACC,OAAP,CAAeG,OAAf,CAAuBC,OAAvB,CAA+B,6BAA/B,IAAgE,CAAC,CAJ9E;AAAA;AAAA;AAAA;;AAAA;AAKa,iBAAMV,GAAG,CAACC,SAAS,EAAV,CAAT;;AALb;AAAA;AAMa,iBAAMD,GAAG,CAACG,SAAS,CAACE,MAAM,CAACC,OAAR,CAAV,CAAT;;AANb;AAAA;;AAAA;AAAA,gBASiBD,MAAM,CAACC,OAAP,CAAeG,OAAf,CAAuBC,OAAvB,CAA+B,uBAA/B,IAA0D,CAAC,CAT5E;AAAA;AAAA;AAAA;;AAAA;AAUiB,iBAAMV,GAAG,CAACC,SAAS,EAAV,CAAT;;AAVjB;AAAA;AAAA;;AAAA;AAAA;AAYiB,iBAAMF,IAAI,CAACF,aAAD,EAAgBQ,MAAhB,CAAV;;AAZjB;AAAA;;AAAA;AAAA;;AAAA;AAAA,gBAkBaA,MAAM,CAACC,OAAP,CAAeG,OAAf,CAAuBC,OAAvB,CAA+B,8BAA/B,IAAiE,CAAC,CAlB/E;AAAA;AAAA;AAAA;;AAAA;AAmBa,iBAAMX,IAAI,CAACF,aAAD,EAAgBQ,MAAhB,CAAV;;AAnBb;AAAA,gBAqBaA,MAAM,CAACC,OAAP,CAAeG,OAAf,CAAuBC,OAAvB,CAA+B,uBAA/B,IAA0D,CAAC,CArBxE;AAAA;AAAA;AAAA;;AAAA;AAsBa,iBAAMX,IAAI,CAACF,aAAD,EAAgBQ,MAAhB,CAAV;;AAtBb;AAAA;;AAAA;AAAA;AA0BS,iBAAMN,IAAI,CAACF,aAAD,EAAgBQ,MAAhB,CAAV;;AA1BT;AAAA;AAAA;;AAAA;AAAA;AA6BC,iBAAMN,IAAI,CAACF,aAAD,EAAgBQ,MAAhB,CAAV;;AA7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiCP,SAAUR,aAAV,CAAwBQ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAML,GAAG,CAACG,SAAS,CAACE,MAAM,CAACC,OAAR,CAAV,CAAT;;AADJ;AAAA;AAEI,iBAAMR,KAAK,CAACa,UAAU,CAACT,kBAAkB,EAAnB,CAAX,CAAX;;AAFJ;AAAA;AAGI,iBAAMF,GAAG,CAACI,WAAW,EAAZ,CAAT;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { delay } from 'redux-saga';\n// tslint:disable-next-line no-submodule-imports\nimport { call, put } from 'redux-saga/effects';\nimport { userReset } from '../../../';\nimport { msAlertDisplayTime } from '../../../../api';\nimport { alertData, alertDelete, AlertPush } from '../actions';\n\nexport function* handleAlertSaga(action: AlertPush) {\n    if (action.payload.type === 'error') {\n        switch (action.payload.code) {\n            case 401:\n                if (action.payload.message.indexOf('identity.session.not_active') > -1) {\n                    yield put(userReset());\n                    yield put(alertData(action.payload));\n                    return;\n                } else {\n                    if (action.payload.message.indexOf('authz.invalid_session') > -1) {\n                        yield put(userReset());\n                    } else {\n                        yield call(callAlertData, action);\n                        break;\n                    }\n                }\n                break;\n            case 403:\n                if (action.payload.message.indexOf('identity.session.invalid_otp') > -1) {\n                    yield call(callAlertData, action);\n                }\n                if (action.payload.message.indexOf('jwt.decode_and_verify') > -1) {\n                    yield call(callAlertData, action);\n                }\n                return;\n            default:\n                yield call(callAlertData, action);\n        }\n    } else {\n        yield call(callAlertData, action);\n    }\n}\n\nfunction* callAlertData(action: AlertPush) {\n    yield put(alertData(action.payload));\n    yield delay(parseFloat(msAlertDisplayTime()));\n    yield put(alertDelete());\n}\n"]},"metadata":{},"sourceType":"module"}