{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/screens/OrdersTabScreen/index.tsx\";\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { TabPanel } from '../../components';\nimport { OrdersElement } from '../../containers/OrdersElement';\nimport { setDocumentTitle } from '../../helpers';\nimport { marketsFetch as _marketsFetch, ordersCancelAllFetch, resetOrdersHistory as _resetOrdersHistory, selectOrdersHistory, selectUserLoggedIn } from '../../modules';\nimport { rangerConnectFetch } from '../../modules/public/ranger';\nimport { selectRanger } from '../../modules/public/ranger/selectors';\n\nvar Orders =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Orders, _React$PureComponent);\n\n  function Orders() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Orders);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Orders)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tab: 'open',\n      currentTabIndex: 0\n    };\n    _this.tabMapping = ['open', 'all'];\n\n    _this.onCurrentTabChange = function (index) {\n      return _this.setState({\n        currentTabIndex: index\n      });\n    };\n\n    _this.handleMakeRequest = function (index) {\n      _this.renderTabs();\n\n      if (_this.state.tab === _this.tabMapping[index]) {\n        return;\n      }\n\n      _this.props.resetOrdersHistory();\n\n      _this.setState({\n        tab: _this.tabMapping[index]\n      });\n    };\n\n    _this.renderTabs = function () {\n      var tab = _this.state.tab;\n      return [{\n        content: tab === 'open' ? React.createElement(OrdersElement, {\n          type: \"open\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }) : null,\n        label: _this.props.intl.formatMessage({\n          id: 'page.body.openOrders.tab.open'\n        })\n      }, {\n        content: tab === 'all' ? React.createElement(OrdersElement, {\n          type: \"all\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }) : null,\n        label: _this.props.intl.formatMessage({\n          id: 'page.body.openOrders.tab.all'\n        })\n      }];\n    };\n\n    _this.handleCancelAll = function () {\n      return _this.props.ordersCancelAll(_this.state);\n    };\n\n    return _this;\n  }\n\n  _createClass(Orders, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          connected = _this$props.rangerState.connected,\n          userLoggedIn = _this$props.userLoggedIn;\n      setDocumentTitle('Orders');\n      this.props.marketsFetch();\n\n      if (!connected) {\n        this.props.rangerConnect({\n          withAuth: userLoggedIn\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.resetOrdersHistory();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cancelAll = this.props.list.length ? React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        onClick: this.handleCancelAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(FormattedMessage, {\n        id: \"page.body.openOrders.header.button.cancelAll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"pg-orders-tab__close\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }))) : null;\n      return React.createElement(\"div\", {\n        className: \"pg-orders-tab pg-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-orders-tab__tabs-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(TabPanel, {\n        panels: this.renderTabs(),\n        onTabChange: this.handleMakeRequest,\n        optionalHead: cancelAll,\n        currentTabIndex: this.state.currentTabIndex,\n        onCurrentTabChange: this.onCurrentTabChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Orders;\n}(React.PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    list: selectOrdersHistory(state),\n    rangerState: selectRanger(state),\n    userLoggedIn: selectUserLoggedIn(state)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    marketsFetch: function marketsFetch() {\n      return dispatch(_marketsFetch());\n    },\n    ordersCancelAll: function ordersCancelAll(payload) {\n      return dispatch(ordersCancelAllFetch(payload));\n    },\n    resetOrdersHistory: function resetOrdersHistory() {\n      return dispatch(_resetOrdersHistory());\n    },\n    rangerConnect: function rangerConnect(payload) {\n      return dispatch(rangerConnectFetch(payload));\n    }\n  };\n};\n\nvar OrdersTabScreen = injectIntl(connect(mapStateToProps, mapDispatchToProps)(Orders));\nexport { OrdersTabScreen };","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/screens/OrdersTabScreen/index.tsx"],"names":["React","FormattedMessage","injectIntl","connect","TabPanel","OrdersElement","setDocumentTitle","marketsFetch","ordersCancelAllFetch","resetOrdersHistory","selectOrdersHistory","selectUserLoggedIn","rangerConnectFetch","selectRanger","Orders","state","tab","currentTabIndex","tabMapping","onCurrentTabChange","index","setState","handleMakeRequest","renderTabs","props","content","label","intl","formatMessage","id","handleCancelAll","ordersCancelAll","connected","rangerState","userLoggedIn","rangerConnect","withAuth","cancelAll","list","length","PureComponent","mapStateToProps","mapDispatchToProps","dispatch","payload","OrdersTabScreen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n    FormattedMessage,\n    InjectedIntlProps,\n    injectIntl,\n} from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { TabPanel } from '../../components';\nimport { OrdersElement } from '../../containers/OrdersElement';\nimport { setDocumentTitle } from '../../helpers';\nimport {\n    marketsFetch,\n    ordersCancelAllFetch,\n    resetOrdersHistory,\n    RootState,\n    selectOrdersHistory,\n    selectUserLoggedIn,\n} from '../../modules';\nimport {RangerConnectFetch, rangerConnectFetch} from '../../modules/public/ranger';\nimport {RangerState} from '../../modules/public/ranger/reducer';\nimport {selectRanger} from '../../modules/public/ranger/selectors';\nimport { OrderCommon } from '../../modules/types';\n\ninterface ReduxProps {\n    list: OrderCommon[];\n    rangerState: RangerState;\n    userLoggedIn: boolean;\n}\n\ninterface DispatchProps {\n    marketsFetch: typeof marketsFetch;\n    ordersCancelAll: typeof ordersCancelAllFetch;\n    resetOrdersHistory: typeof resetOrdersHistory;\n    rangerConnect: typeof rangerConnectFetch;\n}\n\ntype Props = ReduxProps & DispatchProps & InjectedIntlProps;\n\ninterface State {\n    tab: string;\n    currentTabIndex: number;\n}\n\nclass Orders extends React.PureComponent<Props, State> {\n    public state = { tab: 'open', currentTabIndex: 0};\n\n    public tabMapping = ['open', 'all'];\n\n    public componentDidMount() {\n        const {\n            rangerState: {connected},\n            userLoggedIn,\n        } = this.props;\n\n        setDocumentTitle('Orders');\n        this.props.marketsFetch();\n\n        if (!connected) {\n            this.props.rangerConnect({withAuth: userLoggedIn});\n        }\n    }\n\n    public componentWillUnmount() {\n        this.props.resetOrdersHistory();\n    }\n\n    public render() {\n        const cancelAll = this.props.list.length ? (\n            <React.Fragment>\n                <span onClick={this.handleCancelAll}>\n                    <FormattedMessage id=\"page.body.openOrders.header.button.cancelAll\" />\n                    <span className=\"pg-orders-tab__close\" />\n                </span>\n            </React.Fragment>\n        ) : null;\n\n        return (\n            <div className=\"pg-orders-tab pg-container\">\n                <div className=\"pg-orders-tab__tabs-content\">\n                    <TabPanel\n                        panels={this.renderTabs()}\n                        onTabChange={this.handleMakeRequest}\n                        optionalHead={cancelAll}\n                        currentTabIndex={this.state.currentTabIndex}\n                        onCurrentTabChange={this.onCurrentTabChange}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private onCurrentTabChange = index => this.setState({ currentTabIndex: index });\n\n    private handleMakeRequest = (index: number) => {\n        this.renderTabs();\n        if (this.state.tab === this.tabMapping[index]) {\n            return;\n        }\n        this.props.resetOrdersHistory();\n        this.setState({ tab: this.tabMapping[index] });\n    };\n\n    private renderTabs = () => {\n        const { tab } = this.state;\n        return [\n            {\n                content: tab === 'open' ? <OrdersElement type=\"open\"/> : null,\n                label: this.props.intl.formatMessage({ id: 'page.body.openOrders.tab.open'}),\n            },\n            {\n                content: tab === 'all' ? <OrdersElement type=\"all\" /> : null,\n                label: this.props.intl.formatMessage({ id: 'page.body.openOrders.tab.all'}),\n            },\n        ];\n    };\n\n    private handleCancelAll = () => this.props.ordersCancelAll(this.state);\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    list: selectOrdersHistory(state),\n    rangerState: selectRanger(state),\n    userLoggedIn: selectUserLoggedIn(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        marketsFetch: () => dispatch(marketsFetch()),\n        ordersCancelAll: payload => dispatch(ordersCancelAllFetch(payload)),\n        resetOrdersHistory: () => dispatch(resetOrdersHistory()),\n        rangerConnect: (payload: RangerConnectFetch['payload']) => dispatch(rangerConnectFetch(payload)),\n    });\n\nconst OrdersTabScreen = injectIntl(connect(mapStateToProps, mapDispatchToProps)(Orders));\n\nexport {\n    OrdersTabScreen,\n};\n"]},"metadata":{},"sourceType":"module"}