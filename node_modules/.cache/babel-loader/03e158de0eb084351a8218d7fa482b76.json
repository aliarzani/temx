{"ast":null,"code":"import _defineProperty from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/temx/src/screens/ChangeForgottenPasswordScreen/index.tsx\";\nimport { Button } from '@openware/components';\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CustomInput } from '../../components';\nimport { PASSWORD_REGEX, setDocumentTitle } from '../../helpers';\nimport { changeForgotPasswordFetch as _changeForgotPasswordFetch, changeLanguage as _changeLanguage, selectChangeForgotPasswordSuccess } from '../../modules';\n\nvar ChangeForgottenPasswordComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChangeForgottenPasswordComponent, _React$Component);\n\n  function ChangeForgottenPasswordComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ChangeForgottenPasswordComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeForgottenPasswordComponent).call(this, props));\n\n    _this.disableButton = function () {\n      var _this$state = _this.state,\n          password = _this$state.password,\n          confirmPassword = _this$state.confirmPassword;\n      return !password || !confirmPassword;\n    };\n\n    _this.handleFieldFocus = function (field) {\n      return function () {\n        switch (field) {\n          case 'password':\n            _this.setState({\n              passwordFocused: !_this.state.passwordFocused\n            });\n\n            break;\n\n          case 'confirmPassword':\n            _this.setState({\n              confirmPasswordFocused: !_this.state.confirmPasswordFocused\n            });\n\n            break;\n\n          default:\n            break;\n        }\n      };\n    };\n\n    _this.handleSendNewPassword = function () {\n      var _this$state2 = _this.state,\n          password = _this$state2.password,\n          confirmPassword = _this$state2.confirmPassword,\n          confirmToken = _this$state2.confirmToken;\n      var isPasswordValid = password.match(PASSWORD_REGEX);\n      var isConfirmPasswordValid = password === confirmPassword;\n\n      _this.setState({\n        error: !(isPasswordValid && isConfirmPasswordValid)\n      }, function () {\n        if (!_this.state.error) {\n          _this.props.changeForgotPasswordFetch({\n            reset_password_token: confirmToken,\n            password: password,\n            confirm_password: confirmPassword\n          });\n        }\n      });\n    };\n\n    _this.handleChange = function (key, value) {\n      // @ts-ignore\n      _this.setState(_defineProperty({}, key, value));\n    };\n\n    _this.state = {\n      error: false,\n      confirmToken: '',\n      password: '',\n      passwordFocused: false,\n      confirmPassword: '',\n      confirmPasswordFocused: false\n    };\n    return _this;\n  }\n\n  _createClass(ChangeForgottenPasswordComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Change forgotten password');\n      var history = this.props.history;\n      var token = new URLSearchParams(history.location.search).get('reset_token');\n      var lang = new URLSearchParams(history.location.search).get('lang');\n\n      if (token) {\n        this.setState({\n          confirmToken: token\n        });\n      }\n\n      if (lang) {\n        this.props.changeLanguage(lang.toLowerCase());\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.changeForgotPassword && !this.props.changeForgotPassword) {\n        this.props.history.push('/signin');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          error = _this$state3.error,\n          password = _this$state3.password,\n          passwordFocused = _this$state3.passwordFocused,\n          confirmPassword = _this$state3.confirmPassword,\n          confirmPasswordFocused = _this$state3.confirmPasswordFocused;\n      var passwordFocusedClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': passwordFocused\n      });\n      var confirmPasswordFocusedClass = cr('cr-email-form__group', {\n        'cr-email-form__group--focused': confirmPasswordFocused\n      });\n\n      var updatePassword = function updatePassword(e) {\n        return _this2.handleChange('password', e);\n      };\n\n      var updateConfirmPassword = function updateConfirmPassword(e) {\n        return _this2.handleChange('confirmPassword', e);\n      };\n\n      return React.createElement(\"div\", {\n        className: \"pg-change-forgotten-password-screen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-change-forgotten-password-screen__container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__options-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"cr-email-form__option-inner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.props.intl.formatMessage({\n        id: 'page.header.signIn.resetPassword.title'\n      })))), React.createElement(\"div\", {\n        className: \"cr-email-form__form-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: passwordFocusedClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"password\",\n        label: this.props.intl.formatMessage({\n          id: 'page.header.signIn.resetPassword.newPassword'\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: 'page.header.signIn.resetPassword.newPassword'\n        }),\n        defaultLabel: \"New password\",\n        handleChangeInput: updatePassword,\n        inputValue: password,\n        handleFocusInput: this.handleFieldFocus('password'),\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: confirmPasswordFocusedClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(CustomInput, {\n        type: \"password\",\n        label: this.props.intl.formatMessage({\n          id: 'page.header.signIn.resetPassword.repeatPassword'\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: 'page.header.signIn.resetPassword.repeatPassword'\n        }),\n        defaultLabel: \"Repeat password\",\n        handleChangeInput: updateConfirmPassword,\n        inputValue: confirmPassword,\n        handleFocusInput: this.handleFieldFocus('confirmPassword'),\n        classNameLabel: \"cr-email-form__label\",\n        classNameInput: \"cr-email-form__input\",\n        autoFocus: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), error && React.createElement(\"div\", {\n        className: \"cr-email-form__error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, this.props.intl.formatMessage({\n        id: 'page.header.signIn.resetPassword.error'\n      })), React.createElement(\"div\", {\n        className: \"cr-email-form__button-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Button, {\n        label: this.props.intl.formatMessage({\n          id: 'page.header.signIn.resetPassword.button'\n        }),\n        className: !this.disableButton() ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled',\n        disabled: this.disableButton(),\n        onClick: this.handleSendNewPassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return ChangeForgottenPasswordComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    changeForgotPassword: selectChangeForgotPasswordSuccess(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    changeForgotPasswordFetch: function changeForgotPasswordFetch(credentials) {\n      return dispatch(_changeForgotPasswordFetch(credentials));\n    },\n    changeLanguage: function changeLanguage(lang) {\n      return dispatch(_changeLanguage(lang));\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nvar ChangeForgottenPasswordScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(ChangeForgottenPasswordComponent)));\nexport { ChangeForgottenPasswordScreen };","map":{"version":3,"sources":["/workspaces/temx/src/screens/ChangeForgottenPasswordScreen/index.tsx"],"names":["Button","cr","React","injectIntl","connect","withRouter","CustomInput","PASSWORD_REGEX","setDocumentTitle","changeForgotPasswordFetch","changeLanguage","selectChangeForgotPasswordSuccess","ChangeForgottenPasswordComponent","props","disableButton","state","password","confirmPassword","handleFieldFocus","field","setState","passwordFocused","confirmPasswordFocused","handleSendNewPassword","confirmToken","isPasswordValid","match","isConfirmPasswordValid","error","reset_password_token","confirm_password","handleChange","key","value","history","token","URLSearchParams","location","search","get","lang","toLowerCase","next","changeForgotPassword","push","passwordFocusedClass","confirmPasswordFocusedClass","updatePassword","e","updateConfirmPassword","intl","formatMessage","id","Component","mapStateToProps","mapDispatchProps","dispatch","credentials","ChangeForgottenPasswordScreen"],"mappings":"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","sourcesContent":["import {\n  Button,\n} from '@openware/components';\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport {\n  connect,\n  MapDispatchToPropsFunction,\n  MapStateToProps,\n} from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { CustomInput } from '../../components';\nimport { PASSWORD_REGEX, setDocumentTitle } from '../../helpers';\nimport {\n    changeForgotPasswordFetch,\n    changeLanguage,\n    RootState,\n    selectChangeForgotPasswordSuccess,\n} from '../../modules';\n\ninterface ChangeForgottenPasswordState {\n    error: boolean;\n    password: string;\n    passwordFocused: boolean;\n    confirmToken: string;\n    confirmPassword: string;\n    confirmPasswordFocused: boolean;\n}\n\ninterface ReduxProps {\n    changeForgotPassword?: boolean;\n}\n\ninterface DispatchProps {\n    changeForgotPasswordFetch: typeof changeForgotPasswordFetch;\n    changeLanguage: typeof changeLanguage;\n}\n\ninterface HistoryProps {\n    history: {\n        location: {\n            search: string;\n        };\n    };\n}\n\ntype Props = RouterProps & DispatchProps & HistoryProps & ReduxProps & InjectedIntlProps;\n\nclass ChangeForgottenPasswordComponent extends React.Component<Props, ChangeForgottenPasswordState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            error: false,\n            confirmToken: '',\n            password: '',\n            passwordFocused: false,\n            confirmPassword: '',\n            confirmPasswordFocused: false,\n        };\n    }\n\n    public componentDidMount() {\n        setDocumentTitle('Change forgotten password');\n        const { history } = this.props;\n        const token = new URLSearchParams(history.location.search).get('reset_token');\n        const lang = new URLSearchParams(history.location.search).get('lang');\n        if (token) {\n            this.setState({\n                confirmToken: token,\n            });\n        }\n        if (lang) {\n            this.props.changeLanguage(lang.toLowerCase());\n        }\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.changeForgotPassword && (!this.props.changeForgotPassword)) {\n            this.props.history.push('/signin');\n        }\n    }\n\n    public render() {\n        const {\n            error,\n            password,\n            passwordFocused,\n            confirmPassword,\n            confirmPasswordFocused,\n        } = this.state;\n\n        const passwordFocusedClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': passwordFocused,\n        });\n\n        const confirmPasswordFocusedClass = cr('cr-email-form__group', {\n            'cr-email-form__group--focused': confirmPasswordFocused,\n        });\n\n        const updatePassword = e => this.handleChange('password', e);\n        const updateConfirmPassword = e => this.handleChange('confirmPassword', e);\n        return (\n            <div className=\"pg-change-forgotten-password-screen\">\n                <div className=\"pg-change-forgotten-password-screen__container\">\n                    <form>\n                        <div className=\"cr-email-form\">\n                            <div className=\"cr-email-form__options-group\">\n                                <div className=\"cr-email-form__option\">\n                                    <div className=\"cr-email-form__option-inner\">\n                                        {this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.title'})}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"cr-email-form__form-content\">\n                                <div className={passwordFocusedClass}>\n                                    <CustomInput\n                                        type=\"password\"\n                                        label={this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.newPassword'})}\n                                        placeholder={this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.newPassword'})}\n                                        defaultLabel=\"New password\"\n                                        handleChangeInput={updatePassword}\n                                        inputValue={password}\n                                        handleFocusInput={this.handleFieldFocus('password')}\n                                        classNameLabel=\"cr-email-form__label\"\n                                        classNameInput=\"cr-email-form__input\"\n                                        autoFocus={true}\n                                    />\n                                </div>\n                                <div className={confirmPasswordFocusedClass}>\n                                    <CustomInput\n                                        type=\"password\"\n                                        label={this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.repeatPassword'})}\n                                        placeholder={this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.repeatPassword'})}\n                                        defaultLabel=\"Repeat password\"\n                                        handleChangeInput={updateConfirmPassword}\n                                        inputValue={confirmPassword}\n                                        handleFocusInput={this.handleFieldFocus('confirmPassword')}\n                                        classNameLabel=\"cr-email-form__label\"\n                                        classNameInput=\"cr-email-form__input\"\n                                        autoFocus={false}\n                                    />\n                                </div>\n                                {error && <div className=\"cr-email-form__error\">{this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.error'})}</div>}\n                                <div className=\"cr-email-form__button-wrapper\">\n                                    <Button\n                                        label={this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.button'})}\n                                        className={!this.disableButton() ? 'cr-email-form__button' : 'cr-email-form__button cr-email-form__button--disabled'}\n                                        disabled={this.disableButton()}\n                                        onClick={this.handleSendNewPassword}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n\n    private disableButton = (): boolean => {\n        const {\n            password,\n            confirmPassword,\n        } = this.state;\n\n        return !password || !confirmPassword;\n    };\n\n    private handleFieldFocus = (field: string) => {\n        return () => {\n            switch (field) {\n                case 'password':\n                    this.setState({\n                        passwordFocused: !this.state.passwordFocused,\n                    });\n                    break;\n                case 'confirmPassword':\n                    this.setState({\n                        confirmPasswordFocused: !this.state.confirmPasswordFocused,\n                    });\n                    break;\n                default:\n                    break;\n            }\n        };\n    }\n\n    private handleSendNewPassword = () => {\n        const { password, confirmPassword, confirmToken } = this.state;\n        const isPasswordValid = password.match(PASSWORD_REGEX);\n        const isConfirmPasswordValid = password === confirmPassword;\n\n        this.setState({\n            error: !(isPasswordValid && isConfirmPasswordValid),\n        }, () => {\n            if (!this.state.error) {\n                this.props.changeForgotPasswordFetch({\n                    reset_password_token: confirmToken,\n                    password: password,\n                    confirm_password: confirmPassword,\n                });\n            }\n        });\n    };\n\n    private handleChange = (key: string, value: string) => {\n      // @ts-ignore\n      this.setState({\n        [key]: value,\n      });\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    changeForgotPassword: selectChangeForgotPasswordSuccess(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        changeForgotPasswordFetch: credentials => dispatch(changeForgotPasswordFetch(credentials)),\n        changeLanguage: lang => dispatch(changeLanguage(lang)),\n    });\n\n// tslint:disable-next-line:no-any\nconst ChangeForgottenPasswordScreen = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(ChangeForgottenPasswordComponent) as any));\n\nexport {\n    ChangeForgottenPasswordScreen,\n};\n"]},"metadata":{},"sourceType":"module"}