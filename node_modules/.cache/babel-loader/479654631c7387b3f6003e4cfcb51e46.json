{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(ordersHistorySaga);\n\n// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush } from '../../..';\nimport { API } from '../../../../api';\nimport { convertOrderAPI } from '../../openOrders/helpers';\nimport { userOrdersHistoryData, userOrdersHistoryError } from '../actions';\nvar ordersOptions = {\n  apiVersion: 'peatio',\n  withHeaders: true\n};\nexport function ordersHistorySaga(action) {\n  var _action$payload, pageIndex, limit, type, params, _ref, data, headers, list;\n\n  return _regeneratorRuntime.wrap(function ordersHistorySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _action$payload = action.payload, pageIndex = _action$payload.pageIndex, limit = _action$payload.limit, type = _action$payload.type;\n          params = \"limit=\".concat(limit, \"&page=\").concat(pageIndex + 1).concat(type === 'all' ? '' : '&state=wait');\n          _context.next = 5;\n          return call(API.get(ordersOptions), \"/market/orders?\".concat(params));\n\n        case 5:\n          _ref = _context.sent;\n          data = _ref.data;\n          headers = _ref.headers;\n          list = data.map(convertOrderAPI);\n          _context.next = 11;\n          return put(userOrdersHistoryData({\n            list: list,\n            pageIndex: pageIndex,\n            total: headers.total\n          }));\n\n        case 11:\n          _context.next = 19;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 17;\n          return put(userOrdersHistoryError());\n\n        case 17:\n          _context.next = 19;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}","map":{"version":3,"sources":["/workspaces/temx/src/modules/user/ordersHistory/sagas/ordersHistorySaga.ts"],"names":["ordersHistorySaga","call","put","alertPush","API","convertOrderAPI","userOrdersHistoryData","userOrdersHistoryError","ordersOptions","apiVersion","withHeaders","action","payload","pageIndex","limit","type","params","get","data","headers","list","map","total","message","code"],"mappings":";;;;yBAgBiBA,iB;;AAhBjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SACIC,qBADJ,EAEIC,sBAFJ,QAIO,YAJP;AAMA,IAAMC,aAA6B,GAAG;AAClCC,EAAAA,UAAU,EAAE,QADsB;AAElCC,EAAAA,WAAW,EAAE;AAFqB,CAAtC;AAKA,OAAO,SAAUV,iBAAV,CAA4BW,MAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEoCA,MAAM,CAACC,OAF3C,EAESC,SAFT,mBAESA,SAFT,EAEoBC,KAFpB,mBAEoBA,KAFpB,EAE2BC,IAF3B,mBAE2BA,IAF3B;AAGOC,UAAAA,MAHP,mBAGyBF,KAHzB,mBAGuCD,SAAS,GAAG,CAHnD,SAGuDE,IAAI,KAAK,KAAT,GAAiB,EAAjB,GAAsB,aAH7E;AAAA;AAI2B,iBAAMd,IAAI,CAACG,GAAG,CAACa,GAAJ,CAAQT,aAAR,CAAD,2BAA2CQ,MAA3C,EAAV;;AAJ3B;AAAA;AAISE,UAAAA,IAJT,QAISA,IAJT;AAIeC,UAAAA,OAJf,QAIeA,OAJf;AAMOC,UAAAA,IANP,GAMcF,IAAI,CAACG,GAAL,CAAShB,eAAT,CANd;AAAA;AAQC,iBAAMH,GAAG,CAACI,qBAAqB,CAAC;AAAEc,YAAAA,IAAI,EAAJA,IAAF;AAAQP,YAAAA,SAAS,EAATA,SAAR;AAAmBS,YAAAA,KAAK,EAAEH,OAAO,CAACG;AAAlC,WAAD,CAAtB,CAAT;;AARD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUC,iBAAMpB,GAAG,CAACK,sBAAsB,EAAvB,CAAT;;AAVD;AAAA;AAWC,iBAAML,GAAG,CAACC,SAAS,CAAC;AAACoB,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBC,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CT,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line\nimport { call, put } from 'redux-saga/effects';\nimport { alertPush } from '../../..';\nimport { API, RequestOptions } from '../../../../api';\nimport { convertOrderAPI } from '../../openOrders/helpers';\nimport {\n    userOrdersHistoryData,\n    userOrdersHistoryError,\n    UserOrdersHistoryFetch,\n} from '../actions';\n\nconst ordersOptions: RequestOptions = {\n    apiVersion: 'peatio',\n    withHeaders: true,\n};\n\nexport function* ordersHistorySaga(action: UserOrdersHistoryFetch) {\n    try {\n        const { pageIndex, limit, type } = action.payload;\n        const params = `limit=${limit}&page=${pageIndex + 1}${type === 'all' ? '' : '&state=wait'}`;\n        const { data, headers } = yield call(API.get(ordersOptions), `/market/orders?${params}`);\n\n        const list = data.map(convertOrderAPI);\n\n        yield put(userOrdersHistoryData({ list, pageIndex, total: headers.total }));\n    } catch (error) {\n        yield put(userOrdersHistoryError());\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}