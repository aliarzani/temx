{"ast":null,"code":"import _classCallCheck from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/workspaces/codespaces-blank/baseapp-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/workspaces/codespaces-blank/baseapp-master/src/containers/Confirm/Documents/index.tsx\";\nimport { Button, Dropdown, Loader } from '@openware/components';\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport MaskInput from 'react-maskinput';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { formatDate } from '../../../helpers';\nimport { isDateInFuture } from '../../../helpers/checkDate';\nimport { alertPush } from '../../../modules';\nimport { selectSendDocumentsLoading, selectSendDocumentsSuccess, sendDocuments as _sendDocuments } from '../../../modules/user/kyc/documents';\nimport close from \"../../../assets/images/close.svg\";\n\n// tslint:disable:member-ordering\nvar DocumentsComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DocumentsComponent, _React$Component);\n\n  function DocumentsComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DocumentsComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DocumentsComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.translate = function (e) {\n      return _this.props.intl.formatMessage({\n        id: e\n      });\n    };\n\n    _this.data = [_this.translate('page.body.kyc.documents.select.passport'), _this.translate('page.body.kyc.documents.select.identityCard'), _this.translate('page.body.kyc.documents.select.driverLicense'), _this.translate('page.body.kyc.documents.select.utilityBill')];\n    _this.state = {\n      documentsType: '',\n      expiration: '',\n      expirationFocused: false,\n      idNumber: '',\n      idNumberFocused: false,\n      scans: []\n    };\n\n    _this.handleChangeDocumentsType = function (value) {\n      _this.setState({\n        documentsType: value\n      });\n    };\n\n    _this.handleFileDelete = function (key) {\n      return function () {\n        var fileList = Array.from(_this.state.scans);\n        fileList.splice(key, 1);\n\n        _this.setState({\n          scans: fileList\n        });\n      };\n    };\n\n    _this.renderScan = function (scan, index) {\n      return React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-filename\",\n        key: index,\n        onClick: _this.handleFileDelete(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, scan.name.slice(0, 27), \"...\\xA0\", React.createElement(\"img\", {\n        alt: \"close\",\n        src: close,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }));\n    };\n\n    _this.handleChangeIdNumber = function (e) {\n      _this.setState({\n        idNumber: e.target.value\n      });\n    };\n\n    _this.handleFieldFocus = function (field) {\n      return function () {\n        switch (field) {\n          case 'expiration':\n            _this.setState({\n              expirationFocused: !_this.state.expirationFocused\n            });\n\n            break;\n\n          case 'idNumber':\n            _this.setState({\n              idNumberFocused: !_this.state.idNumberFocused\n            });\n\n            break;\n\n          default:\n            break;\n        }\n      };\n    };\n\n    _this.handleChangeExpiration = function (e) {\n      _this.setState({\n        expiration: formatDate(e.target.value)\n      });\n    };\n\n    _this.handleUploadScan = function (uploadEvent) {\n      var allFiles = uploadEvent.target.files;\n      var oldFileList = Array.from(_this.state.scans);\n      var documentsCount = 5;\n      var additionalFileList = Array.from(allFiles).length > documentsCount ? Array.from(allFiles).slice(0, documentsCount) : Array.from(allFiles);\n\n      if (oldFileList.length + additionalFileList.length <= documentsCount) {\n        _this.setState({\n          scans: additionalFileList.concat(oldFileList)\n        });\n      } else {\n        _this.setState({\n          scans: additionalFileList.concat(oldFileList).slice(0, documentsCount)\n        });\n\n        _this.props.fetchAlert({\n          message: ['resource.documents.limit_reached'],\n          type: 'error'\n        });\n      }\n    };\n\n    _this.handleFileDrop = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var uploadObj = {\n        target: event.nativeEvent.dataTransfer\n      };\n\n      _this.handleUploadScan(uploadObj);\n    };\n\n    _this.handleDragOver = function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    };\n\n    _this.handleCheckButtonDisabled = function () {\n      var _this$state = _this.state,\n          expiration = _this$state.expiration,\n          idNumber = _this$state.idNumber,\n          scans = _this$state.scans;\n      return !scans.length || !idNumber || !expiration;\n    };\n\n    _this.sendDocuments = function () {\n      var _this$state2 = _this.state,\n          scans = _this$state2.scans,\n          idNumber = _this$state2.idNumber,\n          expiration = _this$state2.expiration,\n          documentsType = _this$state2.documentsType;\n\n      var typeOfDocuments = _this.getDocumentsType(documentsType);\n\n      var docExpire = isDateInFuture(expiration) ? expiration : '';\n\n      if (!scans.length) {\n        return;\n      }\n\n      var request = new FormData();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = scans[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var scan = _step.value;\n          request.append('upload[]', scan);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      request.append('doc_expire', docExpire);\n      request.append('doc_type', typeOfDocuments);\n      request.append('doc_number', idNumber);\n\n      _this.props.sendDocuments(request);\n    };\n\n    _this.getDocumentsType = function (value) {\n      switch (value) {\n        case _this.data[0]:\n          return 'Passport';\n\n        case _this.data[1]:\n          return 'Identity card';\n\n        case _this.data[2]:\n          return 'Driver license';\n\n        case _this.data[3]:\n          return 'Utility Bill';\n\n        default:\n          return value;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DocumentsComponent, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.success) {\n        this.props.history.push('/profile');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          documentsType = _this$state3.documentsType,\n          expiration = _this$state3.expiration,\n          expirationFocused = _this$state3.expirationFocused,\n          idNumber = _this$state3.idNumber,\n          idNumberFocused = _this$state3.idNumberFocused,\n          scans = _this$state3.scans;\n      var loading = this.props.loading;\n      var expirationFocusedClass = cr('pg-confirm__content-documents-col-row-content', {\n        'pg-confirm__content-documents-col-row-content--focused': expirationFocused\n      });\n      var idNumberFocusedClass = cr('pg-confirm__content-documents-col-row-content', {\n        'pg-confirm__content-documents-col-row-content--focused': idNumberFocused\n      });\n\n      var onSelect = function onSelect(value) {\n        return _this2.handleChangeDocumentsType(_this2.data[value]);\n      };\n\n      var numberType = \"\".concat(documentsType || this.translate('page.body.kyc.documentsType')).concat(this.translate('page.body.kyc.documents.number'));\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row-content-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row-content-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, documentsType && this.translate('page.body.kyc.documentsType')), React.createElement(Dropdown, {\n        className: \"pg-confirm__content-documents-col-row-content-number\",\n        list: this.data,\n        placeholder: this.translate('page.body.kyc.documentsType'),\n        onSelect: onSelect,\n        elemHeight: 40,\n        listHeight: 160,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: idNumberFocusedClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, idNumber && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, documentsType), React.createElement(\"input\", {\n        className: \"pg-confirm__content-documents-col-row-content-number\",\n        type: \"string\",\n        placeholder: numberType,\n        value: idNumber,\n        onChange: this.handleChangeIdNumber,\n        onFocus: this.handleFieldFocus('idNumber'),\n        onBlur: this.handleFieldFocus('idNumber'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), React.createElement(\"fieldset\", {\n        className: expirationFocusedClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, expiration && React.createElement(\"legend\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, this.translate('page.body.kyc.documents.expiryDate')), React.createElement(MaskInput, {\n        maskString: \"00/00/0000\",\n        mask: \"00/00/0000\",\n        onChange: this.handleChangeExpiration,\n        onFocus: this.handleFieldFocus('expiration'),\n        onBlur: this.handleFieldFocus('expiration'),\n        value: expiration,\n        className: \"group-input\",\n        placeholder: this.translate('page.body.kyc.documents.expiryDate'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"pg-confirm__loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, loading ? React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }) : null), React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col pg-confirm__content-documents-drag\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row-content-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, this.translate('page.body.kyc.documents.upload'), React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row-content-2-documents\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"box\",\n        draggable: true,\n        onDrop: this.handleFileDrop,\n        onDragOver: this.handleDragOver,\n        method: \"post\",\n        action: \"\",\n        \"data-enctype\": \"multipart/form-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"pg-confirm__content-documents-col-row-content-2-documents-input\",\n        \"data-multiple-caption\": \"files selected\",\n        draggable: true,\n        multiple: true,\n        name: \"files[]\",\n        type: \"file\",\n        id: \"file\",\n        onChange: this.handleUploadScan,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"pg-confirm__content-documents-col-row-content-2-documents-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"pg-confirm__content-documents-col-row-content-2-documents-label-item\",\n        htmlFor: \"file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.translate('page.body.kyc.documents.drag')), React.createElement(\"div\", {\n        className: \"muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.translate('page.body.kyc.documents.maxFile')), React.createElement(\"div\", {\n        className: \"muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.translate('page.body.kyc.documents.maxNum')))))), Array.from(scans).map(this.renderScan)))))), React.createElement(\"div\", {\n        className: \"pg-confirm__content-deep\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"pg-confirm__content-phone-deep-button\",\n        label: this.translate('page.body.kyc.submit'),\n        onClick: this.sendDocuments,\n        disabled: this.handleCheckButtonDisabled(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DocumentsComponent;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    success: selectSendDocumentsSuccess(state),\n    loading: selectSendDocumentsLoading(state)\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    fetchAlert: function fetchAlert(payload) {\n      return dispatch(alertPush(payload));\n    },\n    sendDocuments: function sendDocuments(payload) {\n      return dispatch(_sendDocuments(payload));\n    }\n  };\n}; // tslint:disable-next-line:no-any\n\n\nexport var Documents = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(DocumentsComponent)));","map":{"version":3,"sources":["/workspaces/codespaces-blank/baseapp-master/src/containers/Confirm/Documents/index.tsx"],"names":["Button","Dropdown","Loader","cr","React","injectIntl","MaskInput","connect","withRouter","formatDate","isDateInFuture","alertPush","selectSendDocumentsLoading","selectSendDocumentsSuccess","sendDocuments","DocumentsComponent","translate","e","props","intl","formatMessage","id","data","state","documentsType","expiration","expirationFocused","idNumber","idNumberFocused","scans","handleChangeDocumentsType","value","setState","handleFileDelete","key","fileList","Array","from","splice","renderScan","scan","index","name","slice","close","handleChangeIdNumber","target","handleFieldFocus","field","handleChangeExpiration","handleUploadScan","uploadEvent","allFiles","files","oldFileList","documentsCount","additionalFileList","length","concat","fetchAlert","message","type","handleFileDrop","event","preventDefault","stopPropagation","uploadObj","nativeEvent","dataTransfer","handleDragOver","handleCheckButtonDisabled","typeOfDocuments","getDocumentsType","docExpire","request","FormData","append","next","success","history","push","loading","expirationFocusedClass","idNumberFocusedClass","onSelect","numberType","map","Component","mapStateToProps","mapDispatchProps","dispatch","payload","Documents"],"mappings":"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","sourcesContent":["import { Button, Dropdown, Loader } from '@openware/components';\nimport cr from 'classnames';\nimport * as React from 'react';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport MaskInput from 'react-maskinput';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { formatDate } from '../../../helpers';\nimport { isDateInFuture } from '../../../helpers/checkDate';\nimport { alertPush, RootState } from '../../../modules';\nimport {\n    selectSendDocumentsLoading,\n    selectSendDocumentsSuccess,\n    sendDocuments,\n} from '../../../modules/user/kyc/documents';\n\nimport close from '../../../assets/images/close.svg';\n\ninterface ReduxProps {\n    success?: string;\n    loading: boolean;\n}\n\ninterface DispatchProps {\n    sendDocuments: typeof sendDocuments;\n    fetchAlert: typeof alertPush;\n}\n\ninterface OnChangeEvent {\n    target: {\n        value: string;\n    };\n}\n\ninterface DocumentsState {\n    documentsType: string;\n    expiration: string;\n    expirationFocused: boolean;\n    idNumber: string;\n    idNumberFocused: boolean;\n    scans: File[];\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & InjectedIntlProps;\n\n// tslint:disable:member-ordering\nclass DocumentsComponent extends React.Component<Props, DocumentsState> {\n    public translate = (e: string) => {\n        return this.props.intl.formatMessage({id: e});\n    };\n\n    public data = [\n        this.translate('page.body.kyc.documents.select.passport'),\n        this.translate('page.body.kyc.documents.select.identityCard'),\n        this.translate('page.body.kyc.documents.select.driverLicense'),\n        this.translate('page.body.kyc.documents.select.utilityBill'),\n    ];\n\n    public state = {\n        documentsType: '',\n        expiration: '',\n        expirationFocused: false,\n        idNumber: '',\n        idNumberFocused: false,\n        scans: [],\n    };\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.success){\n            this.props.history.push('/profile');\n        }\n    }\n\n    public render() {\n        const {\n            documentsType,\n            expiration,\n            expirationFocused,\n            idNumber,\n            idNumberFocused,\n            scans,\n        }: DocumentsState = this.state;\n\n        const { loading } = this.props;\n\n        const expirationFocusedClass = cr('pg-confirm__content-documents-col-row-content', {\n            'pg-confirm__content-documents-col-row-content--focused': expirationFocused,\n        });\n\n        const idNumberFocusedClass = cr('pg-confirm__content-documents-col-row-content', {\n            'pg-confirm__content-documents-col-row-content--focused': idNumberFocused,\n        });\n\n        const onSelect = value => this.handleChangeDocumentsType(this.data[value]);\n        const numberType = `${documentsType || this.translate('page.body.kyc.documentsType')}${this.translate('page.body.kyc.documents.number')}`;\n        return (\n            <React.Fragment>\n                <div className=\"pg-confirm__content-documents\">\n                    <div className=\"pg-confirm__content-documents-col-row\">\n                        <div className=\"pg-confirm__content-documents-col\">\n                            <div className=\"pg-confirm__content-documents-col-row\">\n                                <div className=\"pg-confirm__content-documents-col-row-content-3\">\n                                    <div className=\"pg-confirm__content-documents-col-row-content-label\">\n                                        {documentsType && this.translate('page.body.kyc.documentsType')}\n                                    </div>\n                                    <Dropdown\n                                        className=\"pg-confirm__content-documents-col-row-content-number\"\n                                        list={this.data}\n                                        placeholder={this.translate('page.body.kyc.documentsType')}\n                                        onSelect={onSelect}\n                                        elemHeight={40}\n                                        listHeight={160}\n                                    />\n                                </div>\n                                <fieldset className={idNumberFocusedClass}>\n                                    {idNumber && <legend>{documentsType}</legend>}\n                                    <input\n                                      className=\"pg-confirm__content-documents-col-row-content-number\"\n                                      type=\"string\"\n                                      placeholder={numberType}\n                                      value={idNumber}\n                                      onChange={this.handleChangeIdNumber}\n                                      onFocus={this.handleFieldFocus('idNumber')}\n                                      onBlur={this.handleFieldFocus('idNumber')}\n                                    />\n                                </fieldset>\n                                <fieldset className={expirationFocusedClass}>\n                                    {expiration && <legend>{this.translate('page.body.kyc.documents.expiryDate')}</legend>}\n                                    <MaskInput\n                                      maskString=\"00/00/0000\"\n                                      mask=\"00/00/0000\"\n                                      onChange={this.handleChangeExpiration}\n                                      onFocus={this.handleFieldFocus('expiration')}\n                                      onBlur={this.handleFieldFocus('expiration')}\n                                      value={expiration}\n                                      className=\"group-input\"\n                                      placeholder={this.translate('page.body.kyc.documents.expiryDate')}\n                                    />\n                                </fieldset>\n                            </div>\n                        </div>\n                        <div className=\"pg-confirm__loader\">\n                            {loading ? <Loader /> : null}\n                        </div>\n                        <div className=\"pg-confirm__content-documents-col pg-confirm__content-documents-drag\">\n                            <div className=\"pg-confirm__content-documents-col-row\">\n                                <div className=\"pg-confirm__content-documents-col-row-content-2\">\n                                    {this.translate('page.body.kyc.documents.upload')}\n                                    <div className=\"pg-confirm__content-documents-col-row-content-2-documents\">\n                                        <form\n                                            className=\"box\"\n                                            draggable={true}\n                                            onDrop={this.handleFileDrop}\n                                            onDragOver={this.handleDragOver}\n                                            method=\"post\"\n                                            action=\"\"\n                                            data-enctype=\"multipart/form-data\"\n                                        >\n                                            <input\n                                                className=\"pg-confirm__content-documents-col-row-content-2-documents-input\"\n                                                data-multiple-caption=\"files selected\"\n                                                draggable={true}\n                                                multiple={true}\n                                                name=\"files[]\"\n                                                type=\"file\"\n                                                id=\"file\"\n                                                onChange={this.handleUploadScan}\n                                            />\n                                            <div className=\"pg-confirm__content-documents-col-row-content-2-documents-label\">\n                                                <label\n                                                    className=\"pg-confirm__content-documents-col-row-content-2-documents-label-item\"\n                                                    htmlFor=\"file\"\n                                                >\n                                                    <p className=\"active\">{this.translate('page.body.kyc.documents.drag')}</p>\n                                                    <div className=\"muted\">{this.translate('page.body.kyc.documents.maxFile')}</div>\n                                                    <div className=\"muted\">{this.translate('page.body.kyc.documents.maxNum')}</div>\n                                                </label>\n                                            </div>\n                                        </form>\n                                    </div>\n                                    {Array.from(scans).map(this.renderScan)}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"pg-confirm__content-deep\">\n                    <Button\n                        className=\"pg-confirm__content-phone-deep-button\"\n                        label={this.translate('page.body.kyc.submit')}\n                        onClick={this.sendDocuments}\n                        disabled={this.handleCheckButtonDisabled()}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private handleChangeDocumentsType = (value: string) => {\n        this.setState({\n            documentsType: value,\n        });\n    };\n\n    private handleFileDelete = (key: number) => () => {\n        const fileList = Array.from(this.state.scans);\n        fileList.splice(key, 1);\n        this.setState({\n            scans: fileList,\n        });\n    }\n\n    private renderScan = (scan: File, index: number) => {\n        return (\n            <div\n                className=\"pg-confirm__content-documents-filename\"\n                key={index}\n                onClick={this.handleFileDelete(index)}\n            >\n                {scan.name.slice(0, 27)}...&nbsp;\n                <img alt=\"close\" src={close}/>\n            </div>\n        );\n    }\n\n    private handleChangeIdNumber = (e: OnChangeEvent) => {\n        this.setState({\n            idNumber: e.target.value,\n        });\n    };\n\n    private handleFieldFocus = (field: string) => {\n        return () => {\n            switch (field) {\n                case 'expiration':\n                    this.setState({\n                        expirationFocused: !this.state.expirationFocused,\n                    });\n                    break;\n                case 'idNumber':\n                    this.setState({\n                        idNumberFocused: !this.state.idNumberFocused,\n                    });\n                    break;\n                default:\n                    break;\n            }\n        };\n    }\n\n    private handleChangeExpiration = (e: OnChangeEvent) => {\n        this.setState({\n          expiration: formatDate(e.target.value),\n        });\n    }\n\n    private handleUploadScan = uploadEvent => {\n        const allFiles: File[] = uploadEvent.target.files;\n        const oldFileList = Array.from(this.state.scans);\n        const documentsCount = 5;\n        const additionalFileList = Array.from(allFiles).length > documentsCount ?  Array.from(allFiles).slice(0,documentsCount) : Array.from(allFiles);\n        if (oldFileList.length + additionalFileList.length <= documentsCount) {\n            this.setState({ scans: additionalFileList.concat(oldFileList) });\n        } else {\n            this.setState({ scans: additionalFileList.concat(oldFileList).slice(0,documentsCount) });\n            this.props.fetchAlert({ message: ['resource.documents.limit_reached'], type: 'error'});\n        }\n    }\n    private handleFileDrop = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      const uploadObj = {\n          target: event.nativeEvent.dataTransfer,\n      };\n      this.handleUploadScan(uploadObj);\n    }\n\n    private handleDragOver = event => {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    private handleCheckButtonDisabled = () => {\n        const {\n            expiration,\n            idNumber,\n            scans,\n        } = this.state;\n        return !scans.length || !idNumber || !expiration;\n    }\n\n    private sendDocuments = () => {\n        const {\n            scans,\n            idNumber,\n            expiration,\n            documentsType,\n        }: DocumentsState = this.state;\n\n        const typeOfDocuments = this.getDocumentsType(documentsType);\n        const docExpire = isDateInFuture(expiration) ? expiration : '';\n\n        if (!scans.length) {\n            return;\n        }\n\n        const request = new FormData();\n\n        for (const scan of scans) {\n            request.append('upload[]', scan);\n        }\n        request.append('doc_expire', docExpire);\n        request.append('doc_type', typeOfDocuments);\n        request.append('doc_number', idNumber);\n\n        this.props.sendDocuments(request);\n    };\n\n    private getDocumentsType = (value: string) => {\n        switch (value) {\n           case this.data[0]: return 'Passport';\n           case this.data[1]: return 'Identity card';\n           case this.data[2]: return 'Driver license';\n           case this.data[3]: return 'Utility Bill';\n           default: return value;\n        }\n    };\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    success: selectSendDocumentsSuccess(state),\n    loading: selectSendDocumentsLoading(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        fetchAlert: payload => dispatch(alertPush(payload)),\n        sendDocuments: payload => dispatch(sendDocuments(payload)),\n    });\n\n// tslint:disable-next-line:no-any\nexport const Documents = injectIntl(withRouter(connect(mapStateToProps, mapDispatchProps)(DocumentsComponent) as any));\n"]},"metadata":{},"sourceType":"module"}