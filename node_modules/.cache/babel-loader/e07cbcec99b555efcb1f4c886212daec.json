{"ast":null,"code":"import _regeneratorRuntime from \"/workspaces/temx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(emailVerificationSaga);\n\n// tslint:disable-next-line no-submodule-imports\nimport { call, put } from 'redux-saga/effects';\nimport { API } from '../../../../api';\nimport { alertPush } from '../../../public/alert';\nimport { emailVerificationData, emailVerificationError } from '../actions';\nvar sessionsConfig = {\n  apiVersion: 'barong'\n};\nexport function emailVerificationSaga(action) {\n  return _regeneratorRuntime.wrap(function emailVerificationSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(API.post(sessionsConfig), '/identity/users/email/generate_code', {\n            email: action.payload.email,\n            lang: action.payload.lang\n          });\n\n        case 3:\n          _context.next = 5;\n          return put(emailVerificationData());\n\n        case 5:\n          _context.next = 7;\n          return put(alertPush({\n            message: ['success.message.sent'],\n            type: 'success'\n          }));\n\n        case 7:\n          _context.next = 15;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put(emailVerificationError(_context.t0));\n\n        case 13:\n          _context.next = 15;\n          return put(alertPush({\n            message: _context.t0.message,\n            code: _context.t0.code,\n            type: 'error'\n          }));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}","map":{"version":3,"sources":["/workspaces/temx/src/modules/user/emailVerification/sagas/emailVerificationSaga.ts"],"names":["emailVerificationSaga","call","put","API","alertPush","emailVerificationData","emailVerificationError","sessionsConfig","apiVersion","action","post","email","payload","lang","message","type","code"],"mappings":";;;;yBAiBiBA,qB;;AAjBjB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,GAAT,QAAoC,iBAApC;AACA,SACIC,SADJ,QAEO,uBAFP;AAGA,SACIC,qBADJ,EAEIC,sBAFJ,QAIO,YAJP;AAOA,IAAMC,cAA8B,GAAG;AACnCC,EAAAA,UAAU,EAAE;AADuB,CAAvC;AAIA,OAAO,SAAUR,qBAAV,CAAgCS,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEC,iBAAMR,IAAI,CAACE,GAAG,CAACO,IAAJ,CAASH,cAAT,CAAD,EAA2B,qCAA3B,EAAkE;AACxEI,YAAAA,KAAK,EAAEF,MAAM,CAACG,OAAP,CAAeD,KADkD;AAExEE,YAAAA,IAAI,EAAEJ,MAAM,CAACG,OAAP,CAAeC;AAFmD,WAAlE,CAAV;;AAFD;AAAA;AAMC,iBAAMX,GAAG,CAACG,qBAAqB,EAAtB,CAAT;;AAND;AAAA;AAOC,iBAAMH,GAAG,CAACE,SAAS,CAAC;AAACU,YAAAA,OAAO,EAAE,CAAC,sBAAD,CAAV;AAAoCC,YAAAA,IAAI,EAAE;AAA1C,WAAD,CAAV,CAAT;;AAPD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASC,iBAAMb,GAAG,CAACI,sBAAsB,aAAvB,CAAT;;AATD;AAAA;AAUC,iBAAMJ,GAAG,CAACE,SAAS,CAAC;AAACU,YAAAA,OAAO,EAAE,YAAMA,OAAhB;AAAyBE,YAAAA,IAAI,EAAE,YAAMA,IAArC;AAA2CD,YAAAA,IAAI,EAAE;AAAjD,WAAD,CAAV,CAAT;;AAVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// tslint:disable-next-line no-submodule-imports\nimport { call, put } from 'redux-saga/effects';\nimport { API, RequestOptions } from '../../../../api';\nimport {\n    alertPush,\n} from '../../../public/alert';\nimport {\n    emailVerificationData,\n    emailVerificationError,\n    EmailVerificationFetch,\n} from '../actions';\n\n\nconst sessionsConfig: RequestOptions = {\n    apiVersion: 'barong',\n};\n\nexport function* emailVerificationSaga(action: EmailVerificationFetch) {\n    try {\n        yield call(API.post(sessionsConfig), '/identity/users/email/generate_code', {\n            email: action.payload.email,\n            lang: action.payload.lang,\n        });\n        yield put(emailVerificationData());\n        yield put(alertPush({message: ['success.message.sent'], type: 'success'}));\n    } catch (error) {\n        yield put(emailVerificationError(error));\n        yield put(alertPush({message: error.message, code: error.code, type: 'error'}));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}